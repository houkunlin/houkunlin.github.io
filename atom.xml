<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>侯坤林博客</title>
  
  <subtitle>用双手改变世界，梦想成就未来。</subtitle>
  <link href="https://houkunlin.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://houkunlin.gitee.io/"/>
  <updated>2023-07-14T08:23:17.000Z</updated>
  <id>https://houkunlin.gitee.io/</id>
  
  <author>
    <name>侯坤林</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gradle发布jar到Gitea的Package Registry</title>
    <link href="https://houkunlin.gitee.io/2023/07/14/gradle-maven-publish-gitea-packages-repository/"/>
    <id>https://houkunlin.gitee.io/2023/07/14/gradle-maven-publish-gitea-packages-repository/</id>
    <published>2023-07-14T08:23:17.000Z</published>
    <updated>2023-07-14T08:23:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本次测试版本说明 Gradle 7.6 ，Gitea 1.19.3，SpringBoot 3.x，Java 17</p><p>实测 Gradle 7.2 ，Gitea 1.19.3，SpringBoot 2.5.x，Java 1.8 可用</p></blockquote><h2 id="创建一个-AccessToken"><a href="#创建一个-AccessToken" class="headerlink" title="创建一个 AccessToken"></a>创建一个 AccessToken</h2><p>进入到【个人设置】》【应用】中，在【管理 Access Token】中创建一个 <code>AccessToken</code> ，授权范围选中 <code>package</code> ，然后点击“生成令牌”即可，令牌只显示一次，记得保存好。</p><p><img src="assets/image-20230714162703559.png" alt="image-20230714162703559"></p><p><img src="assets/image-20230714162719086.png" alt="image-20230714162719086"></p><p><img src="assets/image-20230714162810762.png" alt="image-20230714162810762"></p><h2 id="Cargo-注册中心索引初始化"><a href="#Cargo-注册中心索引初始化" class="headerlink" title="Cargo 注册中心索引初始化"></a>Cargo 注册中心索引初始化</h2><p>进入到【个人设置】》【软件包】页面，第一次操作需要在页面中【Cargo 注册中心索引】点击“初始化索引”，后续也可以点击“重建索引”。</p><p><img src="assets/image-20230714163027306.png" alt="image-20230714163027306"></p><p>索引创建成功后，在我们的个人仓库列表中会自动生成一个仓库名为 <code>_cargo-index</code> 的仓库。</p><p><img src="assets/image-20230714171758217.png" alt="image-20230714171758217"></p><h2 id="Gradle-配置"><a href="#Gradle-配置" class="headerlink" title="Gradle 配置"></a>Gradle 配置</h2><p>Maven的配置可参考 <a href="https://docs.gitea.com/packages/usage/packages/maven">官方说明文档</a> </p><p>在我们的 <code>build.gradle</code> 文件中增加如下配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">// 发布普通Java项目时引入</span></span><br><span class="line">    <span class="comment">// id &#x27;java-library&#x27;</span></span><br><span class="line">    <span class="comment">// 发布一个 dependencies pom 依赖jar时候引入，它不可与 Java 项目同时使用</span></span><br><span class="line">    <span class="comment">// id &#x27;java-platform&#x27;</span></span><br><span class="line">    <span class="comment">// 签名插件，在把项目发布到【maven中央仓库】的时候用的到，需要对 jar 进行签名，本项目并未用到。</span></span><br><span class="line">    <span class="comment">// 需要创建一个公钥和私钥，然后把公钥上传到公共密钥服务器</span></span><br><span class="line">    <span class="comment">// https://zhuanlan.zhihu.com/p/164446166</span></span><br><span class="line">    <span class="comment">// https://central.sonatype.org/publish/requirements/gpg/</span></span><br><span class="line">    <span class="comment">// id &#x27;signing&#x27;</span></span><br><span class="line">    <span class="comment">// 项目发布插件，在把项目发布到maven仓库的时候需要用到这个插件，具体的用法请看 $&#123;project.dir&#125;/buildSrc/publishing.gradle</span></span><br><span class="line">    id <span class="string">&#x27;maven-publish&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义项目的git仓库地址</span></span><br><span class="line"><span class="keyword">def</span> gitRepo = <span class="string">&quot;github.com/houkunlin/xxxxx.git&quot;</span></span><br><span class="line">publishing &#123;</span><br><span class="line">    <span class="comment">// 发布一个 dependencies pom 依赖jar时候引入，它不可与 Java 项目同时使用</span></span><br><span class="line">    <span class="comment">// publications &#123;</span></span><br><span class="line">    <span class="comment">//     gradlePlatform(MavenPublication) &#123;</span></span><br><span class="line">    <span class="comment">//         from components.javaPlatform</span></span><br><span class="line">    <span class="comment">//         artifactId &quot;$&#123;group&#125;.dependencies&quot;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 发布普通Java项目的配置</span></span><br><span class="line">    publications &#123;</span><br><span class="line">        library(MavenPublication) &#123;</span><br><span class="line">            from components.java</span><br><span class="line">            pom &#123;</span><br><span class="line">                name = project.name</span><br><span class="line">                packaging = <span class="string">&#x27;jar&#x27;</span></span><br><span class="line">                description = project.description</span><br><span class="line">                url = <span class="string">&quot;https://$&#123;gitRepo&#125;&quot;</span></span><br><span class="line">                <span class="comment">// properties = []</span></span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name = <span class="string">&#x27;Mulan Permissive Software License，Version 2&#x27;</span></span><br><span class="line">                        url = <span class="string">&#x27;https://license.coscl.org.cn/MulanPSL2&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id = <span class="string">&#x27;houkunlin&#x27;</span></span><br><span class="line">                        name = <span class="string">&#x27;HouKunLin&#x27;</span></span><br><span class="line">                        email = <span class="string">&#x27;houkunlin@aliyun.com&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection = <span class="string">&quot;scm:git://$&#123;gitRepo&#125;&quot;</span></span><br><span class="line">                    developerConnection = <span class="string">&quot;scm:git://$&#123;gitRepo&#125;&quot;</span></span><br><span class="line">                    url = <span class="string">&quot;git://$&#123;gitRepo&#125;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            name = <span class="string">&quot;gitea&quot;</span></span><br><span class="line">            credentials(HttpHeaderCredentials) &#123;</span><br><span class="line">                name = <span class="string">&quot;Authorization&quot;</span></span><br><span class="line">                <span class="comment">// 这里未直接定义 Access Token 令牌值，防止令牌泄露</span></span><br><span class="line">                <span class="comment">// 而是通过把 Gitea Access Token 存入到环境变量中，或者执行命令参数中，或者存入 gradle.properties 文件中</span></span><br><span class="line">                value = <span class="string">&quot;token $&#123;findProperty(&quot;</span>GITEA_TOKEN<span class="string">&quot;) ?: System.getenv(&quot;</span>GITEA_TOKEN<span class="string">&quot;)&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            authentication &#123;</span><br><span class="line">                header(HttpHeaderAuthentication)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用 HTTP 是需要设置这个参数</span></span><br><span class="line">            setAllowInsecureProtocol(<span class="literal">true</span>)</span><br><span class="line">            <span class="comment">// http://gitea.domain.com/api/packages/&#123;owner&#125;/maven 这个 owner 改成自己的用户名或者组织名</span></span><br><span class="line">            url <span class="string">&quot;http://gitea.domain.com/api/packages/houkunlin/maven&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// jar签名设置</span></span><br><span class="line"><span class="comment">// signing &#123;</span></span><br><span class="line"><span class="comment">//     // 使用 gradle.properties 设置参数，或者在命令行中增加 -Pgpg_private_key= -Pgpg_password= 设置参数</span></span><br><span class="line"><span class="comment">//     // 或者在环境变量中设置相应的环境变量</span></span><br><span class="line"><span class="comment">//     String signingKey = findProperty(&quot;gpg_private_key&quot;) ?: System.getenv(&quot;gpg_private_key&quot;)</span></span><br><span class="line"><span class="comment">//     if (signingKey != null) &#123;</span></span><br><span class="line"><span class="comment">//         String signingPassword = findProperty(&quot;gpg_password&quot;) ?: System.getenv(&quot;gpg_password&quot;)</span></span><br><span class="line"><span class="comment">//         useInMemoryPgpKeys(signingKey, signingPassword)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     sign publishing.publications</span></span><br><span class="line"><span class="comment">//     // sign configurations.archives</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>加入以上配置后，刷新 Gradle 项目，然后就可以通过 <code>./gradlew build publishing</code> 编译并发布项目jar了</p><h2 id="查看已经推送到-Gitea-的-jar"><a href="#查看已经推送到-Gitea-的-jar" class="headerlink" title="查看已经推送到 Gitea 的 jar"></a>查看已经推送到 Gitea 的 jar</h2><p>进入到【个人首页】》【软件包】就可以看到刚刚推送的jar包</p><p><img src="assets/image-20230714170719360.png" alt="image-20230714170719360"></p><p>点击进去可查看相关的jar信息和maven配置</p><p><img src="assets/image-20230714170905047.png" alt="image-20230714170905047"></p><p><img src="assets/image-20230714170940184.png" alt="image-20230714170940184"></p><p>在包的设置中，可以把jar包关联到某个仓库，然后就可以在【仓库】》【软件包】中看到这个jar包了</p><p><img src="assets/image-20230714171008045.png" alt="image-20230714171008045"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本次测试版本说明 Gradle 7.6 ，Gitea 1.19.3，SpringBoot 3.x，Java 17&lt;/p&gt;
&lt;p&gt;实测 Gradle 7.2 ，Gitea 1.19.3，SpringBoot 2.5.x，Java 1.8 可用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建一个-AccessToken&quot;&gt;&lt;a href=&quot;#创建一个-AccessToken&quot; class=&quot;headerlink&quot; title=&quot;创建一个 AccessToken&quot;&gt;&lt;/a&gt;创建一个 AccessToken&lt;/h2&gt;&lt;p&gt;进入到【个人设置】》【应用】中，在【管理 Access Token】中创建一个 &lt;code&gt;AccessToken&lt;/code&gt; ，授权范围选中 &lt;code&gt;package&lt;/code&gt; ，然后点击“生成令牌”即可，令牌只显示一次，记得保存好。&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="https://houkunlin.gitee.io/tags/git/"/>
    
    <category term="gradle" scheme="https://houkunlin.gitee.io/tags/gradle/"/>
    
    <category term="gitea" scheme="https://houkunlin.gitee.io/tags/gitea/"/>
    
  </entry>
  
  <entry>
    <title>Spring Webclient 请求Body限制 256KB 问题</title>
    <link href="https://houkunlin.gitee.io/2023/06/14/spring-webclient-max-request-body-size/"/>
    <id>https://houkunlin.gitee.io/2023/06/14/spring-webclient-max-request-body-size/</id>
    <published>2023-06-14T08:19:16.000Z</published>
    <updated>2023-06-14T08:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题很久之前遇到过了，这次遇到另外一个有点类似的问题，那就是 SpringCloudGateway 请求限制 256KB 问题，在这里也记录一下 WebClient 请求限制 256KB 问题的处理方式。</p><p>在 <a href="https://www.baeldung.com/spring-webflux-databufferlimitexception">How to Resolve Spring Webflux DataBufferLimitException</a> 这篇文章中有提到解决方案，在这里复制一下以做记录。</p><p>在创建 <code>WebClient</code> 时设置 <code>exchangeStrategies</code> 参数，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 全局</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebClient <span class="title">getProgSelfWebClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 按照原文档说明，此方式好像还需要增加配置文件问题： spring.codec.max-in-memory-size=500KB</span></span><br><span class="line">        <span class="keyword">return</span> WebClient.builder()</span><br><span class="line">          .baseUrl(host)</span><br><span class="line">          .exchangeStrategies(</span><br><span class="line">            ExchangeStrategies.builder()</span><br><span class="line">          .codecs(codecs -&gt; codecs.defaultCodecs().maxInMemorySize(<span class="number">500</span> * <span class="number">1024</span>))</span><br><span class="line">          .build()</span><br><span class="line">           )</span><br><span class="line">          .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动创建，争对单个 Client 接口生效</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileHttpClient <span class="title">remoteDemoLoadBalancer</span><span class="params">(<span class="keyword">final</span> ReactorLoadBalancerExchangeFilterFunction reactorLoadBalancerExchangeFilterFunction)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置默认缓冲区大小，否则默认 256K</span></span><br><span class="line">        <span class="keyword">final</span> ExchangeStrategies strategies = ExchangeStrategies.builder()</span><br><span class="line">                .codecs(codecs -&gt; codecs.defaultCodecs().maxInMemorySize(-<span class="number">1</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        WebClient client = WebClient.builder()</span><br><span class="line">                .exchangeStrategies(strategies)</span><br><span class="line">                .filter(reactorLoadBalancerExchangeFilterFunction)</span><br><span class="line">                .baseUrl(<span class="string">&quot;http://files-server/&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        HttpServiceProxyFactory factory = HttpServiceProxyFactory.builder(WebClientAdapter.forClient(client)).build();</span><br><span class="line">        <span class="keyword">return</span> factory.createClient(FileHttpClient.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个问题很久之前遇到过了，这次遇到另外一个有点类似的问题，那就是 SpringCloudGateway 请求限制 256KB 问题，在这里也记录一下 WebClient 请求限制 256KB 问题的处理方式。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&quot;https://www.baeldung.com/spring-webflux-databufferlimitexception&quot;&gt;How to Resolve Spring Webflux DataBufferLimitException&lt;/a&gt; 这篇文章中有提到解决方案，在这里复制一下以做记录。&lt;/p&gt;
&lt;p&gt;在创建 &lt;code&gt;WebClient&lt;/code&gt; 时设置 &lt;code&gt;exchangeStrategies&lt;/code&gt; 参数，示例代码如下：&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway 上传文件大小限制 256KB 问题、请求Body限制 256KB 问题</title>
    <link href="https://houkunlin.gitee.io/2023/06/14/spring-cloud-gateway-max-request-body-size/"/>
    <id>https://houkunlin.gitee.io/2023/06/14/spring-cloud-gateway-max-request-body-size/</id>
    <published>2023-06-14T07:43:38.000Z</published>
    <updated>2023-06-14T07:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决常规请求大小限制问题"><a href="#解决常规请求大小限制问题" class="headerlink" title="解决常规请求大小限制问题"></a>解决常规请求大小限制问题</h2><p>近日，在把文件上传接口放在 SpringCloudGateway 后发现偶尔上传文件失败问题，经过初步排查前端上传文件超过256KB就会出错，经过简单日志排查，发现是我们的网关问题，错误日志大致如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.core.io.buffer.DataBufferLimitException: Exceeded limit on max bytes to buffer : 262144</span><br><span class="line">at org.springframework.core.io.buffer.LimitedDataBufferList.raiseLimitException(LimitedDataBufferList.java:99)</span><br><span class="line">Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException:</span><br><span class="line">Error has been observed at the following site(s):</span><br><span class="line">*__checkpoint ⇢ org.springframework.cloud.gateway.filter.WeightCalculatorWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.web.filter.reactive.ServerHttpObservationFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ HTTP POST &quot;/api/files/upload&quot; [ExceptionHandlingWebHandler]</span><br><span class="line">Original Stack Trace:</span><br><span class="line">at org.springframework.core.io.buffer.LimitedDataBufferList.raiseLimitException(LimitedDataBufferList.java:99)</span><br><span class="line">at org.springframework.core.io.buffer.LimitedDataBufferList.updateCount(LimitedDataBufferList.java:92)</span><br><span class="line">at org.springframework.core.io.buffer.LimitedDataBufferList.add(LimitedDataBufferList.java:58)</span><br><span class="line">at reactor.core.publisher.MonoCollect$CollectSubscriber.onNext(MonoCollect.java:103)</span><br><span class="line">at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)</span><br><span class="line">// .......</span><br><span class="line">2023-06-14T10:54:34.710+08:00 ERROR 54904 --- [ctor-http-nio-6] r.n.channel.ChannelOperationsHandler     : [5f5eda41-1, L:/127.0.0.1:8081 ! R:kubernetes.docker.internal/127.0.0.1:55331] Error was received while reading the incoming data. The connection will be closed.</span><br><span class="line"></span><br><span class="line">io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1</span><br><span class="line">at io.netty.util.internal.ReferenceCountUpdater.toLiveRealRefCnt(ReferenceCountUpdater.java:83)</span><br><span class="line">at io.netty.util.internal.ReferenceCountUpdater.release(ReferenceCountUpdater.java:148)</span><br><span class="line">at io.netty.buffer.AbstractReferenceCountedByteBuf.release(AbstractReferenceCountedByteBuf.java:101)</span><br><span class="line">at io.netty.handler.codec.http.DefaultHttpContent.release(DefaultHttpContent.java:92)</span><br><span class="line">at io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:90)</span><br><span class="line">at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:380)</span><br></pre></td></tr></table></figure><p>发现是网关默认限制了请求Body的大小为 256KB，而我们则需要修改这个限制，经过网上查找资料，找到 <a href="https://www.baeldung.com/spring-webflux-databufferlimitexception">How to Resolve Spring Webflux DataBufferLimitException</a> 这篇文章，文章中的解决方式如下：</p><p>实现 <code>WebFluxConfigurer</code> 接口并重写 <code>void configureHttpMessageCodecs(ServerCodecConfigurer)</code> 方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebFluxConfiguration</span> <span class="keyword">implements</span> <span class="title">WebFluxConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureHttpMessageCodecs</span><span class="params">(ServerCodecConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可以把下面的 500 * 1024 改为 -1 表示不限制请求大小</span></span><br><span class="line">        configurer.defaultCodecs().maxInMemorySize(<span class="number">500</span> * <span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及在配置文件（<code>application.yml</code>）中增加配置内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">codec:</span></span><br><span class="line">    <span class="comment"># 可以把下面的 500KB 改为 -1 表示不限制请求大小</span></span><br><span class="line">    <span class="attr">max-in-memory-size:</span> <span class="string">500KB</span></span><br></pre></td></tr></table></figure><p>经过以上两个设置，就可以成功修改请求大小限制。</p><h2 id="解决常规解决方案不生效问题"><a href="#解决常规解决方案不生效问题" class="headerlink" title="解决常规解决方案不生效问题"></a>解决常规解决方案不生效问题</h2><p>一般情况下，经过上面的处理，都可以成功的修改Gateway的请求限制，但是有时候他莫名其妙的失效了，在本次的错误处理中，我就遇到了这个问题。</p><p>最终经过排查，是我向Gateway增加了一个 <code>RequestLogFilter</code> 请求日志打印的全局过滤器导致的，在这个过滤器中，我手动创建了一个 <code>XxxGatewayFilterFactory</code> 对象，大致代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLogFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GatewayFilter delegate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delegate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// .......</span></span><br><span class="line">        <span class="keyword">return</span> delegate.filter(exchange, chain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ModifyRequestBodyGatewayFilterFactory.<span class="function">Config <span class="title">getConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModifyRequestBodyGatewayFilterFactory.Config cf = <span class="keyword">new</span> ModifyRequestBodyGatewayFilterFactory.Config();</span><br><span class="line">        <span class="comment">// .......</span></span><br><span class="line">        <span class="keyword">return</span> cf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = <span class="keyword">new</span> ModifyRequestBodyGatewayFilterFactory().apply(<span class="keyword">this</span>.getConfig());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的 <code>RequestLogFilter</code> 对象中，在初始化Bean阶段创建了 <code>ModifyRequestBodyGatewayFilterFactory</code> 对象，而在其构造方法中使用 <code>HandlerStrategies.withDefaults().messageReaders()</code> 创建了一个默认的 <code>List&lt;HttpMessageReader&lt;?&gt;&gt;</code> ，问题就是出在这个地方。</p><p><code>HandlerStrategies.withDefaults().messageReaders()</code> 会创建一个默认的 <code>ServerCodecConfigurer</code> 对象，此对象负责初始化相关的 <code>HttpMessageReader</code> 对象，而这个环节中，<code>HandlerStrategies</code> 和 <code>ServerCodecConfigurer</code> 都无法读取我们前面配置的 <code>maxInMemorySize </code> 参数，此时 <code>ServerCodecConfigurer#maxInMemorySize == null</code>  ，所以在初始化 <code>HttpMessageReader</code> 时无法设置正确的请求大小限制配置，并且最终系统启动完毕后，会直接使用此次创建的 <code>List&lt;HttpMessageReader&lt;?&gt;&gt;</code> ，直接导致后续所有的请求都无法突破 256KB 的限制。</p><p>实际最终的问题是，代码运行的过程中，手动创建 <code>ServerCodecConfigurer</code> 比 SpringBoot 初始化的 <code>ServerCodecConfigurer</code> 的时间早 ，导致了Gateway最终 <code>codecConfigurer.getReaders()</code> 得到的 <code>List&lt;HttpMessageReader&lt;?&gt;&gt;</code> 以第一个为准。</p><p>因此解决的方法也很简单，那就是使用 SpringBoot 初始化的 <code>ServerCodecConfigurer</code> 对象，或者我们创建 <code>ServerCodecConfigurer</code> 对象时手动设置其 <code>maxInMemorySize</code> 参数。</p><p>例如可参考如下解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLogFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer codecConfigurer;</span><br><span class="line">    <span class="keyword">private</span> GatewayFilter delegate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delegate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// .......</span></span><br><span class="line">        <span class="keyword">return</span> delegate.filter(exchange, chain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ModifyRequestBodyGatewayFilterFactory.<span class="function">Config <span class="title">getConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModifyRequestBodyGatewayFilterFactory.Config cf = <span class="keyword">new</span> ModifyRequestBodyGatewayFilterFactory.Config();</span><br><span class="line">        <span class="comment">// .......</span></span><br><span class="line">        <span class="keyword">return</span> cf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = <span class="keyword">new</span> ModifyRequestBodyGatewayFilterFactory(codecConfigurer.getReaders()).apply(<span class="keyword">this</span>.getConfig());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;解决常规请求大小限制问题&quot;&gt;&lt;a href=&quot;#解决常规请求大小限制问题&quot; class=&quot;headerlink&quot; title=&quot;解决常规请求大小限制问题&quot;&gt;&lt;/a&gt;解决常规请求大小限制问题&lt;/h2&gt;&lt;p&gt;近日，在把文件上传接口放在 SpringCloudGateway 后发现偶尔上传文件失败问题，经过初步排查前端上传文件超过256KB就会出错，经过简单日志排查，发现是我们的网关问题，错误日志大致如下：&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;org.springframework.core.io.buffer.DataBufferLimitException: Exceeded limit on max bytes to buffer : 262144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at org.springframework.core.io.buffer.LimitedDataBufferList.raiseLimitException(LimitedDataBufferList.java:99)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error has been observed at the following site(s):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*__checkpoint ⇢ org.springframework.cloud.gateway.filter.WeightCalculatorWebFilter [DefaultWebFilterChain]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*__checkpoint ⇢ org.springframework.web.filter.reactive.ServerHttpObservationFilter [DefaultWebFilterChain]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*__checkpoint ⇢ HTTP POST &amp;quot;/api/files/upload&amp;quot; [ExceptionHandlingWebHandler]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Original Stack Trace:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		at org.springframework.core.io.buffer.LimitedDataBufferList.raiseLimitException(LimitedDataBufferList.java:99)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		at org.springframework.core.io.buffer.LimitedDataBufferList.updateCount(LimitedDataBufferList.java:92)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		at org.springframework.core.io.buffer.LimitedDataBufferList.add(LimitedDataBufferList.java:58)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		at reactor.core.publisher.MonoCollect$CollectSubscriber.onNext(MonoCollect.java:103)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// .......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-06-14T10:54:34.710+08:00 ERROR 54904 --- [ctor-http-nio-6] r.n.channel.ChannelOperationsHandler     : [5f5eda41-1, L:/127.0.0.1:8081 ! R:kubernetes.docker.internal/127.0.0.1:55331] Error was received while reading the incoming data. The connection will be closed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at io.netty.util.internal.ReferenceCountUpdater.toLiveRealRefCnt(ReferenceCountUpdater.java:83)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at io.netty.util.internal.ReferenceCountUpdater.release(ReferenceCountUpdater.java:148)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at io.netty.buffer.AbstractReferenceCountedByteBuf.release(AbstractReferenceCountedByteBuf.java:101)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at io.netty.handler.codec.http.DefaultHttpContent.release(DefaultHttpContent.java:92)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:90)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:380)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux sysctl 内核参数配置</title>
    <link href="https://houkunlin.gitee.io/2023/04/20/linux-sysctl-config/"/>
    <id>https://houkunlin.gitee.io/2023/04/20/linux-sysctl-config/</id>
    <published>2023-04-20T09:09:01.000Z</published>
    <updated>2023-04-20T09:09:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在安装完 Linux 后，通常需要对内核做一些优化配置，以下是一些示例配置，创建 <code>/etc/sysctl.d/user.conf</code> 文件并编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vm.max_map_count&#x3D;65530 # 默认最大虚拟内存</span><br><span class="line">vm.max_map_count&#x3D;262144</span><br></pre></td></tr></table></figure><p>然后执行命令 <code>sysctl -p /etc/sysctl.d/user.conf</code> 应用修改</p><p>或者修改 <code>/etc/sysctl.conf</code> 文件，并增加以上内容，然后执行 <code>sysctl -p</code> 应用修改</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在安装完 Linux 后，通常需要对内核做一些优化配置，以下是一些示例配置，创建 &lt;code&gt;/etc/sysctl.d/user.conf&lt;/code&gt; 文件并编辑：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# vm.max_map_count&amp;#x3D;65530 # 默认最大虚拟内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm.max_map_count&amp;#x3D;262144&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后执行命令 &lt;code&gt;sysctl -p /etc/sysctl.d/user.conf&lt;/code&gt; 应用修改&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://houkunlin.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot ELK 日志部署和配置示例</title>
    <link href="https://houkunlin.gitee.io/2023/04/20/spring-boot-elk-logstash-config-xml/"/>
    <id>https://houkunlin.gitee.io/2023/04/20/spring-boot-elk-logstash-config-xml/</id>
    <published>2023-04-20T07:31:37.000Z</published>
    <updated>2023-04-20T07:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ElasticSearch-部署配置（8-7-0版本）"><a href="#ElasticSearch-部署配置（8-7-0版本）" class="headerlink" title="ElasticSearch 部署配置（8.7.0版本）"></a>ElasticSearch 部署配置（8.7.0版本）</h2><p>从 <a href="https://www.elastic.co/cn/downloads/elasticsearch">ElasticSearch官网</a> 下载安装包</p><p>它不允许在 root 下运行，如果当前是 root 用户，则需要创建一个单独的用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd elk</span><br><span class="line">useradd elk -g elk -p <span class="string">&quot;elk@123456&quot;</span></span><br><span class="line">chown -R elk:elk <span class="variable">$ES_HOME</span></span><br></pre></td></tr></table></figure><p>修改系统内核最大虚拟内存限制，在 <code>/etc/sysctl.conf</code> 增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count &#x3D; 262144</span><br></pre></td></tr></table></figure><p>修改 JVM 内存限制，创建 <code>config/jvm.options.d/memory.options</code> 文件并编辑：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 8.7 版本默认是16G，机器内存不够则需要手动修改</span><br><span class="line">-Xms5g</span><br><span class="line">-Xmx5g</span><br></pre></td></tr></table></figure><p>修改 <code>config/elasticsearch.yml</code> 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改数据保存路径</span></span><br><span class="line"><span class="comment">#path.data: /path/to/data</span></span><br><span class="line"><span class="comment"># 修改日志保存路径</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment"># 默认情况下，Elasticsearch 仅绑定到环回地址</span></span><br><span class="line"><span class="comment"># 为了与其他服务器上的节点进行通信并形成集群，您的节点将需要绑定到非环回地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment"># 修改端口，已默认 9200</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment"># 修改 HTTP API 绑定地址，已默认 0.0.0.0</span></span><br><span class="line"><span class="attr">http.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>执行 <code>./bin/elasticsearch</code> 启动服务，若无报错则启动成功，同时在控制台会打印一个 <code>elastic</code> 用户的初始化密码。<br>可以使用 <code>./bin/elasticsearch -d</code> 在后台运行服务。</p><p>访问 <code>https://[host]:9200</code> 查看是否启动成功，注意，是 https 协议</p><p>启动成功后可以使用 <code>./bin/elasticsearch-setup-passwords interactive</code> 来重置所有用户密码（此方式需要手动设置密码）。</p><p>也可以使用 <code>./bin/elasticsearch-setup-passwords auto</code> 来重置所有用户密码（此方式自动设置所有密码）。</p><p>也可以使用 <code>./bin/elasticsearch-reset-password -u elastic</code> 来重置 <code>elastic</code> 用户密码（此方式无法手动设置密码，由系统自动生成密码）</p><h2 id="Kibana-部署配置（8-7-0版本）"><a href="#Kibana-部署配置（8-7-0版本）" class="headerlink" title="Kibana 部署配置（8.7.0版本）"></a>Kibana 部署配置（8.7.0版本）</h2><p>从 <a href="https://www.elastic.co/cn/downloads/kibana">Kibana官网</a> 下载安装包</p><p>它默认不允许在 root 下运行，如果当前是 root 用户，则需要创建一个单独的用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd elk</span><br><span class="line">useradd elk -g elk -p <span class="string">&quot;elk@123456&quot;</span></span><br><span class="line">chown -R elk:elk <span class="variable">$KIBANA_HOME</span></span><br></pre></td></tr></table></figure><p>其实在启动的时候也可以增加参数来允许在 root 下运行 <code>./bin/kibana --allow-root</code> 但是既然默认不允许，那就不推荐。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改默认端口</span></span><br><span class="line"><span class="comment">#server.port: 5601</span></span><br><span class="line"><span class="comment"># 修改绑定地址</span></span><br><span class="line"><span class="comment">#server.host: &quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment"># 配置访问地址，虽然绑定了 0.0.0.0 ，任意网口都可以访问，但官方还是建议配置一个请求资源的前缀地址</span></span><br><span class="line"><span class="comment"># 例如在使用反向代理使用域名访问时，这里就配置域名的地址</span></span><br><span class="line"><span class="attr">server.publicBaseUrl:</span> <span class="string">&quot;http://172.22.1.10:5601/&quot;</span></span><br><span class="line"><span class="comment"># 修改连接 ElasticSearch 服务器地址</span></span><br><span class="line"><span class="comment">#elasticsearch.hosts: [&quot;http://localhost:9200&quot;]</span></span><br><span class="line"><span class="comment"># 修改默认中文页面</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><p>执行 <code>./bin/kibana</code> 启动服务，然后可以访问 <code>http://[host]:5601</code> ，注意，这里是 http 协议。</p><p>由于前面配置文件中没有配置具体的 ElasticSearch 服务地址和用户密码信息，在页面中提示配置 ElasticSearch 服务器信息，此时需要填写服务器地址和<br>kibana_system 的密码。<br>当前也可以在配置文件中写死这些配置。</p><p>如果不知道 <code>kibaba_system</code> 密码，可在 ElasticSearch 下执行 <code>./bin/elasticsearch-reset-password -u kibana_system</code> 命令重置密码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置访问地址，虽然绑定了 0.0.0.0 ，任意网口都可以访问，但官方还是建议配置一个请求资源的前缀地址</span></span><br><span class="line"><span class="comment"># 例如在使用反向代理使用域名访问时，这里就配置域名的地址</span></span><br><span class="line"><span class="attr">server.publicBaseUrl:</span> <span class="string">&quot;http://172.22.1.10:5601/&quot;</span></span><br><span class="line"><span class="comment"># 注意，这里是 https 协议</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;https://localhost:9200&quot;</span> ]</span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">&quot;kibana_system&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">&quot;4HgBCC7482ckdFcuVJvD&quot;</span></span><br><span class="line"><span class="comment"># 由于 ElasticSearch 使用了 https 访问，因此需要把 https 的验证关掉</span></span><br><span class="line"><span class="attr">elasticsearch.ssl.verificationMode:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><p>重启 Kibana 服务，访问 <code>http://[host]:5601</code> ，用 <code>elastic</code> 用户登录系统，如果忘记了密码，请使用命令重置密码，登录 Kibana<br>后可重新修改设置密码。</p><h2 id="Logstash-部署配置（8-7-0版本）"><a href="#Logstash-部署配置（8-7-0版本）" class="headerlink" title="Logstash 部署配置（8.7.0版本）"></a>Logstash 部署配置（8.7.0版本）</h2><p>从 <a href="https://www.elastic.co/cn/downloads/logstash">Logstash官网</a> 下载安装包</p><p>由于 ElasticSearch 使用了默认的自签名 https ，因此需要复制证书到 Logstash <code>copy -r $ES_HOME/config/certs/ $LOGSTASH_HOME/config/</code> ，当然也可以忽略 https 验证。</p><p>登录 Kibana 创建 <code>logstash_server</code> 用户和角色，角色赋予 <code>*</code> 索引的 <code>all</code> 权限，以及集群的 <code>manage_logstash_pipelines</code> 权限，系统已有的 logstash_system 账号无法创建索引，因此必须定制一个账号。</p><p>在 <code>$LOGSTASH_HOME</code> 创建一个 <code>springboot-logstash.conf</code> 配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    # 监听 4567 端口</span><br><span class="line">    port =&gt; 4567</span><br><span class="line">    # JSON格式处理</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    # 注意，这里是 https 协议</span><br><span class="line">    hosts =&gt; [&quot;https://localhost:9200&quot;]</span><br><span class="line">    user =&gt; &quot;logstash_server&quot;</span><br><span class="line">    # 其实密码可以使用环境变量的，例如：$ES_PASSWORD</span><br><span class="line">    password =&gt; &quot;logstash_server@123456&quot;</span><br><span class="line">    # 这里指定 https 协议的证书</span><br><span class="line">    #cacert =&gt; &quot;./config/certs/http_ca.crt&quot;</span><br><span class="line">    # 或者忽略 https 验证</span><br><span class="line">    ssl_certificate_verification =&gt; false</span><br><span class="line">    # 配置 ES 的索引名称，这里引用了 SpringBoot 传过来的应用名称作为一个索引参数，请注意，索引名称必须小写</span><br><span class="line">    index =&gt; &quot;spring-boot-%&#123;APP_NAME&#125;-%&#123;+YYYY-MM-dd&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  #stdout &#123;</span><br><span class="line">  #  # 在控制台打印日志</span><br><span class="line">  #  codec =&gt; rubydebug</span><br><span class="line">  #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 <code>./bin/logstash -f springboot-logstash.conf</code> 服务</p><h2 id="SpringBoot-配置"><a href="#SpringBoot-配置" class="headerlink" title="SpringBoot 配置"></a>SpringBoot 配置</h2><p>日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出</p><p>scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true</p><p>scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位 当scan为true时，此属性生效。默认的时间间隔为1分钟。</p><p>debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</p><p>在项目中引入依赖 <code>net.logstash.logback:logstash-logback-encoder:7.2</code>，在 <code>src/main/resources/</code><br>下配置 <code>logback-spring.xml</code> 文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;false&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- START: org/springframework/boot/logging/logback/base.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FILE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/file-appender.xml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- END: org/springframework/boot/logging/logback/base.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;web&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LOGSTASH_HOST&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logstash.host&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;127.0.0.1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LOGSTASH_PORT&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logstash.port&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;4567&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 线上环境的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ELK 的 LOGSTASH 日志配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOGSTASH&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- LOGSTASH 服务地址和端口，端口在服务端自定义 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOGSTASH_HOST&#125;:$&#123;LOGSTASH_PORT&#125;<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LogstashEncoder&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;customFields&gt;&#123;&quot;appname&quot;:&quot;自定义字段&quot;&#125;&lt;/customFields&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOGSTASH&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以及修改 <code>application.yml</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:logback-spring.xml</span></span><br></pre></td></tr></table></figure><h2 id="配置成系统服务并设置自启动"><a href="#配置成系统服务并设置自启动" class="headerlink" title="配置成系统服务并设置自启动"></a>配置成系统服务并设置自启动</h2><p>文件：<code>/lib/systemd/system/elasticsearch.service</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># http://www.jinbuguo.com/systemd/systemd.unit.html</span><br><span class="line">[Unit]</span><br><span class="line"># 单元的解释说明 http://www.jinbuguo.com/systemd/systemd.unit.html#Description=</span><br><span class="line">Description=ElasticSearch Server</span><br><span class="line"># 启动顺序设置</span><br><span class="line">After=network.target</span><br><span class="line"># 配合 After 设置强依赖服务，依赖单元必须已经全部处于启动成功的状态时才能启动当前单元 http://www.jinbuguo.com/systemd/systemd.unit.html#Requisite=</span><br><span class="line">#Requisite=</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=elk</span><br><span class="line"># 重启服务配置， on-failure 表示仅在服务进程异常退出时重启 http://www.jinbuguo.com/systemd/systemd.service.html#Restart=</span><br><span class="line">Restart=on-failure</span><br><span class="line"># 在重启服务前暂停的时间 http://www.jinbuguo.com/systemd/systemd.service.html#RestartSec=</span><br><span class="line">RestartSec=30s</span><br><span class="line"># 设置日志与标准输入输出 http://www.jinbuguo.com/systemd/systemd.exec.html#StandardOutput=</span><br><span class="line">StandardOutput=inherit</span><br><span class="line"># 设置工作路径 http://www.jinbuguo.com/systemd/systemd.exec.html#WorkingDirectory=</span><br><span class="line">WorkingDirectory=/opt/elasticsearch-8.7.0/</span><br><span class="line">ExecStart=/opt/elasticsearch-8.7.0/bin/elasticsearch</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>文件：<code>/lib/systemd/system/kibana.service</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># http://www.jinbuguo.com/systemd/systemd.unit.html</span><br><span class="line">[Unit]</span><br><span class="line"># 单元的解释说明 http://www.jinbuguo.com/systemd/systemd.unit.html#Description=</span><br><span class="line">Description=Kibana Server</span><br><span class="line"># 启动顺序设置</span><br><span class="line">After=network.target</span><br><span class="line"># 配合 After 设置强依赖服务，依赖单元必须已经全部处于启动成功的状态时才能启动当前单元 http://www.jinbuguo.com/systemd/systemd.unit.html#Requisite=</span><br><span class="line">#Requisite=</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=elk</span><br><span class="line"># 重启服务配置， on-failure 表示仅在服务进程异常退出时重启 http://www.jinbuguo.com/systemd/systemd.service.html#Restart=</span><br><span class="line">Restart=on-failure</span><br><span class="line"># 在重启服务前暂停的时间 http://www.jinbuguo.com/systemd/systemd.service.html#RestartSec=</span><br><span class="line">RestartSec=30s</span><br><span class="line"># 设置日志与标准输入输出 http://www.jinbuguo.com/systemd/systemd.exec.html#StandardOutput=</span><br><span class="line">StandardOutput=inherit</span><br><span class="line"># 设置工作路径 http://www.jinbuguo.com/systemd/systemd.exec.html#WorkingDirectory=</span><br><span class="line">WorkingDirectory=/opt/kibana-8.7.0/</span><br><span class="line">ExecStart=/opt/kibana-8.7.0/bin/kibana</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>文件：<code>/lib/systemd/system/logstash.service</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># http://www.jinbuguo.com/systemd/systemd.unit.html</span><br><span class="line">[Unit]</span><br><span class="line"># 单元的解释说明 http://www.jinbuguo.com/systemd/systemd.unit.html#Description=</span><br><span class="line">Description=Logstash Server</span><br><span class="line"># 启动顺序设置</span><br><span class="line">After=network.target</span><br><span class="line"># 配合 After 设置强依赖服务，依赖单元必须已经全部处于启动成功的状态时才能启动当前单元 http://www.jinbuguo.com/systemd/systemd.unit.html#Requisite=</span><br><span class="line">#Requisite=</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=elk</span><br><span class="line"># 重启服务配置， on-failure 表示仅在服务进程异常退出时重启 http://www.jinbuguo.com/systemd/systemd.service.html#Restart=</span><br><span class="line">Restart=on-failure</span><br><span class="line"># 在重启服务前暂停的时间 http://www.jinbuguo.com/systemd/systemd.service.html#RestartSec=</span><br><span class="line">RestartSec=30s</span><br><span class="line"># 设置日志与标准输入输出 http://www.jinbuguo.com/systemd/systemd.exec.html#StandardOutput=</span><br><span class="line">StandardOutput=inherit</span><br><span class="line"># 设置工作路径 http://www.jinbuguo.com/systemd/systemd.exec.html#WorkingDirectory=</span><br><span class="line">WorkingDirectory=/opt/logstash-8.7.0/</span><br><span class="line">ExecStart=/opt/logstash-8.7.0/bin/logstash -f springboot-logstash.conf</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>配置成功后执行 <code>systemctl daemon-reload</code> 刷新，然后就可以使用 <code>systemctl start elasticsearch</code> / <code>systemctl start kibana</code> / <code>systemctl start logstash</code> 来启动和管理服务了</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ElasticSearch-部署配置（8-7-0版本）&quot;&gt;&lt;a href=&quot;#ElasticSearch-部署配置（8-7-0版本）&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch 部署配置（8.7.0版本）&quot;&gt;&lt;/a&gt;ElasticSearch 部署配置（8.7.0版本）&lt;/h2&gt;&lt;p&gt;从 &lt;a href=&quot;https://www.elastic.co/cn/downloads/elasticsearch&quot;&gt;ElasticSearch官网&lt;/a&gt; 下载安装包&lt;/p&gt;
&lt;p&gt;它不允许在 root 下运行，如果当前是 root 用户，则需要创建一个单独的用户：&lt;/p&gt;</summary>
    
    
    
    
    <category term="ELK" scheme="https://houkunlin.gitee.io/tags/ELK/"/>
    
    <category term="logstash" scheme="https://houkunlin.gitee.io/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>提交软著文档时清理源代码注释的正则表达式</title>
    <link href="https://houkunlin.gitee.io/2023/02/09/%E6%8F%90%E4%BA%A4%E8%BD%AF%E8%91%97%E6%96%87%E6%A1%A3%E6%97%B6%E6%B8%85%E7%90%86%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://houkunlin.gitee.io/2023/02/09/%E6%8F%90%E4%BA%A4%E8%BD%AF%E8%91%97%E6%96%87%E6%A1%A3%E6%97%B6%E6%B8%85%E7%90%86%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2023-02-09T02:48:45.000Z</published>
    <updated>2023-02-09T02:48:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>适用于 Java </p><ul><li><code>.*//.*\n</code> 删除单行的注释内容</li><li><code>.*/\*.*\n(.*\*.*\n)&#123;0,&#125;</code> 删除多行的注释内容</li><li><code>\n+</code> 替换成 <code>\n</code> 删除空白行</li></ul><p>合并多个文件的代码内容：<code>type *.java &gt; code.txt</code> ，注意：<strong>必须使用 CMD 执行，请不要使用 Windows PowerShell 执行</strong>，在 Windows PowerShell 中会出现中文乱码，而在 CMD 中正常</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;适用于 Java &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.*//.*\n&lt;/code&gt; 删除单行的注释内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.*/\*.*\n(.*\*.*\n)&amp;#123;0,&amp;#125;&lt;/code&gt; 删除多行的注释内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n+&lt;/code&gt; 替换成 &lt;code&gt;\n&lt;/code&gt; 删除空白行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;合并多个文件的代码内容：&lt;code&gt;type *.java &amp;gt; code.txt&lt;/code&gt; ，注意：&lt;strong&gt;必须使用 CMD 执行，请不要使用 Windows PowerShell 执行&lt;/strong&gt;，在 Windows PowerShell 中会出现中文乱码，而在 CMD 中正常&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>关于柳州市市区摩托车限行区域相关信息</title>
    <link href="https://houkunlin.gitee.io/2023/02/09/liuzhou-moto-disable-run-area/"/>
    <id>https://houkunlin.gitee.io/2023/02/09/liuzhou-moto-disable-run-area/</id>
    <published>2023-02-09T02:35:57.000Z</published>
    <updated>2023-02-09T02:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>柳州市区号牌摩托车是准许在柳州市区道路通行的，可以<strong>在官塘大桥通行，但不能驶入莲花隧道</strong>。</p><p>为了保障群众的出行安全，减少交通事故的发生，及时消除交通安全隐患，根据柳州市道路的交通特点，目前在</p><ul><li>莲花隧道</li><li>三门江隧道</li><li>文昌下穿通道</li><li>广雅下穿通道</li><li>文林立交桥</li><li>五叉路口立交桥</li></ul><p>等下穿通道、隧道和立交桥梁设置了“<strong>禁止摩托车和非机动车驶入</strong>”的<strong>交通标志</strong>禁止摩托车和非机动车通行，请摩托车和非机动车驾驶员在进入禁行路段前提前观察是否设置相关的禁令标志，按照交通信号通行禁行。</p><p><img src="assets/chrome_hcHENXGjid.png" alt="几个隧道的位置"></p><p>根据2003年<strong>柳州市公安局</strong>、<strong>柳州市交通局</strong>、<strong>柳州市建设委员会</strong>、<strong>柳州市环保局</strong>、<strong>柳州市市容管理局</strong>、<strong>柳州市工商局</strong>六部门联合发布的《关于严格控制市区摩托车总量限制行驶线路进一步改善我市道路交通秩序的通告》，以下简称 <strong>《通告》</strong>，以及上述六部门联合发布的《关于严格控制市区摩托车总量和行驶进一步改善我市道路交通秩序的补充通告》，以下简称 <strong>《补充通告》</strong>。</p><p><strong>《通告》</strong> 中：自2003年12月1日起，<strong>所有非桂B号牌以及市辖六县桂B号牌的摩托车（不含军警号牌摩托车）</strong> 禁止进入市区</p><ul><li>东环路</li><li>燎原路</li><li>柳石路</li><li>柳邕东路</li><li>城站路</li><li>南站路</li><li>鹅山路</li><li>西环路</li><li>潭中西路</li><li>北雀路</li><li>胜利路</li><li>河东大桥城区环线区域内的道路（不含上述道路）</li></ul><p>的有关规定，目前，外地牌照摩托车在柳州市区上路行驶的，需遵守以上相关规定。</p><p><img src="assets/chrome_imNliEcWVb.png" alt="大致禁止范围"></p><p><strong>《补充通告》</strong> 中：2004年3月1日起，<strong>所有摩托车（不含军警号车牌摩托车）每日8时至20时</strong> 不得进入市中心区“三桥一路”，即</p><ul><li>柳江大桥</li><li>文惠桥</li><li>红光桥</li><li>龙城路</li></ul><p>的有关限行措施，即为柳州市限摩区域，驾驶三江县登记上牌的摩托车在柳州市市区道路行驶，请按照上述规定通行。</p><p><img src="assets/chrome_5f5L18ZWqn.png" alt="“三桥一路”的位置"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>军警号车牌摩托车不受限</strong></p><p>所有摩托车禁行（<strong>交通禁令标志</strong>）</p><ul><li>莲花隧道</li><li>三门江隧道</li><li>文昌下穿通道</li><li>广雅下穿通道</li><li>文林立交桥</li><li>五叉路口立交桥</li></ul><p>所有非桂B号牌以及市辖六县桂B号牌禁行（<strong>《通告》</strong>）</p><ul><li>东环路</li><li>燎原路</li><li>柳石路</li><li>柳邕东路</li><li>城站路</li><li>南站路</li><li>鹅山路</li><li>西环路</li><li>潭中西路</li><li>北雀路</li><li>胜利路</li><li>河东大桥城区环线区域内的道路（不含上述道路）</li></ul><p>所有摩托车每日8时至20时限行不得驶入（<strong>《补充通告》</strong>）</p><ul><li>柳江大桥</li><li>文惠桥</li><li>红光桥</li><li>龙城路</li></ul><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><a href="https://lcsmy.yun.liuzhou.gov.cn/mailbox-phone/letterdetails?id=65164">柳州市牌照的摩托车能过莲花隧道吗？</a></li><li><a href="https://lcsmy.yun.liuzhou.gov.cn/mailbox-phone/letterdetails?id=68678">摩托车禁行区域</a></li><li><a href="https://lcsmy.yun.liuzhou.gov.cn/mailbox-phone/letterdetails?id=35209">三江县牌照摩托车能开进柳州市区么？？</a></li><li><a href="https://lcsmy.yun.liuzhou.gov.cn/mailbox-phone/letterdetails?id=20931">想咨询一下关于摩托车上牌，准入证，禁摩区域</a> </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;柳州市区号牌摩托车是准许在柳州市区道路通行的，可以&lt;strong&gt;在官塘大桥通行，但不能驶入莲花隧道&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了保障群众的出行安全，减少交通事故的发生，及时消除交通安全隐患，根据柳州市道路的交通特点，目前在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;莲花隧道&lt;/li&gt;
&lt;li&gt;三门江隧道&lt;/li&gt;
&lt;li&gt;文昌下穿通道&lt;/li&gt;
&lt;li&gt;广雅下穿通道&lt;/li&gt;
&lt;li&gt;文林立交桥&lt;/li&gt;
&lt;li&gt;五叉路口立交桥&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Matrix Synapse 服务安装(Docker)</title>
    <link href="https://houkunlin.gitee.io/2023/02/09/matrix-synapse-install-for-docker/"/>
    <id>https://houkunlin.gitee.io/2023/02/09/matrix-synapse-install-for-docker/</id>
    <published>2023-02-09T02:29:35.000Z</published>
    <updated>2023-02-09T02:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建一个工作目录"><a href="#1-创建一个工作目录" class="headerlink" title="1. 创建一个工作目录"></a>1. 创建一个工作目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/matrix-synapse-data/</span><br></pre></td></tr></table></figure><h2 id="2-生成-Synapse-配置文件"><a href="#2-生成-Synapse-配置文件" class="headerlink" title="2. 生成 Synapse 配置文件"></a>2. 生成 Synapse 配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -v /var/matrix-synapse-data/:/data/ -e SYNAPSE_SERVER_NAME=houkunlin.cn -e SYNAPSE_REPORT_STATS=no matrixdotorg/synapse:latest generate</span><br></pre></td></tr></table></figure><ul><li><code>-v /var/matrix-synapse-data/:/data/</code> 映射的具体路径，按需修改</li><li><code>-e SYNAPSE_SERVER_NAME=houkunlin.cn</code> 域名，建议使用一级域名。如果要用二级域名对外提供服务，这里也填写一级域名，然后参照后面的双域名配置方式。</li><li><code>-e SYNAPSE_REPORT_STATS=no</code> 是否发送匿名统计数据</li></ul><h2 id="3-安装运行"><a href="#3-安装运行" class="headerlink" title="3. 安装运行"></a>3. 安装运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name synapse -v /var/matrix-synapse-data/:/data/ -p 8008:8008 -p 8009:8009 -p 8448:8448 matrixdotorg/synapse:latest</span><br></pre></td></tr></table></figure><p>默认情况下，其他服务器将尝试通过端口 8448 访问我们的服务器，参见文档：<a href="https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#serve_server_wellknown">https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#serve_server_wellknown</a> 如果使用了反向代理，则可以忽略 8448 端口的绑定</p><h2 id="4-创建用户"><a href="#4-创建用户" class="headerlink" title="4. 创建用户"></a>4. 创建用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it synapse register_new_matrix_user http://localhost:8008 -c /data/homeserver.yaml -a -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><h2 id="5-安装管理面板"><a href="#5-安装管理面板" class="headerlink" title="5. 安装管理面板"></a>5. 安装管理面板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 12234:80 awesometechnologies/synapse-admin</span><br></pre></td></tr></table></figure><h2 id="6-配置-synapse"><a href="#6-配置-synapse" class="headerlink" title="6. 配置 synapse"></a>6. 配置 synapse</h2><p>编辑 <code>/var/matrix-synapse-data/homeserver.yaml</code> </p><p><strong>配置可注册</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为新用户启用注册。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#enable_registration</span></span><br><span class="line"><span class="attr">enable_registration:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 无需电子邮件或验证码验证即可启用注册。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#enable_registration_without_verification</span></span><br><span class="line"><span class="attr">enable_registration_without_verification:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>配置其他服务器与我们的服务器通信</strong>（更多详情可参考 <a href="https://matrix-org.github.io/synapse/latest/delegate.html">Delegation of incoming federation traffic</a> ）：</p><p><img src="assets/image-20230213165215389.png" alt="image-20230213165215389"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端用于访问此 Homeserver 的面向公众的基本 URL，这与用户可能在其客户端的“自定义主服务器 URL”字段中输入的 URL 相同。如果您将 Synapse 与反向代理一起使用，这应该是通过代理访问 Synapse 的 URL。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#public_baseurl</span></span><br><span class="line"><span class="attr">public_baseurl:</span> <span class="string">https://houkunlin.cn</span></span><br><span class="line"><span class="comment"># 默认情况下，其他服务器将尝试通过端口 8448 访问我们的服务器，告诉其他服务器将流量发送到端口 443</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#serve_server_wellknown</span></span><br><span class="line"><span class="attr">serve_server_wellknown:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否应阻止对该服务器上用户的房间邀请（本地服务器管理员发送的除外）</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#block_non_admin_invites</span></span><br><span class="line"><span class="attr">block_non_admin_invites:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>serve_server_wellknown: true</code> 配置实际主要是为了访问 <code>https://houkunlin.cn/.well-known/matrix/server</code> 路径内容返回 <code>&#123;&quot;m.server&quot;:&quot;houkunlin.cn:443&quot;&#125;</code> 格式的内容，告诉其他服务器我的通信地址和端口，<strong>请注意，这个端口是需要使用 HTPPS 协议通信的，也就是说如果填写了 HTTP 端口，则会出现与其他服务的通信问题</strong>。</p><p><code>public_baseurl: https://houkunlin.cn</code> 配置是为了告诉客户端我们 <code>synapse</code> 服务的真实通信地址，客户端会访问 <code>https://houkunlin.cn/.well-known/matrix/client</code> 拿到 <code>&#123;&quot;m.homeserver&quot;:&#123;&quot;base_url&quot;:&quot;https://houkunlin.cn/&quot;&#125;&#125;</code> 服务器地址信息。</p><p>当只使用一级域名对外提供服务的时候，如上配置即可。如果要使用二级域名对外提供服务，请查阅后面的双域名配置方式。</p><p><strong>配置访客匿名查看公开房间</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许用户在没有密码/电子邮件/等的情况下注册为访客，并参与此服务器上托管的房间，匿名用户可以访问这些房间。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#allow_guest_access</span></span><br><span class="line"><span class="attr">allow_guest_access:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>更多的配置请查阅 <a href="https://matrix-org.github.io/synapse/latest/welcome_and_overview.html">官方文档</a></p><h2 id="7-反向代理（HTTP-HTTPS）"><a href="#7-反向代理（HTTP-HTTPS）" class="headerlink" title="7. 反向代理（HTTP+HTTPS）"></a>7. 反向代理（HTTP+HTTPS）</h2><p><img src="assets/image-20230213164545056.png" alt="单域名登录过程"></p><p>如果无法访问 <code>https://houkunlin.cn/.well-known/matrix/client</code> 地址，将直接向 <code>https://houkunlin.cn</code> 服务发起后续登录请求。</p><p>Element App 和 <a href="https://app.element.io/">Element Web</a> 版需要启用 HTTPS 功能，下面是 HTTP+HTTPS 合并配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">        <span class="attribute">default</span> upgrade;</span><br><span class="line">        &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> houkunlin.cn;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#按照这个协议配置</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="comment">#按照这个套件配置</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;</span><br><span class="line">    <span class="comment">#指定当使用 SSLv3 和 TLS 协议时，服务器密码应优先于客户端密码。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#启用或禁用服务器对 OCSP 响应的验证。</span></span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#HSTS策略, 一年：31536000 ，180天：15552000，30天：2592000</span></span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=15552000; includeSubDomains; preload&quot;</span> always;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#防XSS攻击</span></span><br><span class="line">    <span class="attribute">add_header</span> X-Xss-Protection <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> https/houkunlin.cn/domain.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> https/houkunlin.cn/domain.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ignore_invalid_headers</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">600s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">403</span> <span class="number">404</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.htm index.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问 Element.io 的 WEB 客户端</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">alias</span> /var/www/matrix/;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把 /.well-known/ 和 /_matrix/ 路径下的请求都转发给后端服务器</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/(_matrix|.well-known)/</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>                          http://127.0.0.1:8008;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host               <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade            <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection         <span class="variable">$connection_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Proxy-Host       <span class="variable">$proxy_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host   <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP          <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_ssl_protocols</span>                 TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面提供一个 HTTP 的配置（删掉了HTTPS配置），在使用 <a href="http://cloudflare.com/">cloudflare.com</a> 来保护我们的网站的时候可以免掉 HTTPS 的配置，<strong>未经验证的判断：在与其他服务通信时（这里指的是默认的8448端口的功能）依旧需要在我们的服务器上设置 HTTPS 配置</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">        <span class="attribute">default</span> upgrade;</span><br><span class="line">        &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> houkunlin.cn;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ignore_invalid_headers</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">600s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">403</span> <span class="number">404</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.htm index.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问 Element.io 的 WEB 客户端</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">alias</span> /var/www/matrix/;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把 /.well-known/ 和 /_matrix/ 路径下的请求都转发给后端服务器</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/(_matrix|.well-known)/</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>                          http://127.0.0.1:8008;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host               <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade            <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection         <span class="variable">$connection_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Proxy-Host       <span class="variable">$proxy_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host   <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP          <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_ssl_protocols</span>                 TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-域名自定义配置（双域名）"><a href="#8-域名自定义配置（双域名）" class="headerlink" title="8. 域名自定义配置（双域名）"></a>8. 域名自定义配置（双域名）</h2><p>原文： <a href="https://matrix-org.github.io/synapse/latest/delegate.html">Delegation of incoming federation traffic</a> </p><p>例如我有一个域名 <code>houkunlin.cn</code> ，但是我的 <code>houkunlin.cn</code> 需要用来做其他的网页服务，并不提供 <code>matrix-synapse</code> 服务，但是又想要让 <code>matrix-synapse</code> 的用户地址看起来像 <code>@houkunlin:houkunlin.cn</code> 这样的形式，那么需要对nginx做一些特殊的配置。</p><p><img src="assets/image-20230213164115473.png" alt="双域名登录过程"></p><p>如果无法访问 <code>https://houkunlin.cn/.well-known/matrix/client</code> 地址，将直接向 <code>https://houkunlin.cn</code> 服务发起后续登录请求。</p><h4 id="预期场景"><a href="#预期场景" class="headerlink" title="预期场景"></a>预期场景</h4><p>主域名：<code>houkunlin.cn</code> 提供普通的网页服务</p><p>synapse服务域名：<code>matrix.houkunlin.cn</code> 提供 <code>matrix-synapse</code> 服务</p><p>用户地址样式：<code>@houkunlin:houkunlin.cn</code> </p><h4 id="操作内容"><a href="#操作内容" class="headerlink" title="操作内容"></a>操作内容</h4><h5 id="1-生成配置文件时指定主域名（houkunlin-cn）"><a href="#1-生成配置文件时指定主域名（houkunlin-cn）" class="headerlink" title="1. 生成配置文件时指定主域名（houkunlin.cn）"></a>1. 生成配置文件时指定主域名（houkunlin.cn）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -v /var/matrix-synapse-data/:/data/ -e SYNAPSE_SERVER_NAME=houkunlin.cn -e SYNAPSE_REPORT_STATS=no matrixdotorg/synapse:latest generate</span><br></pre></td></tr></table></figure><h5 id="2-配置nginx：主域名（houkunlin-cn）"><a href="#2-配置nginx：主域名（houkunlin-cn）" class="headerlink" title="2. 配置nginx：主域名（houkunlin.cn）"></a>2. 配置nginx：主域名（houkunlin.cn）</h5><ul><li>拦截 <code>/.well-known/matrix/server</code> 路径请求：与其他服务器通信时必须的参数，告诉其他服务器我们的地址和端口</li><li>拦截 <code>/.well-known/matrix/client</code> 路径请求：告诉客户端我们 <code>matrix-synapse</code> 服务的实际访问地址</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="comment"># 主域名（houkunlin.cn）</span></span><br><span class="line">    <span class="attribute">server_name</span> houkunlin.cn;</span><br><span class="line">    <span class="comment"># ....其他的正常配置信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置 /.well-known/matrix/server 内容</span></span><br><span class="line">    <span class="attribute">location</span> /.well-known/matrix/server &#123;</span><br><span class="line">        <span class="attribute">default_type</span> application/json;</span><br><span class="line">        <span class="comment"># 请注意，下面返回的端口是需要使用HTTPS协议进行通信的，如果返回了HTTP协议端口，在与其他服务器通信时会出现通信问题</span></span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;m.server&quot;:&quot;matrix.houkunlin.cn:443&quot;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 配置 /.well-known/matrix/client 内容</span></span><br><span class="line">    <span class="attribute">location</span> /.well-known/matrix/client &#123;</span><br><span class="line">        <span class="attribute">default_type</span> application/json;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Methods *;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Max-Age <span class="number">3600</span>;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;m.homeserver&quot;:&#123;&quot;base_url&quot;:&quot;https://matrix.houkunlin.cn/&quot;&#125;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/.well-known/matrix/server</code> 返回的JSON中的服务地址必须指向 <code>matrix.houkunlin.cn:443</code> ，<strong>请注意，这个端口是需要使用HTTPS协议进行通信的，如果返回了HTTP协议端口，在与其他服务器通信时会出现通信问题</strong></p><p><code>/.well-known/matrix/client</code> 返回的JSON中的服务地址必须指向 <code>https://matrix.houkunlin.cn/</code> </p><h5 id="3-配置nginx：synapse服务域名（matrix-houkunlin-cn）"><a href="#3-配置nginx：synapse服务域名（matrix-houkunlin-cn）" class="headerlink" title="3. 配置nginx：synapse服务域名（matrix.houkunlin.cn）"></a>3. 配置nginx：synapse服务域名（matrix.houkunlin.cn）</h5><p>与前面的 【7. 反向代理（HTTP+HTTPS）】 基本保持一致，但需要设置 <code>server_name</code> 。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># ....其他的正常配置信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置域名</span></span><br><span class="line">    <span class="attribute">server_name</span> matrix.houkunlin.cn;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ....其他的正常配置信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里已经不用关心 <code>http://matrix.houkunlin.cn/.well-known/matrix/server</code> 和 <code>http://matrix.houkunlin.cn/.well-known/matrix/client</code> 这两个地址的内容了，因为我们对外的域名是 <code>https://houkunlin.cn</code> ，只会访问 <code>https://houkunlin.cn/.well-known/</code> 下的内容。</p><p>【<strong>未经验证的判断</strong>】：&gt; 也就是不需要配置 <code>/var/matrix-synapse-data/homeserver.yaml</code> 的 <code>public_baseurl</code> 和 <code>serve_server_wellknown</code> 内容。</p><h5 id="4-修改-synapse-配置（未经验证下方的配置是否是必须的）"><a href="#4-修改-synapse-配置（未经验证下方的配置是否是必须的）" class="headerlink" title="4. 修改 synapse 配置（未经验证下方的配置是否是必须的）"></a>4. 修改 <code>synapse</code> 配置（未经验证下方的配置是否是必须的）</h5><p>编辑 <code>/var/matrix-synapse-data/homeserver.yaml</code> 指定 <code>public_baseurl</code> 服务地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端用于访问此 Homeserver 的面向公众的基本 URL，这与用户可能在其客户端的“自定义主服务器 URL”字段中输入的 URL 相同。如果您将 Synapse 与反向代理一起使用，这应该是通过代理访问 Synapse 的 URL。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#public_baseurl</span></span><br><span class="line"><span class="attr">public_baseurl:</span> <span class="string">https://matrix.houkunlin.cn</span></span><br></pre></td></tr></table></figure><p>OK，重启nginx和synapse就大功告成了！</p><h2 id="9-完整的所有配置文件内容（双域名）"><a href="#9-完整的所有配置文件内容（双域名）" class="headerlink" title="9. 完整的所有配置文件内容（双域名）"></a>9. 完整的所有配置文件内容（双域名）</h2><p>域名：<code>houkunlin.cn</code> 和 <code>matrix.houkunlin.cn</code> </p><p>路径：<code>/var/matrix-synapse-data/</code> 和 <code>/var/www/element/</code> (WEB客户端) 和 <code>/var/www/</code> (主域名的普通网站服务)</p><h3 id="synapse-配置文件"><a href="#synapse-配置文件" class="headerlink" title="synapse 配置文件"></a>synapse 配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server_name:</span> <span class="string">&quot;houkunlin.cn&quot;</span></span><br><span class="line"><span class="attr">pid_file:</span> <span class="string">/data/homeserver.pid</span></span><br><span class="line"><span class="attr">listeners:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8008</span></span><br><span class="line">    <span class="attr">tls:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">x_forwarded:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">names:</span> [<span class="string">client</span>, <span class="string">federation</span>]</span><br><span class="line">        <span class="attr">compress:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">database:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sqlite3</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">/data/homeserver.db</span></span><br><span class="line"><span class="attr">log_config:</span> <span class="string">&quot;/data/houkunlin.cn.log.config&quot;</span></span><br><span class="line"><span class="attr">media_store_path:</span> <span class="string">/data/media_store</span></span><br><span class="line"><span class="attr">registration_shared_secret:</span> <span class="string">&quot;CjPr.K@nIHqU~BFANA2aEJkD.1@b^F4a,Lwa5XIb1q.XJrNktA&quot;</span></span><br><span class="line"><span class="attr">report_stats:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">macaroon_secret_key:</span> <span class="string">&quot;&amp;gPD.pSbE2ehA~Ig6H~@uN4sKnfkUcSXE.*v8oixsCaQ=IVZ5@&quot;</span></span><br><span class="line"><span class="attr">form_secret:</span> <span class="string">&quot;_gJTX,.:jA_gl^B+Or9&amp;q@ybM&amp;l6Umzm@gxZr8K7IAd5pKY5lQ&quot;</span></span><br><span class="line"><span class="attr">signing_key_path:</span> <span class="string">&quot;/data/houkunlin.cn.signing.key&quot;</span></span><br><span class="line"><span class="attr">trusted_key_servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">server_name:</span> <span class="string">&quot;matrix.org&quot;</span></span><br><span class="line"><span class="comment"># 为新用户启用注册。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#enable_registration</span></span><br><span class="line"><span class="attr">enable_registration:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 无需电子邮件或验证码验证即可启用注册。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#enable_registration_without_verification</span></span><br><span class="line"><span class="attr">enable_registration_without_verification:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 客户端用于访问此 Homeserver 的面向公众的基本 URL，这与用户可能在其客户端的“自定义主服务器 URL”字段中输入的 URL 相同。如果您将 Synapse 与反向代理一起使用，这应该是通过代理访问 Synapse 的 URL。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#public_baseurl</span></span><br><span class="line"><span class="comment">####public_baseurl: https://matrix.houkunlin.cn</span></span><br><span class="line"><span class="comment"># 默认情况下，其他服务器将尝试通过端口 8448 访问我们的服务器，告诉其他服务器将流量发送到端口 443</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#serve_server_wellknown</span></span><br><span class="line"><span class="comment">####serve_server_wellknown: true</span></span><br><span class="line"><span class="comment"># 是否应阻止对该服务器上用户的房间邀请（本地服务器管理员发送的除外）</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#block_non_admin_invites</span></span><br><span class="line"><span class="attr">block_non_admin_invites:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许用户在没有密码/电子邮件/等的情况下注册为访客，并参与此服务器上托管的房间，匿名用户可以访问这些房间。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#allow_guest_access</span></span><br><span class="line"><span class="attr">allow_guest_access:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="nginx-houkunlin-cn-配置文件"><a href="#nginx-houkunlin-cn-配置文件" class="headerlink" title="nginx: houkunlin.cn 配置文件"></a>nginx: houkunlin.cn 配置文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">        <span class="attribute">default</span> upgrade;</span><br><span class="line">        &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2 default_server;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2 default_server;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> houkunlin.cn;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#按照这个协议配置</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="comment">#按照这个套件配置</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;</span><br><span class="line">    <span class="comment">#指定当使用 SSLv3 和 TLS 协议时，服务器密码应优先于客户端密码。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#启用或禁用服务器对 OCSP 响应的验证。</span></span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#HSTS策略, 一年：31536000 ，180天：15552000，30天：2592000</span></span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=15552000; includeSubDomains; preload&quot;</span> always;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#防XSS攻击</span></span><br><span class="line">    <span class="attribute">add_header</span> X-Xss-Protection <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> https/houkunlin.cn/domain.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> https/houkunlin.cn/domain.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ignore_invalid_headers</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">600s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">403</span> <span class="number">404</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.htm index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 配置 /.well-known/matrix/server 内容</span></span><br><span class="line">    <span class="attribute">location</span> /.well-known/matrix/server &#123;</span><br><span class="line">        <span class="attribute">default_type</span> application/json;</span><br><span class="line">        <span class="comment"># 请注意，下面返回的端口是需要使用HTTPS协议进行通信的，如果返回了HTTP协议端口，在与其他服务器通信时会出现通信问题</span></span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;m.server&quot;:&quot;matrix.houkunlin.cn:443&quot;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 配置 /.well-known/matrix/client 内容</span></span><br><span class="line">    <span class="attribute">location</span> /.well-known/matrix/client &#123;</span><br><span class="line">        <span class="attribute">default_type</span> application/json;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Methods *;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Max-Age <span class="number">3600</span>;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;m.homeserver&quot;:&#123;&quot;base_url&quot;:&quot;https://matrix.houkunlin.cn/&quot;&#125;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nginx-matrix-houkunlin-cn-配置文件"><a href="#nginx-matrix-houkunlin-cn-配置文件" class="headerlink" title="nginx: matrix.houkunlin.cn 配置文件"></a>nginx: matrix.houkunlin.cn 配置文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">        <span class="attribute">default</span> upgrade;</span><br><span class="line">        &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> matrix.houkunlin.cn;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#按照这个协议配置</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="comment">#按照这个套件配置</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;</span><br><span class="line">    <span class="comment">#指定当使用 SSLv3 和 TLS 协议时，服务器密码应优先于客户端密码。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#启用或禁用服务器对 OCSP 响应的验证。</span></span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#HSTS策略, 一年：31536000 ，180天：15552000，30天：2592000</span></span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=15552000; includeSubDomains; preload&quot;</span> always;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#防XSS攻击</span></span><br><span class="line">    <span class="attribute">add_header</span> X-Xss-Protection <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> https/houkunlin.cn/domain.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> https/houkunlin.cn/domain.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ignore_invalid_headers</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">600s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">403</span> <span class="number">404</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.htm index.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问 Element.io 的 WEB 客户端</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">alias</span> /var/www/element/;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 把 /.well-known/ 和 /_matrix/ 路径下的请求都转发给后端服务器</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/(_matrix|.well-known)/</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>                          http://127.0.0.1:8008;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host               <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade            <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection         <span class="variable">$connection_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Proxy-Host       <span class="variable">$proxy_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host   <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP          <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_ssl_protocols</span>                 TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-完整的所有配置文件内容（单域名）"><a href="#10-完整的所有配置文件内容（单域名）" class="headerlink" title="10. 完整的所有配置文件内容（单域名）"></a>10. 完整的所有配置文件内容（单域名）</h2><p>域名：<code>houkunlin.cn</code> </p><p>路径：<code>/var/matrix-synapse-data/</code> 和 <code>/var/www/element/</code> (WEB客户端) </p><h3 id="synapse-配置文件-1"><a href="#synapse-配置文件-1" class="headerlink" title="synapse 配置文件"></a>synapse 配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server_name:</span> <span class="string">&quot;houkunlin.cn&quot;</span></span><br><span class="line"><span class="attr">pid_file:</span> <span class="string">/data/homeserver.pid</span></span><br><span class="line"><span class="attr">listeners:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8008</span></span><br><span class="line">    <span class="attr">tls:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">x_forwarded:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">names:</span> [<span class="string">client</span>, <span class="string">federation</span>]</span><br><span class="line">        <span class="attr">compress:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">database:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sqlite3</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">/data/homeserver.db</span></span><br><span class="line"><span class="attr">log_config:</span> <span class="string">&quot;/data/houkunlin.cn.log.config&quot;</span></span><br><span class="line"><span class="attr">media_store_path:</span> <span class="string">/data/media_store</span></span><br><span class="line"><span class="attr">registration_shared_secret:</span> <span class="string">&quot;CjPr.K@nIHqU~BFANA2aEJkD.1@b^F4a,Lwa5XIb1q.XJrNktA&quot;</span></span><br><span class="line"><span class="attr">report_stats:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">macaroon_secret_key:</span> <span class="string">&quot;&amp;gPD.pSbE2ehA~Ig6H~@uN4sKnfkUcSXE.*v8oixsCaQ=IVZ5@&quot;</span></span><br><span class="line"><span class="attr">form_secret:</span> <span class="string">&quot;_gJTX,.:jA_gl^B+Or9&amp;q@ybM&amp;l6Umzm@gxZr8K7IAd5pKY5lQ&quot;</span></span><br><span class="line"><span class="attr">signing_key_path:</span> <span class="string">&quot;/data/houkunlin.cn.signing.key&quot;</span></span><br><span class="line"><span class="attr">trusted_key_servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">server_name:</span> <span class="string">&quot;matrix.org&quot;</span></span><br><span class="line"><span class="comment"># 为新用户启用注册。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#enable_registration</span></span><br><span class="line"><span class="attr">enable_registration:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 无需电子邮件或验证码验证即可启用注册。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#enable_registration_without_verification</span></span><br><span class="line"><span class="attr">enable_registration_without_verification:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 客户端用于访问此 Homeserver 的面向公众的基本 URL，这与用户可能在其客户端的“自定义主服务器 URL”字段中输入的 URL 相同。如果您将 Synapse 与反向代理一起使用，这应该是通过代理访问 Synapse 的 URL。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#public_baseurl</span></span><br><span class="line"><span class="attr">public_baseurl:</span> <span class="string">https://houkunlin.cn</span></span><br><span class="line"><span class="comment"># 默认情况下，其他服务器将尝试通过端口 8448 访问我们的服务器，告诉其他服务器将流量发送到端口 443</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#serve_server_wellknown</span></span><br><span class="line"><span class="attr">serve_server_wellknown:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否应阻止对该服务器上用户的房间邀请（本地服务器管理员发送的除外）</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#block_non_admin_invites</span></span><br><span class="line"><span class="attr">block_non_admin_invites:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许用户在没有密码/电子邮件/等的情况下注册为访客，并参与此服务器上托管的房间，匿名用户可以访问这些房间。</span></span><br><span class="line"><span class="comment"># https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#allow_guest_access</span></span><br><span class="line"><span class="attr">allow_guest_access:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="nginx-houkunlin-cn-配置文件-1"><a href="#nginx-houkunlin-cn-配置文件-1" class="headerlink" title="nginx: houkunlin.cn 配置文件"></a>nginx: houkunlin.cn 配置文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">        <span class="attribute">default</span> upgrade;</span><br><span class="line">        &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> houkunlin.cn;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#按照这个协议配置</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="comment">#按照这个套件配置</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;</span><br><span class="line">    <span class="comment">#指定当使用 SSLv3 和 TLS 协议时，服务器密码应优先于客户端密码。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#启用或禁用服务器对 OCSP 响应的验证。</span></span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#HSTS策略, 一年：31536000 ，180天：15552000，30天：2592000</span></span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=15552000; includeSubDomains; preload&quot;</span> always;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#防XSS攻击</span></span><br><span class="line">    <span class="attribute">add_header</span> X-Xss-Protection <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> https/houkunlin.cn/domain.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> https/houkunlin.cn/domain.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ignore_invalid_headers</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">600s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">403</span> <span class="number">404</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.htm index.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问 Element.io 的 WEB 客户端</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">alias</span> /var/www/element/;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 把 /.well-known/ 和 /_matrix/ 路径下的请求都转发给后端服务器</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/(_matrix|.well-known)/</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>                          http://127.0.0.1:8008;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host               <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade            <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection         <span class="variable">$connection_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Proxy-Host       <span class="variable">$proxy_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host   <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP          <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_ssl_protocols</span>                 TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-创建一个工作目录&quot;&gt;&lt;a href=&quot;#1-创建一个工作目录&quot; class=&quot;headerlink&quot; title=&quot;1. 创建一个工作目录&quot;&gt;&lt;/a&gt;1. 创建一个工作目录&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p /var/matrix-synapse-data/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;2-生成-Synapse-配置文件&quot;&gt;&lt;a href=&quot;#2-生成-Synapse-配置文件&quot; class=&quot;headerlink&quot; title=&quot;2. 生成 Synapse 配置文件&quot;&gt;&lt;/a&gt;2. 生成 Synapse 配置文件&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>把有公网IP的NAS安全的暴露在公网环境</title>
    <link href="https://houkunlin.gitee.io/2023/01/19/nas-ip/"/>
    <id>https://houkunlin.gitee.io/2023/01/19/nas-ip/</id>
    <published>2023-01-19T01:53:27.000Z</published>
    <updated>2023-01-19T01:53:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>前期准备条件：</p><ul><li>有一个域名（对外提供访问服务）</li><li>有一个公网IP，固定公网IP或者动态公网IP都行</li><li>拨号路由器支持端口映射</li><li>路由器或者NAS能够设置免费的DDNS动态域名解析</li><li>利用Cloudflare隐藏NAS</li></ul><h2 id="前期分析说明"><a href="#前期分析说明" class="headerlink" title="前期分析说明"></a>前期分析说明</h2><h3 id="把NAS直接暴露到公网的危险性"><a href="#把NAS直接暴露到公网的危险性" class="headerlink" title="把NAS直接暴露到公网的危险性"></a>把NAS直接暴露到公网的危险性</h3><p>没有任何防护的设备暴露到公网是非常危险的，将会面临来自互联网的威胁，其中包括DDOS攻击、黑客入侵、暴力破解等不限于以上手段的任何威胁。</p><p>但是有时候我们的NAS往往又需要在公网提供服务，此时我们又该如何给NAS增加一层安全防护呢？</p><h3 id="防火墙安全防护"><a href="#防火墙安全防护" class="headerlink" title="防火墙安全防护"></a>防火墙安全防护</h3><p>虽然NAS有防火墙功能，但是我认为NAS的防火墙不够强大到足以面对来自互联网的恶意请求，特别是类似DDOS类的攻击。</p><p>现在所有的公有云都有专门的安全防火墙系统来保护后端服务器，但我们明显没有这种能力来为NAS部署专门的防火墙系统，这不仅费用非常昂贵，还增加了维护难度和维护成本。</p><p>那么如何在低成本情况下保护NAS在互联网的安全呢？</p><h3 id="内网穿透（NAS不需要公网IP）"><a href="#内网穿透（NAS不需要公网IP）" class="headerlink" title="内网穿透（NAS不需要公网IP）"></a>内网穿透（NAS不需要公网IP）</h3><p>现在互联网公有云都有专门的防火墙来给服务器提供一定程度上的安全防护，我们可以租用一台公网服务器来做中转服务，所有的流量仅通过公网服务器，再由公网服务器转发到我们的NAS。</p><p>此方案的可以有效利用云平台提供的防火墙功能来对服务进行一定的防护，但是我们还是需要维护中转服务器的部分安全问题，以及要支付租用云服务器的费用和带宽费用，实际上也存在一定量的成本。</p><p>那么有没有成本更低的方案呢？</p><p><img src="assets/image-20230119114835756.png" alt="image-20230119114835756"></p><h3 id="借助群晖-QuickConnect-提供的服务"><a href="#借助群晖-QuickConnect-提供的服务" class="headerlink" title="借助群晖 QuickConnect 提供的服务"></a>借助群晖 QuickConnect 提供的服务</h3><p>群晖自带了一个免费的 QuickConnect 服务，但是此服务只能访问我们的 NAS 管理端口（默认5000/5001），无法访问我们的 WebStation 服务端口。</p><p>这种方案可以说毫无成本，但是功能有限，无法转发到其他的端口。</p><p><img src="assets/image-20230119114757149.png" alt="image-20230119114757149"></p><h3 id="隐藏在-Cloudflare-背后（NAS需要公网IP）"><a href="#隐藏在-Cloudflare-背后（NAS需要公网IP）" class="headerlink" title="隐藏在 Cloudflare 背后（NAS需要公网IP）"></a>隐藏在 Cloudflare 背后（NAS需要公网IP）</h3><p>我们可以利用 Cloudflare 平台来保护我们的NAS服务。</p><p>使用 Cloudflare 来负责我们对外域名的解析服务，然后设置CNAME记录解析到DDNS域名上，这样当我们访问对外域名时，Cloudflare 服务会把请求转发到我们的DDNS域名上，从而把请求转发到NAS上。</p><p><img src="assets/image-20230119114715413.png" alt="image-20230119114715413"></p><p>虽然说我们的NAS是暴露在了公网，但是用户并不是直接访问NAS，而是访问了Cloudflare服务器，由Cloudflare提供中转，此时NAS对用户是不可见的，在茫茫的互联网中，很难找到隐藏在Cloudflare背后的具体服务器，因此这种方式相对来说是比较安全的。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="设备清单"><a href="#设备清单" class="headerlink" title="设备清单"></a>设备清单</h3><p><strong>路由器</strong>：TL-R489GP-AC</p><p><strong>动态DNS域名</strong>：houkunlin.tpddns.cn</p><p><strong>对外域名</strong>：doomsday.city</p><p><strong>NAS</strong>：群晖D920+</p><p><strong>公网IP</strong>：使用公网IP请咨询自己宽带运营商</p><p><strong>NAS 局域网IP</strong>：192.168.0.5</p><p><strong>NAS WebStation HTTP 内网端口</strong>：80</p><p><strong>NAS WebStation HTTPs 内网端口</strong>：443</p><p><strong>NAS WebStation HTTP 公网端口</strong>：2095</p><p><strong>NAS WebStation HTTPs 公网端口</strong>：2096</p><p>网络结构图：</p><p><img src="assets/image-20230119114134622.png" alt="image-20230119114134622"></p><h3 id="DDNS动态域名解析配置"><a href="#DDNS动态域名解析配置" class="headerlink" title="DDNS动态域名解析配置"></a>DDNS动态域名解析配置</h3><p>以下二选一即可</p><h4 id="路由器配置DDNS"><a href="#路由器配置DDNS" class="headerlink" title="路由器配置DDNS"></a>路由器配置DDNS</h4><p>在路由器的【高级功能】》【动态DNS】功能下管理动态DNS信息，以下是我的配置截图：</p><p><img src="assets/image-20230119105133522.png" alt="image-20230119105133522"></p><h4 id="群晖NAS设置DDNS"><a href="#群晖NAS设置DDNS" class="headerlink" title="群晖NAS设置DDNS"></a>群晖NAS设置DDNS</h4><p>在NAS的【控制面板】》【外部访问】》【DDNS】功能下管理动态DNS信息，NAS提供的DDNS功能更丰富，可以有更多的选择性。</p><p><img src="assets/image-20230119105326140.png" alt="image-20230119105326140"></p><h3 id="配置端口映射"><a href="#配置端口映射" class="headerlink" title="配置端口映射"></a>配置端口映射</h3><p>端口映射功能主要把公网的端口与NAS的端口关联起来，访问这个IP的公网端口时就相当于访问NAS的某个端口。</p><p>如果我们的公网IP没有80/443端口的权限，则需要映射2095和2096端口到内网的NAS上，可参考 <a href="https://developers.cloudflare.com/fundamentals/get-started/reference/network-ports/">Cloudflare网络端口</a></p><p>映射关系表如下：</p><table><thead><tr><th>公网端口</th><th>局域网端口</th><th>局域网IP</th></tr></thead><tbody><tr><td>2095</td><td>80</td><td>192.168.0.5</td></tr><tr><td>2096</td><td>443</td><td>192.168.0.5</td></tr><tr><td>80</td><td>80</td><td>192.168.0.5</td></tr><tr><td>443</td><td>443</td><td>192.168.0.5</td></tr></tbody></table><p>可能由于我们的公网IP限制，公网的80/443可能会无法访问</p><h4 id="路由器设置"><a href="#路由器设置" class="headerlink" title="路由器设置"></a>路由器设置</h4><p>仅在使用路由器拨号的场景有效。</p><p>在路由器的【高级功能】》【虚拟服务器】功能中可以管理路由器的端口映射关系，</p><p><img src="assets/image-20230119110007965.png" alt="image-20230119110007965"></p><p>在这里我们需要按照前面的表内容添加两条配置记录（2095/2096）。</p><h3 id="Cloudflare-配置"><a href="#Cloudflare-配置" class="headerlink" title="Cloudflare 配置"></a>Cloudflare 配置</h3><h4 id="绑定对外域名"><a href="#绑定对外域名" class="headerlink" title="绑定对外域名"></a>绑定对外域名</h4><p>登录 Cloudflare 后在【网站】功能页面增加一个网站：</p><p><img src="assets/image-20230119111042042.png" alt="image-20230119111042042"></p><p>然后把我们的对外域名填写上去：</p><p><img src="assets/image-20230119111137873.png" alt="image-20230119111137873"></p><p>填写上去后需要去我们的域名原来的注册商的管理平台更改DNS解析服务器为 Cloudflare 提供的服务器：</p><p><img src="assets/image-20230119111429527.png" alt="image-20230119111429527"></p><p>等待 Cloudflare 验证成功后就可以在 Cloudflare 上管理我们的域名了：</p><p><img src="assets/image-20230119111539806.png" alt="image-20230119111539806"></p><h4 id="配置CNAME解析"><a href="#配置CNAME解析" class="headerlink" title="配置CNAME解析"></a>配置CNAME解析</h4><p>进入到我们的域名管理页面中，在左侧的【DNS】》【记录】中管理域名的DNS记录信息，在此添加一条DNS记录：</p><p><img src="assets/image-20230119111854253.png" alt="image-20230119111854253"></p><p>在这里测试中我把 test 的 CNAME 值配置成 houkunlin.tpddns.cn 域名，下表举例几个访问关系：</p><table><thead><tr><th>访问公网地址</th><th>实际转发到内网地址</th></tr></thead><tbody><tr><td><a href="http://test.doomsday.city/">http://test.doomsday.city:80</a></td><td><a href="http://houkunlin.tpddns.cn/">http://houkunlin.tpddns.cn:80</a></td></tr><tr><td><a href="https://test.doomsday.city/">https://test.doomsday.city:443</a></td><td><a href="https://houkunlin.tpddns.cn/">https://houkunlin.tpddns.cn:443</a></td></tr><tr><td><a href="http://test.doomsday.city:2095/">http://test.doomsday.city:2095</a></td><td><a href="http://houkunlin.tpddns.cn:2095/">http://houkunlin.tpddns.cn:2095</a></td></tr><tr><td><a href="https://test.doomsday.city:2096/">https://test.doomsday.city:2096</a></td><td><a href="https://houkunlin.tpddns.cn:2096/">https://houkunlin.tpddns.cn:2096</a></td></tr></tbody></table><p>可能由于公网IP端口限制原因，80/443端口无法访问，此时仅有 <code>http://test.doomsday.city:2095</code> 和 <code>https://test.doomsday.city:2096</code> 正常，但是我们往往很难记住端口，那么我们可以使用页面规则把 <code>http://test.doomsday.city:80</code> 和 <code>https://test.doomsday.city:443</code> 自动重定向到 2095/2096 端口，虽然实际依旧是访问了 2095/2096 端口，但是我们可以不用记住它，由 Cloudflare 自动跳转，当某一天端口号变动的时候，只需要修改配置就行了。</p><h4 id="配置页面规则"><a href="#配置页面规则" class="headerlink" title="配置页面规则"></a>配置页面规则</h4><p>进入到我们的域名管理页面中，在左侧的【规则】》【页面规则】中管理域名的页面规则配置，在这里我们需要新增两条配置：</p><p><img src="assets/image-20230119113115955.png" alt="image-20230119113115955"></p><p><img src="assets/image-20230119113157440.png" alt="image-20230119113157440"></p><p><img src="assets/image-20230119113323787.png" alt="image-20230119113323787"></p><p>第一条记录：把 <code>test.doomsday.city:80/*</code> 重定向到 <code>https://test.doomsday.city:2096/$1</code></p><p>第二条记录：把 <code>test.doomsday.city:443/*</code> 重定向到 <code>https://test.doomsday.city:2096/$1</code> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前期准备条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个域名（对外提供访问服务）&lt;/li&gt;
&lt;li&gt;有一个公网IP，固定公网IP或者动态公网IP都行&lt;/li&gt;
&lt;li&gt;拨号路由器支持端口映射&lt;/li&gt;
&lt;li&gt;路由器或者NAS能够设置免费的DDNS动态域名解析&lt;/li&gt;
&lt;li&gt;利用Cloudflare隐藏NAS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前期分析说明&quot;&gt;&lt;a href=&quot;#前期分析说明&quot; class=&quot;headerlink&quot; title=&quot;前期分析说明&quot;&gt;&lt;/a&gt;前期分析说明&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway跨域配置</title>
    <link href="https://houkunlin.gitee.io/2022/03/04/spring-cloud-gateway-cors/"/>
    <id>https://houkunlin.gitee.io/2022/03/04/spring-cloud-gateway-cors/</id>
    <published>2022-03-04T02:58:47.000Z</published>
    <updated>2022-03-04T02:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>先放一个可行的配置信息，后面再说过程。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="comment"># 一个全局默认的跨域配置，但是单独配置这个还是无法解决跨域问题</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOriginPatterns:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="comment"># 然后再对跨域Header配置做去重复处理，这样就能够保证跨域信息的完整度</span></span><br><span class="line">        <span class="comment"># 升级 SpringBoot 3.0 之后，发现这个配置得写在前面才行，写在前面的最后执行</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DedupeResponseHeader=Vary</span> <span class="string">Access-Control-Allow-Origin</span> <span class="string">Access-Control-Allow-Credentials,</span> <span class="string">RETAIN_LAST</span></span><br><span class="line">        <span class="comment"># 为了防止后端未配置跨域导致浏览器提示缺少跨域配置信息而请求失败，因此加上了默认的跨域Header配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Origin,</span> <span class="string">*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Methods,</span> <span class="string">*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Headers,</span> <span class="string">*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Credentials,</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>最近在使用 Nginx 转发到 SpringCloudGateway 发现了跨域问题，SpringCloud是已经配置了跨域信息，但是手机端（uni-app）依旧无法请求成功，经过尝试在Nginx配置跨域头部同样不行，最后排查了很久，得出了以下结论：</p><p><strong>一、发送请求时出现问题</strong></p><p>问题描述：SpringCloudGateway对跨域做了校验（OPTIONS请求【后端使用了其他自定义Header，因此需要OPTIONS请求】），导致手机端那边测试中出现的接口403问题</p><p>解决方案：SpringCloudGateway配置跨域信息</p><p><strong>二、返回数据出现问题</strong></p><p>问题描述：解决了 OPTIONS 403 问题后 POST 提示跨域问题（经抓包实际后端有登录成功json返回），主要错误有两个，要么是存在多个 Origin 相关数据（MulitCorsOrigin），要么是缺少 Origin 相关数据（MissingCorsOrigin）；</p><p>解决方案：增加默认过滤器配置，过滤器先添加跨域头（补全补完整跨域信息）然后再对跨域头去重处理</p><p><strong>问题总结：</strong></p><p>第一个坑：对 SpringCloudGateway 转发特性不是非常了解导致的，以为 SpringCloudGateway 不会处理跨域配置，而是直接转发给后端实例，结果 Gateway 会处理 OPTIONS 跨域检查</p><p>第二个坑：对 SpringCloudGateway 配置不够了解导致的，Gateway 配置了跨域后 OPTIONS 200 但是 POST CORS 错误就是 Gateway 和 Nginx 两者配置冲突导致的（Nginx也配了跨域）</p><p><strong>冲突描述：</strong></p><p>一、Nginx 加了跨域，Gateway 不配置跨域，OPTIONS 未请求到后端实例，Gateway 提示跨域错误403</p><p>二、Nginx 加了跨域，Gateway 配置跨域，但，OPTIONS 请求到后端实例，导致多个跨域请求头浏览器报错（后端配了跨域参数）</p><p>三、Nginx 加了跨域，Gateway 的跨域配置也有一个 Access-Control-Allow-Origin 就导致浏览器报 MulitCorsOrigin 问题</p><p>四、Nginx 不加跨域，Gateway 的跨域配置有 Access-Control-Allow-Origin ，但是没有 Access-Control-Allow-Methods 就导致浏览器报 MissingCorsOrigin 问题</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先放一个可行的配置信息，后面再说过程。&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;cloud:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;gateway:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;globalcors:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 一个全局默认的跨域配置，但是单独配置这个还是无法解决跨域问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;cors-configurations:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&amp;#x27;[/**]&amp;#x27;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;allowedOriginPatterns:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;allowedHeaders:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;allowedMethods:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;allowCredentials:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;default-filters:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 然后再对跨域Header配置做去重复处理，这样就能够保证跨域信息的完整度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 升级 SpringBoot 3.0 之后，发现这个配置得写在前面才行，写在前面的最后执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;DedupeResponseHeader=Vary&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Access-Control-Allow-Credentials,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;RETAIN_LAST&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 为了防止后端未配置跨域导致浏览器提示缺少跨域配置信息而请求失败，因此加上了默认的跨域Header配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;AddResponseHeader=Access-Control-Allow-Origin,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;AddResponseHeader=Access-Control-Allow-Methods,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;AddResponseHeader=Access-Control-Allow-Headers,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;AddResponseHeader=Access-Control-Allow-Credentials,&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;最近在使用 Nginx 转发到 SpringCloudGateway 发现了跨域问题，SpringCloud是已经配置了跨域信息，但是手机端（uni-app）依旧无法请求成功，经过尝试在Nginx配置跨域头部同样不行，最后排查了很久，得出了以下结论：&lt;/p&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="https://houkunlin.gitee.io/tags/SpringBoot/"/>
    
    <category term="SpringCloud" scheme="https://houkunlin.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringBootJpa自定义ID主键策略注册到Hibernate默认策略列表中（自定义全局主键策略）</title>
    <link href="https://houkunlin.gitee.io/2022/03/04/spring-boot-jpa-id-strategy/"/>
    <id>https://houkunlin.gitee.io/2022/03/04/spring-boot-jpa-id-strategy/</id>
    <published>2022-03-04T02:55:46.000Z</published>
    <updated>2022-03-04T02:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/34731783/how-to-register-custom-identifiergenerator-in-hibernate-jpa-entitymanager">如何在Hibernate JPA EntityManager中注册自定义IdentifierGenerator？</a></p><p>在使用SpringBootJpa自定义主键策略的时候，通常需要使用三个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@javax</span>.persistence.Id</span><br><span class="line"><span class="meta">@javax</span>.persistence.GeneratedValue(generator = <span class="string">&quot;id&quot;</span>)</span><br><span class="line"><span class="meta">@org</span>.hibernate.annotations.GenericGenerator(name = <span class="string">&quot;id&quot;</span>, strategy = <span class="string">&quot;com.xxx.XXXIdentifierGenerator&quot;</span>)</span><br><span class="line"><span class="keyword">private</span> String id;</span><br></pre></td></tr></table></figure><p>此时的第三个注解 <code>@org.hibernate.annotations.GenericGenerator(name = &quot;id&quot;, strategy = &quot;com.xxx.xxx.XXX&quot;)</code> 的 <code>strategy</code> 参数需要写完整的对象包名信息。</p><p>实际上 Hibernate 中已经预设了一组策略可以提供使用，例如使用UUID作为主键，此时也是需要使用三个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@javax</span>.persistence.Id</span><br><span class="line"><span class="meta">@javax</span>.persistence.GeneratedValue(generator = <span class="string">&quot;system-uuid&quot;</span>)</span><br><span class="line"><span class="meta">@org</span>.hibernate.annotations.GenericGenerator(name = <span class="string">&quot;system-uuid&quot;</span>, strategy = <span class="string">&quot;uuid&quot;</span>)</span><br><span class="line"><span class="keyword">private</span> String id;</span><br></pre></td></tr></table></figure><blockquote><p>注：GeneratedValue 的 generator 参数需要与 GenericGenerator 的 name 参数保持一致</p></blockquote><p>这时候 <code>GenericGenerator</code> 的 <code>strategy</code> 参数只需要填写一个关键词就行了。</p><p>这是因为 Hibernate 在 DefaultIdentifierGeneratorFactory 中已经为我们预设了一组可以正常使用的策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultIdentifierGeneratorFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    register( <span class="string">&quot;uuid2&quot;</span>, UUIDGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;guid&quot;</span>, GUIDGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;uuid&quot;</span>, UUIDHexGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;uuid.hex&quot;</span>, UUIDHexGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;assigned&quot;</span>, Assigned.class );</span><br><span class="line">    register( <span class="string">&quot;identity&quot;</span>, IdentityGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;select&quot;</span>, SelectGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;sequence&quot;</span>, SequenceStyleGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;seqhilo&quot;</span>, SequenceHiLoGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;increment&quot;</span>, IncrementGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;foreign&quot;</span>, ForeignGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;sequence-identity&quot;</span>, SequenceIdentityGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;enhanced-sequence&quot;</span>, SequenceStyleGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;enhanced-table&quot;</span>, TableGenerator.class );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正是由于上面的配置使得我们 <code>strategy</code> 参数可以不写完整的包名，只需要一个关键字就行了。</p><p>那么在 SpringBootJpa 中我们如何把自己编写的主键策略注册到 <code>DefaultIdentifierGeneratorFactory</code> 中，让我们在使用自己的主键策略的时候也可以让 <code>strategy</code> 参数不写完整的策略包名，而是像系统策略一样直接使用一个关键字就行了呢？</p><p><strong>先看结论，结论如下：</strong></p><p>那就是向SpringBoot中注入一个Bean ： <code>HibernatePropertiesCustomizer</code> 来向 Hibernate 追加参数信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeHibernatePropertiesCustomizer</span> <span class="keyword">implements</span> <span class="title">HibernatePropertiesCustomizer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Map&lt;String, Object&gt; hibernateProperties)</span> </span>&#123;</span><br><span class="line">        hibernateProperties.put(</span><br><span class="line">                AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER,</span><br><span class="line">                <span class="keyword">new</span> IdentifierGeneratorStrategyProvider()&#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Map&lt;String, Class&lt;?&gt;&gt; getStrategies() &#123;</span><br><span class="line">                    Map&lt;String, Class&lt;?&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">&quot;snowflake&quot;</span>, XXXXXIdentifierGenerator.class);</span><br><span class="line">                        <span class="keyword">return</span> map;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>看完结论，再说过程</strong></p><p>接下来说一下上面的代码如何生效的。</p><p><strong>以下过程采用逆向断点跟踪操作，从最后面的代码往前推断。</strong></p><p>我们通过 <code>DefaultIdentifierGeneratorFactory.register(String, Class)</code> 方法可以发现它在 <code>EntityManagerFactoryBuilderImpl.configureIdentifierGenerators(StandardServiceRegistry)</code> 的方法中被调用过，而且整个项目只有这一个在非 <code>DefaultIdentifierGeneratorFactory</code> 对象中的调用，因此在这个 <code>configureIdentifierGenerators</code> 方法中一定可以追加策略到预设列表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureIdentifierGenerators</span><span class="params">(StandardServiceRegistry ssr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> StrategySelector strategySelector = ssr.getService( StrategySelector.class );</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply id generators</span></span><br><span class="line"><span class="keyword">final</span> Object idGeneratorStrategyProviderSetting = configurationValues.remove( AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER );</span><br><span class="line"><span class="keyword">if</span> ( idGeneratorStrategyProviderSetting != <span class="keyword">null</span> ) &#123;</span><br><span class="line"><span class="keyword">final</span> IdentifierGeneratorStrategyProvider idGeneratorStrategyProvider =</span><br><span class="line">strategySelector.resolveStrategy( IdentifierGeneratorStrategyProvider.class, idGeneratorStrategyProviderSetting );</span><br><span class="line"><span class="keyword">final</span> MutableIdentifierGeneratorFactory identifierGeneratorFactory = ssr.getService( MutableIdentifierGeneratorFactory.class );</span><br><span class="line"><span class="keyword">if</span> ( identifierGeneratorFactory == <span class="keyword">null</span> ) &#123;</span><br><span class="line"><span class="keyword">throw</span> persistenceException(</span><br><span class="line"><span class="string">&quot;Application requested custom identifier generator strategies, &quot;</span> +</span><br><span class="line"><span class="string">&quot;but the MutableIdentifierGeneratorFactory could not be found&quot;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( Map.Entry&lt;String,Class&lt;?&gt;&gt; entry : idGeneratorStrategyProvider.getStrategies().entrySet() ) &#123;</span><br><span class="line">            <span class="comment">// =========================================================</span></span><br><span class="line"><span class="comment">// 在这里被调用</span></span><br><span class="line">identifierGeneratorFactory.register( entry.getKey(), entry.getValue() );</span><br><span class="line">    <span class="comment">// =========================================================</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以发现它是从 <code>configurationValues.remove( AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER );</code> 这段代码中获取到我们的其他主键策略信息。</p><p>那么接下来我们再追踪 <code>configurationValues</code> 这个对象，看看如何向 <code>configurationValues</code> 对象中添加一个 KEY 为 <code>AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER</code> 值为 <code>IdentifierGeneratorStrategyProvider.class</code> 类型的实例对象。</p><p>我们首先会找到 <code>EntityManagerFactoryBuilderImpl.java</code> 构造方法中有以下几行初始化配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> MergedSettings mergedSettings = mergeSettings( persistenceUnit, integrationSettings, ssrBuilder );</span><br><span class="line"></span><br><span class="line"><span class="comment">// flush before completion validation</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="string">&quot;true&quot;</span>.equals( mergedSettings.configurationValues.get( Environment.FLUSH_BEFORE_COMPLETION ) ) ) &#123;</span><br><span class="line">LOG.definingFlushBeforeCompletionIgnoredInHem( Environment.FLUSH_BEFORE_COMPLETION );</span><br><span class="line">mergedSettings.configurationValues.put( Environment.FLUSH_BEFORE_COMPLETION, <span class="string">&quot;false&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// keep the merged config values for phase-2</span></span><br><span class="line"><span class="keyword">this</span>.configurationValues = mergedSettings.getConfigurationValues();</span><br></pre></td></tr></table></figure><p>我们会发现 <code>configurationValues</code> 的值是来自 <code>persistenceUnit, integrationSettings, ssrBuilder</code> 三个参数，而此时的代码还在 Hibernate 内部，还没有到 SpringBoot 的部分，因此需要继续往外面跟踪调试代码。接下来就主要跟踪 <code>integrationSettings</code> 这个 Map 对象是从哪里来的。</p><p>然后我们会找到 <code>integrationSettings</code> 这个参数来自 <code>LocalContainerEntityManagerFactoryBean.java</code> 的 <code>getJpaPropertyMap()</code> 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> EntityManagerFactory <span class="title">createNativeEntityManagerFactory</span><span class="params">()</span> <span class="keyword">throws</span> PersistenceException </span>&#123;</span><br><span class="line">Assert.state(<span class="keyword">this</span>.persistenceUnitInfo != <span class="keyword">null</span>, <span class="string">&quot;PersistenceUnitInfo not initialized&quot;</span>);</span><br><span class="line"></span><br><span class="line">PersistenceProvider provider = getPersistenceProvider();</span><br><span class="line"><span class="keyword">if</span> (provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">String providerClassName = <span class="keyword">this</span>.persistenceUnitInfo.getPersistenceProviderClassName();</span><br><span class="line"><span class="keyword">if</span> (providerClassName == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"><span class="string">&quot;No PersistenceProvider specified in EntityManagerFactory configuration, &quot;</span> +</span><br><span class="line"><span class="string">&quot;and chosen PersistenceUnitInfo does not specify a provider class name either&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt; providerClass = ClassUtils.resolveClassName(providerClassName, getBeanClassLoader());</span><br><span class="line">provider = (PersistenceProvider) BeanUtils.instantiateClass(providerClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Building JPA container EntityManagerFactory for persistence unit &#x27;&quot;</span> +</span><br><span class="line"><span class="keyword">this</span>.persistenceUnitInfo.getPersistenceUnitName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ==============================================================</span></span><br><span class="line">    <span class="comment">// 关键代码部分</span></span><br><span class="line">EntityManagerFactory emf =</span><br><span class="line">provider.createContainerEntityManagerFactory(<span class="keyword">this</span>.persistenceUnitInfo, getJpaPropertyMap());</span><br><span class="line">    <span class="comment">// ==============================================================</span></span><br><span class="line">postProcessEntityManagerFactory(emf, <span class="keyword">this</span>.persistenceUnitInfo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> emf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来跟踪 <code>getJpaPropertyMap()</code> 方法中 <code>jpaPropertyMap</code> 这个对象的数据是如何改变的，给 <code>AbstractEntityManagerFactoryBean.java</code> 的 216 和 227 设置断点。</p><p>然后我们会发现  <code>getJpaPropertyMap()</code> 方法中 <code>jpaPropertyMap</code> 这个对象在 <code>EntityManagerFactoryBuilder.Builder.build()</code> 方法中有两个调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entityManagerFactoryBean.getJpaPropertyMap().putAll(EntityManagerFactoryBuilder.<span class="keyword">this</span>.jpaProperties);</span><br><span class="line">entityManagerFactoryBean.getJpaPropertyMap().putAll(<span class="keyword">this</span>.properties);</span><br></pre></td></tr></table></figure><p>这里第一个 <code>EntityManagerFactoryBuilder.this.jpaProperties</code> 参数是读取配置文件里面 <code>spring.jpa.properties</code> 参数得来的，但是我们在配置文件中无法提供一个 <code>IdentifierGeneratorStrategyProvider.class</code> 实例对象，因此需要关注第二个 <code>this.properties</code> 里面的配置是如何设置的。</p><p>再使用老方法，断点 <code>this.properties</code> 的数据是如何更改的，在 <code>EntityManagerFactoryBuilder.java</code> 的 171 设置断点。</p><p>然后会发现在 <code>JpaBaseConfiguration.entityManagerFactory(EntityManagerFactoryBuilder)</code> 方法中有一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">(EntityManagerFactoryBuilder factoryBuilder)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; vendorProperties = getVendorProperties();</span><br><span class="line">customizeVendorProperties(vendorProperties);</span><br><span class="line"><span class="keyword">return</span> factoryBuilder.dataSource(<span class="keyword">this</span>.dataSource).packages(getPackagesToScan()).properties(vendorProperties)</span><br><span class="line">.mappingResources(getMappingResources()).jta(isJta()).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面的 <code>properties(vendorProperties)</code> 更改了前面（上一个步骤）的 <code>properties</code> 参数，接下来通过代码得知 <code>vendorProperties</code> 参数是通过调用 <code>JpaBaseConfiguration.getVendorProperties()</code> 方法得来的，但是 <code>getVendorProperties()</code> 是一个抽象方法，我们找到它的实现类 <code>HibernateJpaConfiguration.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">getVendorProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Supplier&lt;String&gt; defaultDdlMode = () -&gt; <span class="keyword">this</span>.defaultDdlAutoProvider.getDefaultDdlAuto(getDataSource());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="keyword">this</span>.hibernateProperties</span><br><span class="line">.determineHibernateProperties(getProperties().getProperties(), <span class="keyword">new</span> HibernateSettings()</span><br><span class="line">.ddlAuto(defaultDdlMode).hibernatePropertiesCustomizers(<span class="keyword">this</span>.hibernatePropertiesCustomizers)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码的最后有一个 <code>hibernatePropertiesCustomizers(this.hibernatePropertiesCustomizers)</code> 属性定制器，<code>this.hibernatePropertiesCustomizers</code> 是一个 <code>List&lt;HibernatePropertiesCustomizer&gt;</code> 对象，它是通过构造方法注入一个 <code>ObjectProvider&lt;HibernatePropertiesCustomizer&gt;</code> 参数来得到的，而实际上 <code>ObjectProvider&lt;HibernatePropertiesCustomizer&gt;</code> 会是一个拥有相同类型的Bean对象列表。</p><p>那么到这里基本上就解决了，我们只要在SpringBoot中提供一个实现了 <code>HibernatePropertiesCustomizer</code> 的 Bean 对象即可对 <code>properties</code> 进行设置、插入数据。</p><p>现在再回到 <code>EntityManagerFactoryBuilderImpl</code> 中，<code>configurationValues</code> 对象中需要一个 KEY 为 <code>AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER</code> 值为 <code>IdentifierGeneratorStrategyProvider.class</code> 类型的实例对象，那我们就在 <code>HibernatePropertiesCustomizer</code> 中给 <code>properties</code> 添加一个这样的 Key-Value 对象信息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/34731783/how-to-register-custom-identifiergenerator-in-hibernate-jpa-entitymanager&quot;&gt;如何在Hibernate JPA EntityManager中注册自定义IdentifierGenerator？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在使用SpringBootJpa自定义主键策略的时候，通常需要使用三个注解：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@javax&lt;/span&gt;.persistence.Id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@javax&lt;/span&gt;.persistence.GeneratedValue(generator = &lt;span class=&quot;string&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@org&lt;/span&gt;.hibernate.annotations.GenericGenerator(name = &lt;span class=&quot;string&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;, strategy = &lt;span class=&quot;string&quot;&gt;&amp;quot;com.xxx.XXXIdentifierGenerator&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String id;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="https://houkunlin.gitee.io/tags/SpringBoot/"/>
    
    <category term="Jpa" scheme="https://houkunlin.gitee.io/tags/Jpa/"/>
    
    <category term="Hibernate" scheme="https://houkunlin.gitee.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Docker 运行 Java 程序时遇到中文字体异常问题解决方案</title>
    <link href="https://houkunlin.gitee.io/2022/01/21/docker-zh-cn-font/"/>
    <id>https://houkunlin.gitee.io/2022/01/21/docker-zh-cn-font/</id>
    <published>2022-01-21T14:54:58.000Z</published>
    <updated>2022-01-21T14:54:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在我们日常开发中通常会遇到需要在程序中导出Excel电子表格，或者生成带有中文汉字的图片，此时通常会遇到异常报错，一般情况下都是缺少相关字体导致的。</p><p>此时我们需要在 <code>docker</code> 容器中安装相关字体应用程序库，以及加入中文字体到 <code>docker</code> 容器中。</p><p><strong>宋体</strong> 字库在 <code>Windows</code> 是系统的 <code>C:\Windows\Fonts\simsun.ttc</code> 字体文件，可能需要把字体转换成 <code>ttf</code> 格式字体 <code>simsun.ttf</code> （没有在容器内试过<code>ttc</code>） </p><h1 id="openjdk-8-alpine-镜像（alpine-系统）"><a href="#openjdk-8-alpine-镜像（alpine-系统）" class="headerlink" title="openjdk:8-alpine 镜像（alpine 系统）"></a><code>openjdk:8-alpine</code> 镜像（<code>alpine</code> 系统）</h1><blockquote><p>需要执行 <code>apk add ttf-dejavu fontconfig</code> 安装相关字体库</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=HouKunLin</span></span><br><span class="line"><span class="comment"># 安装相关字库程序</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add ttf-dejavu fontconfig</span></span><br><span class="line"><span class="comment"># 加入中文字体文件到指定路径中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./simsun.ttf /usr/share/fonts/simsun.ttf</span></span><br><span class="line"><span class="comment"># Docker 容器中通常遇到时区问题，因此可以加上这个环境变量把时间变为东八区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ Asia/Shanghai</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.jar ./</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;-Xms512m&quot;</span>, <span class="string">&quot;-Xmx512m&quot;</span>, <span class="string">&quot;app.jar&quot;</span>, <span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h1 id="openjdk-11-jre-镜像（Debian-系统）"><a href="#openjdk-11-jre-镜像（Debian-系统）" class="headerlink" title="openjdk:11-jre 镜像（Debian 系统）"></a><code>openjdk:11-jre</code> 镜像（<code>Debian</code> 系统）</h1><blockquote><p>需要执行 <code>apt-get install -y fontconfig libfreetype6</code> 安装相关字体库</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=HouKunLin</span></span><br><span class="line"><span class="comment"># 安装相关字库程序</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y fontconfig libfreetype6</span></span><br><span class="line"><span class="comment"># 加入中文字体文件到指定路径中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./simsun.ttf /usr/share/fonts/simsun.ttf</span></span><br><span class="line"><span class="comment"># Docker 容器中通常遇到时区问题，因此可以加上这个环境变量把时间变为东八区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ Asia/Shanghai</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.jar ./</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;-Xms512m&quot;</span>, <span class="string">&quot;-Xmx512m&quot;</span>, <span class="string">&quot;app.jar&quot;</span>, <span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="CentOS-系统可参考下方链接"><a href="#CentOS-系统可参考下方链接" class="headerlink" title="CentOS 系统可参考下方链接"></a>CentOS 系统可参考下方链接</h1><ul><li><a href="https://segmentfault.com/a/1190000040275198">https://segmentfault.com/a/1190000040275198</a></li></ul><h1 id="切换到-JDK-11-容器镜像是遇到的问题"><a href="#切换到-JDK-11-容器镜像是遇到的问题" class="headerlink" title="切换到 JDK 11 容器镜像是遇到的问题"></a>切换到 JDK 11 容器镜像是遇到的问题</h1><p>之前在切换到 <code>openjdk:11-jre-slim</code> 镜像后导出Excel遇到一个问题 <code>NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager</code> 异常，换成 <code>openjdk:11-jre</code> 镜像即可。</p><p><strong>相关链接</strong></p><ul><li><a href="https://stackoverflow.com/questions/55454036/noclassdeffounderror-could-not-initialize-class-sun-awt-x11fontmanager">https://stackoverflow.com/questions/55454036/noclassdeffounderror-could-not-initialize-class-sun-awt-x11fontmanager</a></li><li><a href="https://stackoverflow.com/questions/53375613/why-is-the-java-11-base-docker-image-so-large-openjdk11-jre-slim">https://stackoverflow.com/questions/53375613/why-is-the-java-11-base-docker-image-so-large-openjdk11-jre-slim</a></li><li><a href="https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4">https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在我们日常开发中通常会遇到需要在程序中导出Excel电子表格，或者生成带有中文汉字的图片，此时通常会遇到异常报错，一般情况下都是缺少相关字体导致的。&lt;/p&gt;
&lt;p&gt;此时我们需要在 &lt;code&gt;docker&lt;/code&gt; 容器中安装相关字体应用程序库，以及加入中文字体到 &lt;code&gt;docker&lt;/code&gt; 容器中。&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://houkunlin.gitee.io/tags/docker/"/>
    
    <category term="java" scheme="https://houkunlin.gitee.io/tags/java/"/>
    
    <category term="springboot" scheme="https://houkunlin.gitee.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 数据库迁移 达梦数据库 踩坑日记</title>
    <link href="https://houkunlin.gitee.io/2021/12/23/mysql-migrate-dm/"/>
    <id>https://houkunlin.gitee.io/2021/12/23/mysql-migrate-dm/</id>
    <published>2021-12-23T02:42:42.000Z</published>
    <updated>2021-12-23T02:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="踩坑1：存储汉字出现长度不够问题"><a href="#踩坑1：存储汉字出现长度不够问题" class="headerlink" title="踩坑1：存储汉字出现长度不够问题"></a>踩坑1：存储汉字出现长度不够问题</h5><p>在 <code>MySQL</code> 中使用 <code>varchar(1)</code> 可以存储1个汉字，在原样迁移到达梦数据库后会出现插入、修改失败问题，因为达梦数据库需要 <code>varchar(3)</code> 才能存储1个汉字。</p><p>可以使用达梦数据库迁移工具的数据类型映射功能来解决：</p><p><img src="./image-20211223111135725.png" alt="image-20211223111135725"></p><p>在迁移时不勾选”使用默认数据类型映射关系”</p><p><img src="./image-20211223111258071.png" alt="image-20211223111258071"></p><h5 id="踩坑2：数据库-timestamp-或-datetime-表结构迁移失败，提示类似-DEFAULT-约束问题"><a href="#踩坑2：数据库-timestamp-或-datetime-表结构迁移失败，提示类似-DEFAULT-约束问题" class="headerlink" title="踩坑2：数据库 timestamp 或 datetime 表结构迁移失败，提示类似 DEFAULT 约束问题"></a>踩坑2：数据库 <code>timestamp</code> 或 <code>datetime</code> 表结构迁移失败，提示类似 <code>DEFAULT</code> 约束问题</h5><p>在使用达梦数据库迁移工具时可能会出现这个问题；</p><p>极有可能是在 <code>MySQL</code> 中对 <code>timestamp</code> 和 <code>datetime</code> 类型字段设置了 <code>CURRENT_TIMESTAMP(6)</code> 默认时间，以及设置数据更新时自动更新时间，此时在迁移的配置中，手动更新字段映射配置，在默认的映射配置中，默认值被加上了单引号（<code>&#39;CURRENT_TIMESTAMP(6)&#39;</code>），我们需要把单引号去掉就行。</p><p><img src="./image-20211223105204333.png" alt="image-20211223105204333"></p><h5 id="踩坑3：数据迁移失败，提示类型信息问题"><a href="#踩坑3：数据迁移失败，提示类型信息问题" class="headerlink" title="踩坑3：数据迁移失败，提示类型信息问题"></a>踩坑3：数据迁移失败，提示类型信息问题</h5><p>在使用达梦数据库迁移工具时可能会出现这个问题；</p><p>在迁移工具中“浏览”数据时会发现，日期信息会显示成 <code>2020-01-01T00:00:00</code> 这种格式，这种格式导致达梦数据库无法解析，因此迁移失败。</p><p>问题是 <code>MySQL</code> 的字段被设置成 <code>datetime</code> 类型，因此会显示成上面这种格式，把 <code>MySQL</code> 的字段类型改为 <code>timestamp</code> 后在用迁移工具迁移数据就不会出现问题。</p><h5 id="踩坑4：在-MySQL-中使用-blob-或使用-clob-存储长文本，迁移达梦数据库后导致数据异常"><a href="#踩坑4：在-MySQL-中使用-blob-或使用-clob-存储长文本，迁移达梦数据库后导致数据异常" class="headerlink" title="踩坑4：在 MySQL 中使用 blob 或使用 clob 存储长文本，迁移达梦数据库后导致数据异常"></a>踩坑4：在 <code>MySQL</code> 中使用 <code>blob</code> 或使用 <code>clob</code> 存储长文本，迁移达梦数据库后导致数据异常</h5><p>主要表现为，用的 Hibernate 一个工作流的信息需要保持长文本数据，同一套Java代码，在 MySQL 下正常，但是在 达梦数据库 上出现数据异常。</p><p>经过排查：</p><ol><li>MySQL blob  -&gt; DM blob ：Java读取达梦数据库数据后返回16进制数据（实际应该返回文本）</li><li>MySQL blob -&gt; DM clob ：Java读取达梦数据库数据后返回文本数据（这是正确的类型，但是依旧存在中文乱码）</li><li>MySQL 中 blob 里面的数据存在中文乱码，因此迁移到达梦数据库后依旧出现中文乱码</li><li>MySQL text -&gt; DM clob ：在MySQL中解决了中文乱码，到达梦数据库中中文乱码同样也不存在，因此这个也是正常的</li></ol><p>因此迁移时需要注意，如果在 MySQL 中使用 blob 存储长文本（有汉字）需要在MySQL中特殊处理，至少要把汉字乱码问题解决掉。</p><p>然后迁移到达梦数据库中时，达梦字段类型使用 clob 或者 text 来存储（使用 blob 存储时读取出来的数据会是16进制）</p><p>解决过程：<code>MySQL blob -&gt; MySQL text（解决中文乱码） -&gt; DM clob 或者 DM text</code></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;踩坑1：存储汉字出现长度不够问题&quot;&gt;&lt;a href=&quot;#踩坑1：存储汉字出现长度不够问题&quot; class=&quot;headerlink&quot; title=&quot;踩坑1：存储汉字出现长度不够问题&quot;&gt;&lt;/a&gt;踩坑1：存储汉字出现长度不够问题&lt;/h5&gt;&lt;p&gt;在 &lt;code&gt;MySQL&lt;/code&gt; 中使用 &lt;code&gt;varchar(1)&lt;/code&gt; 可以存储1个汉字，在原样迁移到达梦数据库后会出现插入、修改失败问题，因为达梦数据库需要 &lt;code&gt;varchar(3)&lt;/code&gt; 才能存储1个汉字。&lt;/p&gt;
&lt;p&gt;可以使用达梦数据库迁移工具的数据类型映射功能来解决：&lt;/p&gt;</summary>
    
    
    
    
    <category term="达梦" scheme="https://houkunlin.gitee.io/tags/%E8%BE%BE%E6%A2%A6/"/>
    
    <category term="DM" scheme="https://houkunlin.gitee.io/tags/DM/"/>
    
    <category term="MySQL" scheme="https://houkunlin.gitee.io/tags/MySQL/"/>
    
    <category term="达梦数据库迁移" scheme="https://houkunlin.gitee.io/tags/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>Docker 容器中文字体乱码、无法加载中文字体</title>
    <link href="https://houkunlin.gitee.io/2021/12/23/docker-fonts/"/>
    <id>https://houkunlin.gitee.io/2021/12/23/docker-fonts/</id>
    <published>2021-12-23T02:38:42.000Z</published>
    <updated>2021-12-23T02:38:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 <code>java:8-alpine</code> 镜像打包 java 项目运行后发现有些需要生成含中文文字图片的接口出现异常，或者生成的中文乱码，主要是容器没有中文字体导致的。</p><p>可以在打包容器的使用增加字体安装命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add ttf-dejavu fontconfig</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在使用 &lt;code&gt;java:8-alpine&lt;/code&gt; 镜像打包 java 项目运行后发现有些需要生成含中文文字图片的接口出现异常，或者生成的中文乱码，主要是容器没有中文字体导致的。&lt;/p&gt;
&lt;p&gt;可以在打包容器的使用增加字体安装命令：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apk add ttf-dejavu fontconfig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://houkunlin.gitee.io/tags/docker/"/>
    
    <category term="容器字体" scheme="https://houkunlin.gitee.io/tags/%E5%AE%B9%E5%99%A8%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux三级等保踩坑日记</title>
    <link href="https://houkunlin.gitee.io/2021/12/23/linux-level-3-bug/"/>
    <id>https://houkunlin.gitee.io/2021/12/23/linux-level-3-bug/</id>
    <published>2021-12-23T02:28:01.000Z</published>
    <updated>2021-12-23T02:28:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="踩坑1：服务器无法登录"><a href="#踩坑1：服务器无法登录" class="headerlink" title="踩坑1：服务器无法登录"></a>踩坑1：服务器无法登录</h2><ol><li>禁用 <code>root</code> 帐号登录<ol><li>修改 <code>/etc/ssh/sshd_config</code> 文件增加 <code>PermitRootLogin no</code> 配置</li></ol></li><li>设置密码有效期；例如：设置密码有效期30天，30天后密码过期，必须修改密码才能登录<ol><li>修改 <code>/etc/login.defs</code> 文件增加 <code>PASS_MAX_DAYS 30</code> 配置</li></ol></li><li>设置文件属性：<code>chattr +i /etc/shadow</code></li></ol><p>静候30天你会发现惊喜：登录服务器提示必须修改密码，但是修改密码失败</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;踩坑1：服务器无法登录&quot;&gt;&lt;a href=&quot;#踩坑1：服务器无法登录&quot; class=&quot;headerlink&quot; title=&quot;踩坑1：服务器无法登录&quot;&gt;&lt;/a&gt;踩坑1：服务器无法登录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;禁用 &lt;code&gt;root&lt;/code&gt; 帐号登录&lt;ol&gt;
&lt;li&gt;修改 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; 文件增加 &lt;code&gt;PermitRootLogin no&lt;/code&gt; 配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;设置密码有效期；例如：设置密码有效期30天，30天后密码过期，必须修改密码才能登录&lt;ol&gt;
&lt;li&gt;修改 &lt;code&gt;/etc/login.defs&lt;/code&gt; 文件增加 &lt;code&gt;PASS_MAX_DAYS 30&lt;/code&gt; 配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;设置文件属性：&lt;code&gt;chattr +i /etc/shadow&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;静候30天你会发现惊喜：登录服务器提示必须修改密码，但是修改密码失败&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://houkunlin.gitee.io/tags/Linux/"/>
    
    <category term="三级等保" scheme="https://houkunlin.gitee.io/tags/%E4%B8%89%E7%BA%A7%E7%AD%89%E4%BF%9D/"/>
    
    <category term="安全基线" scheme="https://houkunlin.gitee.io/tags/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>通过 Privoxy 把 Shadowsocks 转成 Http 代理</title>
    <link href="https://houkunlin.gitee.io/2020/11/07/socks5-to-http/"/>
    <id>https://houkunlin.gitee.io/2020/11/07/socks5-to-http/</id>
    <published>2020-11-06T18:18:20.000Z</published>
    <updated>2020-11-06T18:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个脚本放在草稿里面很久了，今天放出来。</p><p>通过一个脚本一键把一个普通的 <code>Ubuntu Docker</code> 容器变成一个代理转发 <code>Socks5</code> 的服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://qastack.cn/superuser/423563/convert-http-requests-to-socks5</span></span><br><span class="line"><span class="comment"># https://gist.github.com/xwsg/5ecd015be95a61875d43df87c451aca4</span></span><br><span class="line"><span class="comment"># https://edxi.github.io/2018/07/09/Shadowsocks_Privoxy_Squid_GFWlist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">apt update &amp;&amp; apt install shadowsocks-libev privoxy systemctl -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 Privoxy 配置文件</span></span><br><span class="line"><span class="comment"># 去除注释内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(awk &#x27;/^[^#]/&#x27; /etc/privoxy/config)</span>&quot;</span> &gt;/etc/privoxy/config</span><br><span class="line"><span class="comment"># 替换监听IP配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(sed &#x27;s/127.0.0.1/0.0.0.0/g&#x27; /etc/privoxy/config | sed &#x27;/listen.*\[.*/&#x27;d)</span>&quot;</span> &gt;/etc/privoxy/config</span><br><span class="line"><span class="comment"># 加入转发配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;forward-socks5t / 127.0.0.1:1080 .&quot;</span> &gt;&gt;/etc/privoxy/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 ss-local 配置文件</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF &gt;/etc/shadowsocks-libev/config.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;server&quot;:&quot;server.host&quot;,</span></span><br><span class="line"><span class="string">    &quot;mode&quot;:&quot;tcp_and_udp&quot;,</span></span><br><span class="line"><span class="string">    &quot;server_port&quot;:8044,</span></span><br><span class="line"><span class="string">    &quot;local_port&quot;:1080,</span></span><br><span class="line"><span class="string">    &quot;local_address&quot;:&quot;0.0.0.0&quot;,</span></span><br><span class="line"><span class="string">    &quot;password&quot;:&quot;my password&quot;,</span></span><br><span class="line"><span class="string">    &quot;timeout&quot;:60,</span></span><br><span class="line"><span class="string">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动本地 SS</span></span><br><span class="line">nohup ss-local -c /etc/shadowsocks-libev/config.json &gt;sslocal.log &amp;</span><br><span class="line"><span class="comment"># 启动 Privoxy</span></span><br><span class="line">/etc/init.d/privoxy start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就可以使用 <code>curl</code> 来测试 HTTP 代理是否正确了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -v ifconfig.pro <span class="comment"># 返回本机IP</span></span><br><span class="line">curl -v -x socks5://127.0.0.1:1080 ifconfig.pro <span class="comment"># 返回 SS 代理 IP</span></span><br><span class="line">curl -v -x http://127.0.0.1:8118 ifconfig.pro <span class="comment"># 返回 SS 代理 IP</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个脚本放在草稿里面很久了，今天放出来。&lt;/p&gt;
&lt;p&gt;通过一个脚本一键把一个普通的 &lt;code&gt;Ubuntu Docker&lt;/code&gt; 容器变成一个代理转发 &lt;code&gt;Socks5&lt;/code&gt; 的服务器。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# https://qastack.cn/superuser/423563/convert-http-requests-to-socks5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# https://gist.github.com/xwsg/5ecd015be95a61875d43df87c451aca4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# https://edxi.github.io/2018/07/09/Shadowsocks_Privoxy_Squid_GFWlist/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装软件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt update &amp;amp;&amp;amp; apt install shadowsocks-libev privoxy systemctl -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 替换 Privoxy 配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 去除注释内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;subst&quot;&gt;$(awk &amp;#x27;/^[^#]/&amp;#x27; /etc/privoxy/config)&lt;/span&gt;&amp;quot;&lt;/span&gt; &amp;gt;/etc/privoxy/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 替换监听IP配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;subst&quot;&gt;$(sed &amp;#x27;s/127.0.0.1/0.0.0.0/g&amp;#x27; /etc/privoxy/config | sed &amp;#x27;/listen.*\[.*/&amp;#x27;d)&lt;/span&gt;&amp;quot;&lt;/span&gt; &amp;gt;/etc/privoxy/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加入转发配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;forward-socks5t / 127.0.0.1:1080 .&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt;/etc/privoxy/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 替换 ss-local 配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;EOF &amp;gt;/etc/shadowsocks-libev/config.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;server&amp;quot;:&amp;quot;server.host&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;mode&amp;quot;:&amp;quot;tcp_and_udp&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;server_port&amp;quot;:8044,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;local_port&amp;quot;:1080,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;local_address&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;password&amp;quot;:&amp;quot;my password&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;timeout&amp;quot;:60,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 启动本地 SS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nohup ss-local -c /etc/shadowsocks-libev/config.json &amp;gt;sslocal.log &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 启动 Privoxy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/init.d/privoxy start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="shell" scheme="https://houkunlin.gitee.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>部署 SpringBoot 项目时一个 Linux Service 模板</title>
    <link href="https://houkunlin.gitee.io/2020/10/26/linux-service/"/>
    <id>https://houkunlin.gitee.io/2020/10/26/linux-service/</id>
    <published>2020-10-26T04:09:04.000Z</published>
    <updated>2020-10-27T02:22:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="app-jar-的启动"><a href="#app-jar-的启动" class="headerlink" title="app.jar 的启动"></a><code>app.jar</code> 的启动</h2><p>在服务器上启动项目时最简单的启动项目方法是直接执行 <code>java -jar app.jar</code> 命令，或者使用 <code>nohup</code> 进入到后台运行 <code>nohup java -jar app.jar &amp;</code> 。</p><p>但是当我们重新部署、重启项目时会比较麻烦，我们需要通过 <code>ps -ef|grep app.jar</code> 来找到我们项目执行时的进程ID <code>PID</code> ，然后再执行 <code>kill -9 $PID</code> 来杀掉当前正在运行的项目，之后再重新运行项目。</p><p>虽然只有几个简单的步骤，但还是稍微有点麻烦。整个过程：<strong>运行-&gt;上传新程序-&gt;查找当前程序PID-&gt;杀掉当前程序-&gt;重新运行</strong>，那我们能不能稍微简化一下上述过程，把中间查找PID和杀掉进程这两个不去掉，也把命令简化一下，变成：<strong>运行-&gt;上传新程序-&gt;重新运行</strong> 。</p><h3 id="手动编写一个启动脚本：run-sh"><a href="#手动编写一个启动脚本：run-sh" class="headerlink" title="手动编写一个启动脚本：run.sh"></a>手动编写一个启动脚本：<code>run.sh</code></h3><p>此时我们最简单的方法就是写一个 <code>SHELL</code> 脚本 <code>run.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------kill_app process----------------&#x27;</span></span><br><span class="line"></span><br><span class="line">KILL_PROCESS_NAME=<span class="string">&#x27;/application/app.jar&#x27;</span></span><br><span class="line"></span><br><span class="line">PROCESS_ID=`ps -ef | grep <span class="variable">$KILL_PROCESS_NAME</span> | grep -v <span class="string">&#x27;grep&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ProcessId: &#x27;</span> <span class="variable">$PROCESS_ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> <span class="variable">$PROCESS_ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;KILL_ID: &#x27;</span> <span class="variable">$id</span></span><br><span class="line"><span class="built_in">kill</span> -s 9 <span class="variable">$id</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------killed_app.jar----------------&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------start_app.jar----------------&#x27;</span></span><br><span class="line"></span><br><span class="line">nohup  java -Xms512m -Xmx512m -jar  <span class="variable">$KILL_PROCESS_NAME</span> --spring.profiles.active=file  &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------started_app.jar----------------&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上脚本能够有效的解决我们的问题，但是新问题又来了，如果想查看程序是否运行呢？我们想的肯定是直接执行命令 <code>ps -ef|grep app.jar</code> 查找这个程序是否正在运行，或者把查询运行状态的命令写进我们前面的脚本里面，然后执行 <code>./run.sh status</code> 查询程序执行状态。</p><p>假如我们把查询状态、启动、停止这几个操作都写入到一个脚本中，并提供参数来调用，就需要修改脚本代码，此时我们的脚本是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">KILL_PROCESS_NAME=<span class="string">&#x27;/application/app.jar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getProcessId</span></span>() &#123;</span><br><span class="line">  PID=$(ps -ef | grep <span class="variable">$KILL_PROCESS_NAME</span> | grep -v <span class="string">&#x27;grep&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">  <span class="built_in">return</span> <span class="variable">$PID</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">  nohup java -Xms512m -Xmx512m -jar <span class="variable">$KILL_PROCESS_NAME</span> --spring.profiles.active=file &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;运行成功&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">  getProcessId</span><br><span class="line">  PROCESS_ID=$?</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$PROCESS_ID</span>&quot;</span> != <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;进程ID：<span class="variable">$PROCESS_ID</span>&quot;</span></span><br><span class="line">    <span class="built_in">kill</span> -s 9 <span class="variable">$PROCESS_ID</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;没有运行&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line">status)</span><br><span class="line">  getProcessId</span><br><span class="line">  PROCESS_ID=$?</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$PROCESS_ID</span>&quot;</span> != <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在运行...&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;没有运行&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  ;;</span><br><span class="line">stop)</span><br><span class="line">  stop</span><br><span class="line">  ;;</span><br><span class="line">restart)</span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;参数错误&quot;</span></span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时我们有了四个可以执行的命令：</p><ul><li><code>./run.sh start</code> 启动程序</li><li><code>./run.sh status</code> 查询运行状态</li><li><code>./run.sh stop</code> 停止运行</li><li><code>./run.sh restart</code> 重启程序</li></ul><p>此时我们就有了4个可以正常使用的命令，但是现在还不能直接设置程序在系统启动的时候随着系统启动，因为还需要做一些配置，最简单的就是修改 <code>/etc/profile</code> 文件加上启动命令，比较麻烦一点就是写一个启动脚本放到系统的 <code>/etc/init.d/</code> 初始化路径中，然后把脚本加入到系统启动。</p><p>但同时我们上面的几个命令看起来是不是非常像Linux系统的系统服务呢？Linux系统服务也是有4个命令：</p><ul><li><code>systemctl start app.service</code> 启动服务</li><li><code>systemctl status app.service</code> 查询服务运行状态</li><li><code>systemctl stop app.service</code> 停止服务</li><li><code>systemctl restart app.service</code> 重启服务</li></ul><p>那我们能不能把它改造成系统服务呢？我们该如何为自己的 <code>SpringBoot</code> 应用编写一个Linux系统服务呢？</p><h2 id="app-service-示例"><a href="#app-service-示例" class="headerlink" title="app.service 示例"></a><code>app.service</code> 示例</h2><p>以下给出了一个示例 <code>app.service</code> 文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://www.jinbuguo.com/systemd/systemd.unit.html</span></span><br><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="comment"># 单元的解释说明 http://www.jinbuguo.com/systemd/systemd.unit.html#Description=</span></span><br><span class="line"><span class="attr">Description</span>=Spring Boot Application</span><br><span class="line"><span class="comment"># 启动顺序设置</span></span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="comment"># 配合 After 设置强依赖服务，依赖单元必须已经全部处于启动成功的状态时才能启动当前单元 http://www.jinbuguo.com/systemd/systemd.unit.html#Requisite=</span></span><br><span class="line"><span class="comment">#Requisite=</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=nobody</span><br><span class="line"><span class="comment"># 重启服务配置， on-failure 表示仅在服务进程异常退出时重启 http://www.jinbuguo.com/systemd/systemd.service.html#Restart=</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="comment"># 在重启服务前暂停的时间 http://www.jinbuguo.com/systemd/systemd.service.html#RestartSec=</span></span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">30</span>s</span><br><span class="line"><span class="comment"># 设置日志与标准输入输出 http://www.jinbuguo.com/systemd/systemd.exec.html#StandardOutput=</span></span><br><span class="line"><span class="comment"># 关闭了 Service 的输出，依赖 Spring Boot 应用程序的日志输出</span></span><br><span class="line"><span class="comment"># 请注意，一定要把 WorkingDirectory 目录设置 nobody:nogroup 的权限，否则此目录无写入权限</span></span><br><span class="line"><span class="attr">StandardOutput</span>=null</span><br><span class="line"><span class="comment"># 设置工作路径 http://www.jinbuguo.com/systemd/systemd.exec.html#WorkingDirectory=</span></span><br><span class="line"><span class="attr">WorkingDirectory</span>=/application/</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/java -Xms512m -Xmx512m -jar /application/app.jar --spring.profiles.active=dev</span><br><span class="line"><span class="comment"># 其实这里还可以向下面这样写，java执行的jar不写全路径，直接写文件名，因为设置了 WorkingDirectory 会在该路径下找相应的文件</span></span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/java -Xms512m -Xmx512m -jar app.jar --spring.profiles.active=dev</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何使-app-service-生效"><a href="#如何使-app-service-生效" class="headerlink" title="如何使 app.service 生效"></a>如何使 <code>app.service</code> 生效</h3><p>该 <code>app.service</code> 文件存放在Linux系统的 <code>/lib/systemd/system/</code> 路径下。</p><p>我们可以在我们的项目下存放该 <code>app.service</code> 文件，类似于以下目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;</span><br><span class="line">&#x2F;src</span><br><span class="line">&#x2F;src&#x2F;main</span><br><span class="line">&#x2F;src&#x2F;test</span><br><span class="line">&#x2F;pom.xml</span><br><span class="line">&#x2F;app.service</span><br></pre></td></tr></table></figure><p>然后在Linux系统中的项目路径下，可以通过 <code>ln</code> 把 <code>app.service</code> 文件链接到 <code>/lib/systemd/system/</code> 路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project-dir</span><br><span class="line">ln -s app.service /lib/systemd/system/</span><br><span class="line"><span class="comment"># 或者 ln -s app.service /lib/systemd/system/app.service</span></span><br><span class="line"><span class="comment"># 重新加载 service</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 然后就可以使用Linux的系统服务管理软件来启动运行我们的 SpringBoot 应用了</span></span><br></pre></td></tr></table></figure><p>接下来我们就可以使用 <code>systemctl</code> 来启动我们的 <code>SpringBoot</code> 应用了</p><ul><li><code>systemctl start app.service</code> 启动应用</li><li><code>systemctl status app.service</code> 查看应用启动状态</li><li><code>systemctl restart app.service</code> 重启应用</li><li><code>systemctl stop app.service</code> 停止应用</li></ul><p>或者使用 <code>service</code> 命令来启动我们的 <code>SpringBoot</code> 应用</p><ul><li><code>service app.service start</code> 启动应用</li><li><code>service app.service status</code> 查看应用启动状态</li><li><code>service app.service restart</code> 重启应用</li><li><code>service app.service stop</code> 停止应用</li></ul><h2 id="app-service-解读"><a href="#app-service-解读" class="headerlink" title="app.service 解读"></a><code>app.service</code> 解读</h2><p>以下使用 <code>单元</code> 来表示一个系统服务 <code>service</code> </p><ul><li><code>After=network.target</code> 在网卡启动之后启动当前单元</li><li><code>Requisite=</code> 必须在一个单元启动成功后才启动当前单元</li><li><code>Restart=on-failure</code> 在异常退出的时候重新启动单元</li><li><code>RestartSec=30s</code> 重启单元前暂停的时间</li><li><code>StandardOutput=null</code> 关闭单元的标准输出，实际上也就是抛弃 <code>ExecStart</code> 命令中在控制台产生的输出、日志记录</li><li><code>WorkingDirectory=/application/</code> 设置这个单元的工作路径，默认工作在 <code>/</code> 路径下，设置为存放 <code>app.jar</code> 的路径，这样可以使 <code>SpringBoot</code> 应用识别到路径下的配置文件并应用到运行环境中</li><li><code>ExecStart=/usr/bin/java -jar /application/app.jar</code> 启动 <code>app.jar</code> 项目，直接使用 <code>java</code> 命令来启动，也不用把其放到后台进程中运行</li></ul><p>其实还隐含了以下 <code>[Service]</code> 配置，但是并不需要我们进行特殊的配置也能产生相应的作用：</p><ul><li><code>ExecRestart=</code> 重启单元时执行的重启应用命令，可以不配置，系统会自动先 <code>stop</code> 再 <code>start</code></li><li><code>ExecStop=</code> 停止单元时执行的停止应用命令，可以不配置，系统会自动 <code>kill</code> 掉当前单元中 <code>ExecStart</code> 运行的进程</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;app-jar-的启动&quot;&gt;&lt;a href=&quot;#app-jar-的启动&quot; class=&quot;headerlink&quot; title=&quot;app.jar 的启动&quot;&gt;&lt;/a&gt;&lt;code&gt;app.jar&lt;/code&gt; 的启动&lt;/h2&gt;&lt;p&gt;在服务器上启动项目时最简单的启动项目方法是直接执行 &lt;code&gt;java -jar app.jar&lt;/code&gt; 命令，或者使用 &lt;code&gt;nohup&lt;/code&gt; 进入到后台运行 &lt;code&gt;nohup java -jar app.jar &amp;amp;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是当我们重新部署、重启项目时会比较麻烦，我们需要通过 &lt;code&gt;ps -ef|grep app.jar&lt;/code&gt; 来找到我们项目执行时的进程ID &lt;code&gt;PID&lt;/code&gt; ，然后再执行 &lt;code&gt;kill -9 $PID&lt;/code&gt; 来杀掉当前正在运行的项目，之后再重新运行项目。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ventoy -- 新一代多系统启动U盘解决方案</title>
    <link href="https://houkunlin.gitee.io/2020/10/10/ventoy/"/>
    <id>https://houkunlin.gitee.io/2020/10/10/ventoy/</id>
    <published>2020-10-10T01:44:50.000Z</published>
    <updated>2020-10-10T01:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前第一次用的PE是老毛桃，后来换了微PE，这个 <a href="https://www.ventoy.net/cn/index.html">Ventoy</a> 还是第一次听说，并且是在抖音上面刷到的。迫不及待的试了一下。</p><p>据官方说有以下特性：</p><ul><li>100% 开源 <a href="https://www.ventoy.net/cn/doc_license.html">(许可证)</a></li><li>使用简单 <a href="https://www.ventoy.net/cn/doc_start.html">(使用说明)</a></li><li>快速 (拷贝文件有多快就有多快)</li><li>直接从 ISO/WIM/IMG/VHD(x)/EFI 文件启动，无需解开</li><li>无差异支持Legacy + UEFI 模式</li><li>UEFI 模式支持安全启动 (Secure Boot) (1.0.07版本开始) <a href="https://www.ventoy.net/cn/doc_secure.html">说明</a></li><li>支持持久化 (1.0.11版本开始) <a href="https://www.ventoy.net/cn/plugin_persistence.html">说明</a></li><li>支持MBR和GPT分区格式(1.0.15+)</li><li>支持自动安装部署(1.0.09+) <a href="https://www.ventoy.net/cn/plugin_autoinstall.html">说明</a></li><li>支持超过4GB的ISO文件</li><li>保留ISO原始的启动菜单风格(Legacy &amp; UEFI)</li><li>支持大部分常见操作系统, 已测试550+ 个ISO文件</li><li>不仅仅是启动，而是完整的安装过程</li><li>ISO文件支持列表模式或目录树模式显示 <a href="https://www.ventoy.net/cn/doc_treeview.html">说明</a></li><li>提出 “Ventoy Compatible” 概念</li><li>支持插件扩展</li><li>启动过程中支持U盘设置写保护</li><li>不影响U盘日常普通使用</li><li>版本升级时数据不会丢失</li><li>无需跟随操作系统升级而升级Ventoy</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;以前第一次用的PE是老毛桃，后来换了微PE，这个 &lt;a href=&quot;https://www.ventoy.net/cn/index.html&quot;&gt;Ventoy&lt;/a&gt; 还是第一次听说，并且是在抖音上面刷到的。迫不及待的试了一下。&lt;/p&gt;
&lt;p&gt;据官方说有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100% 开源 &lt;a href=&quot;https://www.ventoy.net/cn/doc_license.html&quot;&gt;(许可证)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用简单 &lt;a href=&quot;https://www.ventoy.net/cn/doc_start.html&quot;&gt;(使用说明)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;快速 (拷贝文件有多快就有多快)&lt;/li&gt;
&lt;li&gt;直接从 ISO/WIM/IMG/VHD(x)/EFI 文件启动，无需解开&lt;/li&gt;
&lt;li&gt;无差异支持Legacy + UEFI 模式&lt;/li&gt;
&lt;li&gt;UEFI 模式支持安全启动 (Secure Boot) (1.0.07版本开始) &lt;a href=&quot;https://www.ventoy.net/cn/doc_secure.html&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持持久化 (1.0.11版本开始) &lt;a href=&quot;https://www.ventoy.net/cn/plugin_persistence.html&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持MBR和GPT分区格式(1.0.15+)&lt;/li&gt;
&lt;li&gt;支持自动安装部署(1.0.09+) &lt;a href=&quot;https://www.ventoy.net/cn/plugin_autoinstall.html&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持超过4GB的ISO文件&lt;/li&gt;
&lt;li&gt;保留ISO原始的启动菜单风格(Legacy &amp;amp; UEFI)&lt;/li&gt;
&lt;li&gt;支持大部分常见操作系统, 已测试550+ 个ISO文件&lt;/li&gt;
&lt;li&gt;不仅仅是启动，而是完整的安装过程&lt;/li&gt;
&lt;li&gt;ISO文件支持列表模式或目录树模式显示 &lt;a href=&quot;https://www.ventoy.net/cn/doc_treeview.html&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;提出 “Ventoy Compatible” 概念&lt;/li&gt;
&lt;li&gt;支持插件扩展&lt;/li&gt;
&lt;li&gt;启动过程中支持U盘设置写保护&lt;/li&gt;
&lt;li&gt;不影响U盘日常普通使用&lt;/li&gt;
&lt;li&gt;版本升级时数据不会丢失&lt;/li&gt;
&lt;li&gt;无需跟随操作系统升级而升级Ventoy&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一些Shell命令使用</title>
    <link href="https://houkunlin.gitee.io/2020/09/19/common-shell/"/>
    <id>https://houkunlin.gitee.io/2020/09/19/common-shell/</id>
    <published>2020-09-19T06:49:54.000Z</published>
    <updated>2020-09-19T06:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="acme-sh"><a href="#acme-sh" class="headerlink" title="acme.sh"></a>acme.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 acme.sh</span></span><br><span class="line">curl  https://get.acme.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露阿里云DNS的KEY，请到阿里云控制台申请</span></span><br><span class="line"><span class="built_in">export</span> Ali_Key=<span class="string">&quot;***&quot;</span></span><br><span class="line"><span class="built_in">export</span> Ali_Secret=<span class="string">&quot;***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里云DNS验证域名来生成 SSL 证书，acme.sh暂时无法为中文域名签发证书</span></span><br><span class="line">acme.sh --issue --dns dns_ali -d houkunlin.cn -d *.houkunlin.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 acme.sh 生成 SSL 证书后，把 SSL 证书安装到 Nginx</span></span><br><span class="line">acme.sh --installcert -d houkunlin.cn --key-file /etc/nginx/houkunlin.cn.key --fullchain-file /etc/nginx/houkunlin.cn.cer --reloadcmd <span class="string">&quot;systemctl force-reload nginx&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;acme-sh&quot;&gt;&lt;a href=&quot;#acme-sh&quot; class=&quot;headerlink&quot; title=&quot;acme.sh&quot;&gt;&lt;/a&gt;acme.sh&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装 acme.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl  https://get.acme.sh | sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 暴露阿里云DNS的KEY，请到阿里云控制台申请&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; Ali_Key=&lt;span class=&quot;string&quot;&gt;&amp;quot;***&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; Ali_Secret=&lt;span class=&quot;string&quot;&gt;&amp;quot;***&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用阿里云DNS验证域名来生成 SSL 证书，acme.sh暂时无法为中文域名签发证书&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;acme.sh --issue --dns dns_ali -d houkunlin.cn -d *.houkunlin.cn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 acme.sh 生成 SSL 证书后，把 SSL 证书安装到 Nginx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;acme.sh --installcert -d houkunlin.cn --key-file /etc/nginx/houkunlin.cn.key --fullchain-file /etc/nginx/houkunlin.cn.cer --reloadcmd &lt;span class=&quot;string&quot;&gt;&amp;quot;systemctl force-reload nginx&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</summary>
    
    
    
    
    <category term="shell" scheme="https://houkunlin.gitee.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>一些Docker镜像使用</title>
    <link href="https://houkunlin.gitee.io/2020/09/19/common-docker-image-run/"/>
    <id>https://houkunlin.gitee.io/2020/09/19/common-docker-image-run/</id>
    <published>2020-09-19T06:32:45.000Z</published>
    <updated>2020-09-19T06:32:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name portainer -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer/data:/data -e TZ=Asia/Shanghai portainer/portainer</span><br></pre></td></tr></table></figure><h3 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无WEB管理界面</span></span><br><span class="line">docker run --name rabbitmq -p 4369:4369 -p 5671:5671 -p 5672:5672 -p 25672:25672 -e TZ=Asia/Shanghai -d rabbitmq</span><br><span class="line"><span class="comment"># 有WEB管理界面</span></span><br><span class="line">docker run --name rabbitmq -p 4369:4369 -p 5671:5671 -p 5672:5672 -p 15672:15672 -e TZ=Asia/Shanghai -d rabbitmq:3.8.7-management</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name mysql8 -p 3306:3306 -v /opt/mysql/conf:/etc/mysql/conf.d -v /opt/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e TZ=Asia/Shanghai -d mysql:8.0 --innodb-use-native-aio=0</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name redis -p 6379:6379 -e TZ=Asia/Shanghai -d redis</span><br></pre></td></tr></table></figure><h3 id="ipsec-vpn-server"><a href="#ipsec-vpn-server" class="headerlink" title="ipsec-vpn-server"></a>ipsec-vpn-server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里有个 vpn.env 环境变量文件请自行配置，请自行查阅相关文档</span></span><br><span class="line">docker run --name ipsec-vpn-server --env-file ./vpn.env -p 500:500/udp -p 4500:4500/udp -d --privileged hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure><h3 id="Teamcity"><a href="#Teamcity" class="headerlink" title="Teamcity"></a>Teamcity</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run -it --name teamcity-server-instance -v /opt/teamcity/data:/data/teamcity_server/datadir -v /opt/teamcity/logs:/opt/teamcity/logs -p 8111:8111 jetbrains/teamcity-server</span><br></pre></td></tr></table></figure><h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name shadowsocks --restart always -e PASSWORD=密码 -p 8388:8388 -p 8388:8388/udp -d shadowsocks/shadowsocks-libev</span><br></pre></td></tr></table></figure><h3 id="Squid-代理服务器"><a href="#Squid-代理服务器" class="headerlink" title="Squid 代理服务器"></a>Squid 代理服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name squid --restart always -p 3128:3128 -p 3128:3128/udp -v /opt/squid/cache/:/var/spool/squid -v /opt/squid/squid.conf:/etc/squid/squid.conf -d sameersbn/squid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要在正在运行的实例上重新加载Squid配置，可以将HUP信号发送到容器。 https://hub.docker.com/r/sameersbn/squid</span></span><br><span class="line"><span class="comment"># docker kill -s HUP squid</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Portainer&quot;&gt;&lt;a href=&quot;#Portainer&quot; class=&quot;headerlink&quot; title=&quot;Portainer&quot;&gt;&lt;/a&gt;Portainer&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --name portainer -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer/data:/data -e TZ=Asia/Shanghai portainer/portainer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&quot;Rabbitmq&quot;&gt;&lt;a href=&quot;#Rabbitmq&quot; class=&quot;headerlink&quot; title=&quot;Rabbitmq&quot;&gt;&lt;/a&gt;Rabbitmq&lt;/h3&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://houkunlin.gitee.io/tags/docker/"/>
    
  </entry>
  
</feed>
