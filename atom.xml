<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>侯坤林博客</title>
  
  <subtitle>用双手改变世界，梦想成就未来。</subtitle>
  <link href="https://houkunlin.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://houkunlin.gitee.io/"/>
  <updated>2023-02-09T02:35:57.000Z</updated>
  <id>https://houkunlin.gitee.io/</id>
  
  <author>
    <name>侯坤林</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于柳州市市区摩托车限行区域相关信息</title>
    <link href="https://houkunlin.gitee.io/2023/02/09/liuzhou-moto-disable-run-area/"/>
    <id>https://houkunlin.gitee.io/2023/02/09/liuzhou-moto-disable-run-area/</id>
    <published>2023-02-09T02:35:57.000Z</published>
    <updated>2023-02-09T02:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>柳州市区号牌摩托车是准许在柳州市区道路通行的，可以<strong>在官塘大桥通行，但不能驶入莲花隧道</strong>。</p><p>为了保障群众的出行安全，减少交通事故的发生，及时消除交通安全隐患，根据柳州市道路的交通特点，目前在</p><ul><li>莲花隧道</li><li>三门江隧道</li><li>文昌下穿通道</li><li>广雅下穿通道</li><li>文林立交桥</li><li>五叉路口立交桥</li></ul><p>等下穿通道、隧道和立交桥梁设置了“<strong>禁止摩托车和非机动车驶入</strong>”的<strong>交通标志</strong>禁止摩托车和非机动车通行，请摩托车和非机动车驾驶员在进入禁行路段前提前观察是否设置相关的禁令标志，按照交通信号通行禁行。</p><p><img src="assets/chrome_hcHENXGjid.png" alt="几个隧道的位置"></p><p>根据2003年<strong>柳州市公安局</strong>、<strong>柳州市交通局</strong>、<strong>柳州市建设委员会</strong>、<strong>柳州市环保局</strong>、<strong>柳州市市容管理局</strong>、<strong>柳州市工商局</strong>六部门联合发布的《关于严格控制市区摩托车总量限制行驶线路进一步改善我市道路交通秩序的通告》，以下简称 <strong>《通告》</strong>，以及上述六部门联合发布的《关于严格控制市区摩托车总量和行驶进一步改善我市道路交通秩序的补充通告》，以下简称 <strong>《补充通告》</strong>。</p><p><strong>《通告》</strong> 中：自2003年12月1日起，<strong>所有非桂B号牌以及市辖六县桂B号牌的摩托车（不含军警号牌摩托车）</strong> 禁止进入市区</p><ul><li>东环路</li><li>燎原路</li><li>柳石路</li><li>柳邕东路</li><li>城站路</li><li>南站路</li><li>鹅山路</li><li>西环路</li><li>潭中西路</li><li>北雀路</li><li>胜利路</li><li>河东大桥城区环线区域内的道路（不含上述道路）</li></ul><p>的有关规定，目前，外地牌照摩托车在柳州市区上路行驶的，需遵守以上相关规定。</p><p><img src="assets/chrome_imNliEcWVb.png" alt="大致禁止范围"></p><p><strong>《补充通告》</strong> 中：2004年3月1日起，<strong>所有摩托车（不含军警号车牌摩托车）每日8时至20时</strong> 不得进入市中心区“三桥一路”，即</p><ul><li>柳江大桥</li><li>文惠桥</li><li>红光桥</li><li>龙城路</li></ul><p>的有关限行措施，即为柳州市限摩区域，驾驶三江县登记上牌的摩托车在柳州市市区道路行驶，请按照上述规定通行。</p><p><img src="assets/chrome_5f5L18ZWqn.png" alt="“三桥一路”的位置"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>军警号车牌摩托车不受限</strong></p><p>所有摩托车禁行（<strong>交通禁令标志</strong>）</p><ul><li>莲花隧道</li><li>三门江隧道</li><li>文昌下穿通道</li><li>广雅下穿通道</li><li>文林立交桥</li><li>五叉路口立交桥</li></ul><p>所有非桂B号牌以及市辖六县桂B号牌禁行（<strong>《通告》</strong>）</p><ul><li>东环路</li><li>燎原路</li><li>柳石路</li><li>柳邕东路</li><li>城站路</li><li>南站路</li><li>鹅山路</li><li>西环路</li><li>潭中西路</li><li>北雀路</li><li>胜利路</li><li>河东大桥城区环线区域内的道路（不含上述道路）</li></ul><p>所有摩托车每日8时至20时限行不得驶入（<strong>《补充通告》</strong>）</p><ul><li>柳江大桥</li><li>文惠桥</li><li>红光桥</li><li>龙城路</li></ul><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><a href="https://lcsmy.yun.liuzhou.gov.cn/mailbox-phone/letterdetails?id=65164">柳州市牌照的摩托车能过莲花隧道吗？</a></li><li><a href="https://lcsmy.yun.liuzhou.gov.cn/mailbox-phone/letterdetails?id=68678">摩托车禁行区域</a></li><li><a href="https://lcsmy.yun.liuzhou.gov.cn/mailbox-phone/letterdetails?id=35209">三江县牌照摩托车能开进柳州市区么？？</a></li><li><a href="https://lcsmy.yun.liuzhou.gov.cn/mailbox-phone/letterdetails?id=20931">想咨询一下关于摩托车上牌，准入证，禁摩区域</a> </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;柳州市区号牌摩托车是准许在柳州市区道路通行的，可以&lt;strong&gt;在官塘大桥通行，但不能驶入莲花隧道&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了保障群众的出行安全，减少交通事故的发生，及时消除交通安全隐患，根据柳州市道路的交通特点，目前在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;莲花隧道&lt;/li&gt;
&lt;li&gt;三门江隧道&lt;/li&gt;
&lt;li&gt;文昌下穿通道&lt;/li&gt;
&lt;li&gt;广雅下穿通道&lt;/li&gt;
&lt;li&gt;文林立交桥&lt;/li&gt;
&lt;li&gt;五叉路口立交桥&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Matrix Synapse 服务安装(Docker)</title>
    <link href="https://houkunlin.gitee.io/2023/02/09/matrix-synapse-install-for-docker/"/>
    <id>https://houkunlin.gitee.io/2023/02/09/matrix-synapse-install-for-docker/</id>
    <published>2023-02-09T02:29:35.000Z</published>
    <updated>2023-02-09T02:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建一个工作目录"><a href="#1-创建一个工作目录" class="headerlink" title="1. 创建一个工作目录"></a>1. 创建一个工作目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/matrix-synapse-data/</span><br></pre></td></tr></table></figure><h2 id="2-生成-Synapse-配置文件"><a href="#2-生成-Synapse-配置文件" class="headerlink" title="2. 生成 Synapse 配置文件"></a>2. 生成 Synapse 配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -v /var/matrix-synapse-data/:/data/ -e SYNAPSE_SERVER_NAME=matrix.houkunlin.cn -e SYNAPSE_REPORT_STATS=no matrixdotorg/synapse:latest generate</span><br></pre></td></tr></table></figure><ul><li><code>-v /var/matrix-synapse-data/:/data/</code> 映射的具体路径，按需修改</li><li><code>-e SYNAPSE_SERVER_NAME=matrix.houkunlin.cn</code> 域名</li><li><code>-e SYNAPSE_REPORT_STATS=no</code> 是否发送匿名统计数据</li></ul><h3 id="3-安装运行"><a href="#3-安装运行" class="headerlink" title="3. 安装运行"></a>3. 安装运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name synapse -v /var/matrix-synapse-data/:/data/ -p 8008:8008 -p 8009:8009 -p 8448:8448 matrixdotorg/synapse:latest</span><br></pre></td></tr></table></figure><h3 id="4-创建用户"><a href="#4-创建用户" class="headerlink" title="4. 创建用户"></a>4. 创建用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it synapse register_new_matrix_user http://localhost:8008 -c /data/homeserver.yaml -a -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><h2 id="5-安装管理面板"><a href="#5-安装管理面板" class="headerlink" title="5. 安装管理面板"></a>5. 安装管理面板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 12234:80 awesometechnologies/synapse-admin</span><br></pre></td></tr></table></figure><h2 id="6-配置用户可注册"><a href="#6-配置用户可注册" class="headerlink" title="6. 配置用户可注册"></a>6. 配置用户可注册</h2><p>编辑 <code>/var/matrix-synapse-data/homeserver.yaml</code> 增加两行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enable_registration:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enable_registration_without_verification:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>更多的配置请查阅 <a href="https://matrix-org.github.io/synapse/latest/welcome_and_overview.html">官方文档</a></p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><p>Element App 和 <a href="https://app.element.io/">Element Web</a> 版需要启用 HTTPS 功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">        default upgrade;</span><br><span class="line">        &#39;&#39;      close;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line"></span><br><span class="line">    server_name matrix.houkunlin.cn;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_tickets on;</span><br><span class="line">    #按照这个协议配置</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    #按照这个套件配置</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;</span><br><span class="line">    #指定当使用 SSLv3 和 TLS 协议时，服务器密码应优先于客户端密码。</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    #启用或禁用服务器对 OCSP 响应的验证。</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line"></span><br><span class="line">    #HSTS策略, 一年：31536000 ，180天：15552000，30天：2592000</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age&#x3D;15552000; includeSubDomains; preload&quot; always;</span><br><span class="line"></span><br><span class="line">    #防XSS攻击</span><br><span class="line">    add_header X-Xss-Protection 1;</span><br><span class="line"></span><br><span class="line">    ssl_certificate https&#x2F;houkunlin.cn&#x2F;domain.cer;</span><br><span class="line">    ssl_certificate_key https&#x2F;houkunlin.cn&#x2F;domain.key;</span><br><span class="line"></span><br><span class="line">    ignore_invalid_headers off;</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    proxy_read_timeout 600s;</span><br><span class="line"></span><br><span class="line">    error_page 403 404 500 502 503 504 &#x2F;index.html;</span><br><span class="line"></span><br><span class="line">    # 其他的所有请求都转发给后端服务器</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass                          http:&#x2F;&#x2F;127.0.0.1:8008;</span><br><span class="line">        proxy_set_header Host               $http_host;</span><br><span class="line">        proxy_set_header Upgrade            $http_upgrade;</span><br><span class="line">        proxy_set_header Connection         $connection_upgrade;</span><br><span class="line">        proxy_set_header X-Proxy-Host       $proxy_host;</span><br><span class="line">        proxy_set_header X-Forwarded-Host   $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host:$server_port;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Real-IP          $remote_addr;</span><br><span class="line">        proxy_ssl_protocols                 TLSv1.2 TLSv1.3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-创建一个工作目录&quot;&gt;&lt;a href=&quot;#1-创建一个工作目录&quot; class=&quot;headerlink&quot; title=&quot;1. 创建一个工作目录&quot;&gt;&lt;/a&gt;1. 创建一个工作目录&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p /var/matrix-synapse-data/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;2-生成-Synapse-配置文件&quot;&gt;&lt;a href=&quot;#2-生成-Synapse-配置文件&quot; class=&quot;headerlink&quot; title=&quot;2. 生成 Synapse 配置文件&quot;&gt;&lt;/a&gt;2. 生成 Synapse 配置文件&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>把有公网IP的NAS安全的暴露在公网环境</title>
    <link href="https://houkunlin.gitee.io/2023/01/19/nas-ip/"/>
    <id>https://houkunlin.gitee.io/2023/01/19/nas-ip/</id>
    <published>2023-01-19T01:53:27.000Z</published>
    <updated>2023-01-19T01:53:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>前期准备条件：</p><ul><li>有一个域名（对外提供访问服务）</li><li>有一个公网IP，固定公网IP或者动态公网IP都行</li><li>拨号路由器支持端口映射</li><li>路由器或者NAS能够设置免费的DDNS动态域名解析</li><li>利用Cloudflare隐藏NAS</li></ul><h2 id="前期分析说明"><a href="#前期分析说明" class="headerlink" title="前期分析说明"></a>前期分析说明</h2><h3 id="把NAS直接暴露到公网的危险性"><a href="#把NAS直接暴露到公网的危险性" class="headerlink" title="把NAS直接暴露到公网的危险性"></a>把NAS直接暴露到公网的危险性</h3><p>没有任何防护的设备暴露到公网是非常危险的，将会面临来自互联网的威胁，其中包括DDOS攻击、黑客入侵、暴力破解等不限于以上手段的任何威胁。</p><p>但是有时候我们的NAS往往又需要在公网提供服务，此时我们又该如何给NAS增加一层安全防护呢？</p><h3 id="防火墙安全防护"><a href="#防火墙安全防护" class="headerlink" title="防火墙安全防护"></a>防火墙安全防护</h3><p>虽然NAS有防火墙功能，但是我认为NAS的防火墙不够强大到足以面对来自互联网的恶意请求，特别是类似DDOS类的攻击。</p><p>现在所有的公有云都有专门的安全防火墙系统来保护后端服务器，但我们明显没有这种能力来为NAS部署专门的防火墙系统，这不仅费用非常昂贵，还增加了维护难度和维护成本。</p><p>那么如何在低成本情况下保护NAS在互联网的安全呢？</p><h3 id="内网穿透（NAS不需要公网IP）"><a href="#内网穿透（NAS不需要公网IP）" class="headerlink" title="内网穿透（NAS不需要公网IP）"></a>内网穿透（NAS不需要公网IP）</h3><p>现在互联网公有云都有专门的防火墙来给服务器提供一定程度上的安全防护，我们可以租用一台公网服务器来做中转服务，所有的流量仅通过公网服务器，再由公网服务器转发到我们的NAS。</p><p>此方案的可以有效利用云平台提供的防火墙功能来对服务进行一定的防护，但是我们还是需要维护中转服务器的部分安全问题，以及要支付租用云服务器的费用和带宽费用，实际上也存在一定量的成本。</p><p>那么有没有成本更低的方案呢？</p><p><img src="assets/image-20230119114835756.png" alt="image-20230119114835756"></p><h3 id="借助群晖-QuickConnect-提供的服务"><a href="#借助群晖-QuickConnect-提供的服务" class="headerlink" title="借助群晖 QuickConnect 提供的服务"></a>借助群晖 QuickConnect 提供的服务</h3><p>群晖自带了一个免费的 QuickConnect 服务，但是此服务只能访问我们的 NAS 管理端口（默认5000/5001），无法访问我们的 WebStation 服务端口。</p><p>这种方案可以说毫无成本，但是功能有限，无法转发到其他的端口。</p><p><img src="assets/image-20230119114757149.png" alt="image-20230119114757149"></p><h3 id="隐藏在-Cloudflare-背后（NAS需要公网IP）"><a href="#隐藏在-Cloudflare-背后（NAS需要公网IP）" class="headerlink" title="隐藏在 Cloudflare 背后（NAS需要公网IP）"></a>隐藏在 Cloudflare 背后（NAS需要公网IP）</h3><p>我们可以利用 Cloudflare 平台来保护我们的NAS服务。</p><p>使用 Cloudflare 来负责我们对外域名的解析服务，然后设置CNAME记录解析到DDNS域名上，这样当我们访问对外域名时，Cloudflare 服务会把请求转发到我们的DDNS域名上，从而把请求转发到NAS上。</p><p><img src="assets/image-20230119114715413.png" alt="image-20230119114715413"></p><p>虽然说我们的NAS是暴露在了公网，但是用户并不是直接访问NAS，而是访问了Cloudflare服务器，由Cloudflare提供中转，此时NAS对用户是不可见的，在茫茫的互联网中，很难找到隐藏在Cloudflare背后的具体服务器，因此这种方式相对来说是比较安全的。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="设备清单"><a href="#设备清单" class="headerlink" title="设备清单"></a>设备清单</h3><p><strong>路由器</strong>：TL-R489GP-AC</p><p><strong>动态DNS域名</strong>：houkunlin.tpddns.cn</p><p><strong>对外域名</strong>：doomsday.city</p><p><strong>NAS</strong>：群晖D920+</p><p><strong>公网IP</strong>：使用公网IP请咨询自己宽带运营商</p><p><strong>NAS 局域网IP</strong>：192.168.0.5</p><p><strong>NAS WebStation HTTP 内网端口</strong>：80</p><p><strong>NAS WebStation HTTPs 内网端口</strong>：443</p><p><strong>NAS WebStation HTTP 公网端口</strong>：2095</p><p><strong>NAS WebStation HTTPs 公网端口</strong>：2096</p><p>网络结构图：</p><p><img src="assets/image-20230119114134622.png" alt="image-20230119114134622"></p><h3 id="DDNS动态域名解析配置"><a href="#DDNS动态域名解析配置" class="headerlink" title="DDNS动态域名解析配置"></a>DDNS动态域名解析配置</h3><p>以下二选一即可</p><h4 id="路由器配置DDNS"><a href="#路由器配置DDNS" class="headerlink" title="路由器配置DDNS"></a>路由器配置DDNS</h4><p>在路由器的【高级功能】》【动态DNS】功能下管理动态DNS信息，以下是我的配置截图：</p><p><img src="assets/image-20230119105133522.png" alt="image-20230119105133522"></p><h4 id="群晖NAS设置DDNS"><a href="#群晖NAS设置DDNS" class="headerlink" title="群晖NAS设置DDNS"></a>群晖NAS设置DDNS</h4><p>在NAS的【控制面板】》【外部访问】》【DDNS】功能下管理动态DNS信息，NAS提供的DDNS功能更丰富，可以有更多的选择性。</p><p><img src="assets/image-20230119105326140.png" alt="image-20230119105326140"></p><h3 id="配置端口映射"><a href="#配置端口映射" class="headerlink" title="配置端口映射"></a>配置端口映射</h3><p>端口映射功能主要把公网的端口与NAS的端口关联起来，访问这个IP的公网端口时就相当于访问NAS的某个端口。</p><p>如果我们的公网IP没有80/443端口的权限，则需要映射2095和2096端口到内网的NAS上，可参考 <a href="https://developers.cloudflare.com/fundamentals/get-started/reference/network-ports/">Cloudflare网络端口</a></p><p>映射关系表如下：</p><table><thead><tr><th>公网端口</th><th>局域网端口</th><th>局域网IP</th></tr></thead><tbody><tr><td>2095</td><td>80</td><td>192.168.0.5</td></tr><tr><td>2096</td><td>443</td><td>192.168.0.5</td></tr><tr><td>80</td><td>80</td><td>192.168.0.5</td></tr><tr><td>443</td><td>443</td><td>192.168.0.5</td></tr></tbody></table><p>可能由于我们的公网IP限制，公网的80/443可能会无法访问</p><h4 id="路由器设置"><a href="#路由器设置" class="headerlink" title="路由器设置"></a>路由器设置</h4><p>仅在使用路由器拨号的场景有效。</p><p>在路由器的【高级功能】》【虚拟服务器】功能中可以管理路由器的端口映射关系，</p><p><img src="assets/image-20230119110007965.png" alt="image-20230119110007965"></p><p>在这里我们需要按照前面的表内容添加两条配置记录（2095/2096）。</p><h3 id="Cloudflare-配置"><a href="#Cloudflare-配置" class="headerlink" title="Cloudflare 配置"></a>Cloudflare 配置</h3><h4 id="绑定对外域名"><a href="#绑定对外域名" class="headerlink" title="绑定对外域名"></a>绑定对外域名</h4><p>登录 Cloudflare 后在【网站】功能页面增加一个网站：</p><p><img src="assets/image-20230119111042042.png" alt="image-20230119111042042"></p><p>然后把我们的对外域名填写上去：</p><p><img src="assets/image-20230119111137873.png" alt="image-20230119111137873"></p><p>填写上去后需要去我们的域名原来的注册商的管理平台更改DNS解析服务器为 Cloudflare 提供的服务器：</p><p><img src="assets/image-20230119111429527.png" alt="image-20230119111429527"></p><p>等待 Cloudflare 验证成功后就可以在 Cloudflare 上管理我们的域名了：</p><p><img src="assets/image-20230119111539806.png" alt="image-20230119111539806"></p><h4 id="配置CNAME解析"><a href="#配置CNAME解析" class="headerlink" title="配置CNAME解析"></a>配置CNAME解析</h4><p>进入到我们的域名管理页面中，在左侧的【DNS】》【记录】中管理域名的DNS记录信息，在此添加一条DNS记录：</p><p><img src="assets/image-20230119111854253.png" alt="image-20230119111854253"></p><p>在这里测试中我把 test 的 CNAME 值配置成 houkunlin.tpddns.cn 域名，下表举例几个访问关系：</p><table><thead><tr><th>访问公网地址</th><th>实际转发到内网地址</th></tr></thead><tbody><tr><td><a href="http://test.doomsday.city/">http://test.doomsday.city:80</a></td><td><a href="http://houkunlin.tpddns.cn/">http://houkunlin.tpddns.cn:80</a></td></tr><tr><td><a href="https://test.doomsday.city/">https://test.doomsday.city:443</a></td><td><a href="https://houkunlin.tpddns.cn/">https://houkunlin.tpddns.cn:443</a></td></tr><tr><td><a href="http://test.doomsday.city:2095/">http://test.doomsday.city:2095</a></td><td><a href="http://houkunlin.tpddns.cn:2095/">http://houkunlin.tpddns.cn:2095</a></td></tr><tr><td><a href="https://test.doomsday.city:2096/">https://test.doomsday.city:2096</a></td><td><a href="https://houkunlin.tpddns.cn:2096/">https://houkunlin.tpddns.cn:2096</a></td></tr></tbody></table><p>可能由于公网IP端口限制原因，80/443端口无法访问，此时仅有 <code>http://test.doomsday.city:2095</code> 和 <code>https://test.doomsday.city:2096</code> 正常，但是我们往往很难记住端口，那么我们可以使用页面规则把 <code>http://test.doomsday.city:80</code> 和 <code>https://test.doomsday.city:443</code> 自动重定向到 2095/2096 端口，虽然实际依旧是访问了 2095/2096 端口，但是我们可以不用记住它，由 Cloudflare 自动跳转，当某一天端口号变动的时候，只需要修改配置就行了。</p><h4 id="配置页面规则"><a href="#配置页面规则" class="headerlink" title="配置页面规则"></a>配置页面规则</h4><p>进入到我们的域名管理页面中，在左侧的【规则】》【页面规则】中管理域名的页面规则配置，在这里我们需要新增两条配置：</p><p><img src="assets/image-20230119113115955.png" alt="image-20230119113115955"></p><p><img src="assets/image-20230119113157440.png" alt="image-20230119113157440"></p><p><img src="assets/image-20230119113323787.png" alt="image-20230119113323787"></p><p>第一条记录：把 <code>test.doomsday.city:80/*</code> 重定向到 <code>https://test.doomsday.city:2096/$1</code></p><p>第二条记录：把 <code>test.doomsday.city:443/*</code> 重定向到 <code>https://test.doomsday.city:2096/$1</code> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前期准备条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个域名（对外提供访问服务）&lt;/li&gt;
&lt;li&gt;有一个公网IP，固定公网IP或者动态公网IP都行&lt;/li&gt;
&lt;li&gt;拨号路由器支持端口映射&lt;/li&gt;
&lt;li&gt;路由器或者NAS能够设置免费的DDNS动态域名解析&lt;/li&gt;
&lt;li&gt;利用Cloudflare隐藏NAS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前期分析说明&quot;&gt;&lt;a href=&quot;#前期分析说明&quot; class=&quot;headerlink&quot; title=&quot;前期分析说明&quot;&gt;&lt;/a&gt;前期分析说明&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway跨域配置</title>
    <link href="https://houkunlin.gitee.io/2022/03/04/spring-cloud-gateway-cors/"/>
    <id>https://houkunlin.gitee.io/2022/03/04/spring-cloud-gateway-cors/</id>
    <published>2022-03-04T02:58:47.000Z</published>
    <updated>2022-03-04T02:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>先放一个可行的配置信息，后面再说过程。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="comment"># 一个全局默认的跨域配置，但是单独配置这个还是无法解决跨域问题</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOriginPatterns:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="comment"># 为了防止后端未配置跨域导致浏览器提示缺少跨域配置信息而请求失败，因此加上了默认的跨域Header配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Origin,</span> <span class="string">*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Methods,</span> <span class="string">*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Headers,</span> <span class="string">*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Credentials,</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 然后再对跨域Header配置做去重复处理，这样就能够保证跨域信息的完整度</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DedupeResponseHeader=Vary</span> <span class="string">Access-Control-Allow-Origin</span> <span class="string">Access-Control-Allow-Credentials,</span> <span class="string">RETAIN_FIRST</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最近在使用 Nginx 转发到 SpringCloudGateway 发现了跨域问题，SpringCloud是已经配置了跨域信息，但是手机端（uni-app）依旧无法请求成功，经过尝试在Nginx配置跨域头部同样不行，最后排查了很久，得出了以下结论：</p><p><strong>一、发送请求时出现问题</strong></p><p>问题描述：SpringCloudGateway对跨域做了校验（OPTIONS请求【后端使用了其他自定义Header，因此需要OPTIONS请求】），导致手机端那边测试中出现的接口403问题</p><p>解决方案：SpringCloudGateway配置跨域信息</p><p><strong>二、返回数据出现问题</strong></p><p>问题描述：解决了 OPTIONS 403 问题后 POST 提示跨域问题（经抓包实际后端有登录成功json返回），主要错误有两个，要么是存在多个 Origin 相关数据（MulitCorsOrigin），要么是缺少 Origin 相关数据（MissingCorsOrigin）；</p><p>解决方案：增加默认过滤器配置，过滤器先添加跨域头（补全补完整跨域信息）然后再对跨域头去重处理</p><p><strong>问题总结：</strong></p><p>第一个坑：对 SpringCloudGateway 转发特性不是非常了解导致的，以为 SpringCloudGateway 不会处理跨域配置，而是直接转发给后端实例，结果 Gateway 会处理 OPTIONS 跨域检查</p><p>第二个坑：对 SpringCloudGateway 配置不够了解导致的，Gateway 配置了跨域后 OPTIONS 200 但是 POST CORS 错误就是 Gateway 和 Nginx 两者配置冲突导致的（Nginx也配了跨域）</p><p><strong>冲突描述：</strong></p><p>一、Nginx 加了跨域，Gateway 不配置跨域，OPTIONS 未请求到后端实例，Gateway 提示跨域错误403</p><p>二、Nginx 加了跨域，Gateway 配置跨域，但，OPTIONS 请求到后端实例，导致多个跨域请求头浏览器报错（后端配了跨域参数）</p><p>三、Nginx 加了跨域，Gateway 的跨域配置也有一个 Access-Control-Allow-Origin 就导致浏览器报 MulitCorsOrigin 问题</p><p>四、Nginx 不加跨域，Gateway 的跨域配置有 Access-Control-Allow-Origin ，但是没有 Access-Control-Allow-Methods 就导致浏览器报 MissingCorsOrigin 问题</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先放一个可行的配置信息，后面再说过程。&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;cloud:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;gateway:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;globalcors:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 一个全局默认的跨域配置，但是单独配置这个还是无法解决跨域问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;cors-configurations:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&amp;#x27;[/**]&amp;#x27;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;allowedOriginPatterns:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;allowedHeaders:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;allowedMethods:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;allowCredentials:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;default-filters:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 为了防止后端未配置跨域导致浏览器提示缺少跨域配置信息而请求失败，因此加上了默认的跨域Header配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;AddResponseHeader=Access-Control-Allow-Origin,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;AddResponseHeader=Access-Control-Allow-Methods,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;AddResponseHeader=Access-Control-Allow-Headers,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;AddResponseHeader=Access-Control-Allow-Credentials,&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 然后再对跨域Header配置做去重复处理，这样就能够保证跨域信息的完整度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;DedupeResponseHeader=Vary&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Access-Control-Allow-Credentials,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;RETAIN_FIRST&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;最近在使用 Nginx 转发到 SpringCloudGateway 发现了跨域问题，SpringCloud是已经配置了跨域信息，但是手机端（uni-app）依旧无法请求成功，经过尝试在Nginx配置跨域头部同样不行，最后排查了很久，得出了以下结论：&lt;/p&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="https://houkunlin.gitee.io/tags/SpringBoot/"/>
    
    <category term="SpringCloud" scheme="https://houkunlin.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringBootJpa自定义ID主键策略注册到Hibernate默认策略列表中（自定义全局主键策略）</title>
    <link href="https://houkunlin.gitee.io/2022/03/04/spring-boot-jpa-id-strategy/"/>
    <id>https://houkunlin.gitee.io/2022/03/04/spring-boot-jpa-id-strategy/</id>
    <published>2022-03-04T02:55:46.000Z</published>
    <updated>2022-03-04T02:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/34731783/how-to-register-custom-identifiergenerator-in-hibernate-jpa-entitymanager">如何在Hibernate JPA EntityManager中注册自定义IdentifierGenerator？</a></p><p>在使用SpringBootJpa自定义主键策略的时候，通常需要使用三个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@javax</span>.persistence.Id</span><br><span class="line"><span class="meta">@javax</span>.persistence.GeneratedValue(generator = <span class="string">&quot;id&quot;</span>)</span><br><span class="line"><span class="meta">@org</span>.hibernate.annotations.GenericGenerator(name = <span class="string">&quot;id&quot;</span>, strategy = <span class="string">&quot;com.xxx.XXXIdentifierGenerator&quot;</span>)</span><br><span class="line"><span class="keyword">private</span> String id;</span><br></pre></td></tr></table></figure><p>此时的第三个注解 <code>@org.hibernate.annotations.GenericGenerator(name = &quot;id&quot;, strategy = &quot;com.xxx.xxx.XXX&quot;)</code> 的 <code>strategy</code> 参数需要写完整的对象包名信息。</p><p>实际上 Hibernate 中已经预设了一组策略可以提供使用，例如使用UUID作为主键，此时也是需要使用三个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@javax</span>.persistence.Id</span><br><span class="line"><span class="meta">@javax</span>.persistence.GeneratedValue(generator = <span class="string">&quot;system-uuid&quot;</span>)</span><br><span class="line"><span class="meta">@org</span>.hibernate.annotations.GenericGenerator(name = <span class="string">&quot;system-uuid&quot;</span>, strategy = <span class="string">&quot;uuid&quot;</span>)</span><br><span class="line"><span class="keyword">private</span> String id;</span><br></pre></td></tr></table></figure><blockquote><p>注：GeneratedValue 的 generator 参数需要与 GenericGenerator 的 name 参数保持一致</p></blockquote><p>这时候 <code>GenericGenerator</code> 的 <code>strategy</code> 参数只需要填写一个关键词就行了。</p><p>这是因为 Hibernate 在 DefaultIdentifierGeneratorFactory 中已经为我们预设了一组可以正常使用的策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultIdentifierGeneratorFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    register( <span class="string">&quot;uuid2&quot;</span>, UUIDGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;guid&quot;</span>, GUIDGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;uuid&quot;</span>, UUIDHexGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;uuid.hex&quot;</span>, UUIDHexGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;assigned&quot;</span>, Assigned.class );</span><br><span class="line">    register( <span class="string">&quot;identity&quot;</span>, IdentityGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;select&quot;</span>, SelectGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;sequence&quot;</span>, SequenceStyleGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;seqhilo&quot;</span>, SequenceHiLoGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;increment&quot;</span>, IncrementGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;foreign&quot;</span>, ForeignGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;sequence-identity&quot;</span>, SequenceIdentityGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;enhanced-sequence&quot;</span>, SequenceStyleGenerator.class );</span><br><span class="line">    register( <span class="string">&quot;enhanced-table&quot;</span>, TableGenerator.class );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正是由于上面的配置使得我们 <code>strategy</code> 参数可以不写完整的包名，只需要一个关键字就行了。</p><p>那么在 SpringBootJpa 中我们如何把自己编写的主键策略注册到 <code>DefaultIdentifierGeneratorFactory</code> 中，让我们在使用自己的主键策略的时候也可以让 <code>strategy</code> 参数不写完整的策略包名，而是像系统策略一样直接使用一个关键字就行了呢？</p><p><strong>先看结论，结论如下：</strong></p><p>那就是向SpringBoot中注入一个Bean ： <code>HibernatePropertiesCustomizer</code> 来向 Hibernate 追加参数信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeHibernatePropertiesCustomizer</span> <span class="keyword">implements</span> <span class="title">HibernatePropertiesCustomizer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Map&lt;String, Object&gt; hibernateProperties)</span> </span>&#123;</span><br><span class="line">        hibernateProperties.put(</span><br><span class="line">                AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER,</span><br><span class="line">                <span class="keyword">new</span> IdentifierGeneratorStrategyProvider()&#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Map&lt;String, Class&lt;?&gt;&gt; getStrategies() &#123;</span><br><span class="line">                    Map&lt;String, Class&lt;?&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">&quot;snowflake&quot;</span>, XXXXXIdentifierGenerator.class);</span><br><span class="line">                        <span class="keyword">return</span> map;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>看完结论，再说过程</strong></p><p>接下来说一下上面的代码如何生效的。</p><p><strong>以下过程采用逆向断点跟踪操作，从最后面的代码往前推断。</strong></p><p>我们通过 <code>DefaultIdentifierGeneratorFactory.register(String, Class)</code> 方法可以发现它在 <code>EntityManagerFactoryBuilderImpl.configureIdentifierGenerators(StandardServiceRegistry)</code> 的方法中被调用过，而且整个项目只有这一个在非 <code>DefaultIdentifierGeneratorFactory</code> 对象中的调用，因此在这个 <code>configureIdentifierGenerators</code> 方法中一定可以追加策略到预设列表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureIdentifierGenerators</span><span class="params">(StandardServiceRegistry ssr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> StrategySelector strategySelector = ssr.getService( StrategySelector.class );</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply id generators</span></span><br><span class="line"><span class="keyword">final</span> Object idGeneratorStrategyProviderSetting = configurationValues.remove( AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER );</span><br><span class="line"><span class="keyword">if</span> ( idGeneratorStrategyProviderSetting != <span class="keyword">null</span> ) &#123;</span><br><span class="line"><span class="keyword">final</span> IdentifierGeneratorStrategyProvider idGeneratorStrategyProvider =</span><br><span class="line">strategySelector.resolveStrategy( IdentifierGeneratorStrategyProvider.class, idGeneratorStrategyProviderSetting );</span><br><span class="line"><span class="keyword">final</span> MutableIdentifierGeneratorFactory identifierGeneratorFactory = ssr.getService( MutableIdentifierGeneratorFactory.class );</span><br><span class="line"><span class="keyword">if</span> ( identifierGeneratorFactory == <span class="keyword">null</span> ) &#123;</span><br><span class="line"><span class="keyword">throw</span> persistenceException(</span><br><span class="line"><span class="string">&quot;Application requested custom identifier generator strategies, &quot;</span> +</span><br><span class="line"><span class="string">&quot;but the MutableIdentifierGeneratorFactory could not be found&quot;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( Map.Entry&lt;String,Class&lt;?&gt;&gt; entry : idGeneratorStrategyProvider.getStrategies().entrySet() ) &#123;</span><br><span class="line">            <span class="comment">// =========================================================</span></span><br><span class="line"><span class="comment">// 在这里被调用</span></span><br><span class="line">identifierGeneratorFactory.register( entry.getKey(), entry.getValue() );</span><br><span class="line">    <span class="comment">// =========================================================</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以发现它是从 <code>configurationValues.remove( AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER );</code> 这段代码中获取到我们的其他主键策略信息。</p><p>那么接下来我们再追踪 <code>configurationValues</code> 这个对象，看看如何向 <code>configurationValues</code> 对象中添加一个 KEY 为 <code>AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER</code> 值为 <code>IdentifierGeneratorStrategyProvider.class</code> 类型的实例对象。</p><p>我们首先会找到 <code>EntityManagerFactoryBuilderImpl.java</code> 构造方法中有以下几行初始化配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> MergedSettings mergedSettings = mergeSettings( persistenceUnit, integrationSettings, ssrBuilder );</span><br><span class="line"></span><br><span class="line"><span class="comment">// flush before completion validation</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="string">&quot;true&quot;</span>.equals( mergedSettings.configurationValues.get( Environment.FLUSH_BEFORE_COMPLETION ) ) ) &#123;</span><br><span class="line">LOG.definingFlushBeforeCompletionIgnoredInHem( Environment.FLUSH_BEFORE_COMPLETION );</span><br><span class="line">mergedSettings.configurationValues.put( Environment.FLUSH_BEFORE_COMPLETION, <span class="string">&quot;false&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// keep the merged config values for phase-2</span></span><br><span class="line"><span class="keyword">this</span>.configurationValues = mergedSettings.getConfigurationValues();</span><br></pre></td></tr></table></figure><p>我们会发现 <code>configurationValues</code> 的值是来自 <code>persistenceUnit, integrationSettings, ssrBuilder</code> 三个参数，而此时的代码还在 Hibernate 内部，还没有到 SpringBoot 的部分，因此需要继续往外面跟踪调试代码。接下来就主要跟踪 <code>integrationSettings</code> 这个 Map 对象是从哪里来的。</p><p>然后我们会找到 <code>integrationSettings</code> 这个参数来自 <code>LocalContainerEntityManagerFactoryBean.java</code> 的 <code>getJpaPropertyMap()</code> 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> EntityManagerFactory <span class="title">createNativeEntityManagerFactory</span><span class="params">()</span> <span class="keyword">throws</span> PersistenceException </span>&#123;</span><br><span class="line">Assert.state(<span class="keyword">this</span>.persistenceUnitInfo != <span class="keyword">null</span>, <span class="string">&quot;PersistenceUnitInfo not initialized&quot;</span>);</span><br><span class="line"></span><br><span class="line">PersistenceProvider provider = getPersistenceProvider();</span><br><span class="line"><span class="keyword">if</span> (provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">String providerClassName = <span class="keyword">this</span>.persistenceUnitInfo.getPersistenceProviderClassName();</span><br><span class="line"><span class="keyword">if</span> (providerClassName == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"><span class="string">&quot;No PersistenceProvider specified in EntityManagerFactory configuration, &quot;</span> +</span><br><span class="line"><span class="string">&quot;and chosen PersistenceUnitInfo does not specify a provider class name either&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt; providerClass = ClassUtils.resolveClassName(providerClassName, getBeanClassLoader());</span><br><span class="line">provider = (PersistenceProvider) BeanUtils.instantiateClass(providerClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Building JPA container EntityManagerFactory for persistence unit &#x27;&quot;</span> +</span><br><span class="line"><span class="keyword">this</span>.persistenceUnitInfo.getPersistenceUnitName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ==============================================================</span></span><br><span class="line">    <span class="comment">// 关键代码部分</span></span><br><span class="line">EntityManagerFactory emf =</span><br><span class="line">provider.createContainerEntityManagerFactory(<span class="keyword">this</span>.persistenceUnitInfo, getJpaPropertyMap());</span><br><span class="line">    <span class="comment">// ==============================================================</span></span><br><span class="line">postProcessEntityManagerFactory(emf, <span class="keyword">this</span>.persistenceUnitInfo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> emf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来跟踪 <code>getJpaPropertyMap()</code> 方法中 <code>jpaPropertyMap</code> 这个对象的数据是如何改变的，给 <code>AbstractEntityManagerFactoryBean.java</code> 的 216 和 227 设置断点。</p><p>然后我们会发现  <code>getJpaPropertyMap()</code> 方法中 <code>jpaPropertyMap</code> 这个对象在 <code>EntityManagerFactoryBuilder.Builder.build()</code> 方法中有两个调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entityManagerFactoryBean.getJpaPropertyMap().putAll(EntityManagerFactoryBuilder.<span class="keyword">this</span>.jpaProperties);</span><br><span class="line">entityManagerFactoryBean.getJpaPropertyMap().putAll(<span class="keyword">this</span>.properties);</span><br></pre></td></tr></table></figure><p>这里第一个 <code>EntityManagerFactoryBuilder.this.jpaProperties</code> 参数是读取配置文件里面 <code>spring.jpa.properties</code> 参数得来的，但是我们在配置文件中无法提供一个 <code>IdentifierGeneratorStrategyProvider.class</code> 实例对象，因此需要关注第二个 <code>this.properties</code> 里面的配置是如何设置的。</p><p>再使用老方法，断点 <code>this.properties</code> 的数据是如何更改的，在 <code>EntityManagerFactoryBuilder.java</code> 的 171 设置断点。</p><p>然后会发现在 <code>JpaBaseConfiguration.entityManagerFactory(EntityManagerFactoryBuilder)</code> 方法中有一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">(EntityManagerFactoryBuilder factoryBuilder)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; vendorProperties = getVendorProperties();</span><br><span class="line">customizeVendorProperties(vendorProperties);</span><br><span class="line"><span class="keyword">return</span> factoryBuilder.dataSource(<span class="keyword">this</span>.dataSource).packages(getPackagesToScan()).properties(vendorProperties)</span><br><span class="line">.mappingResources(getMappingResources()).jta(isJta()).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面的 <code>properties(vendorProperties)</code> 更改了前面（上一个步骤）的 <code>properties</code> 参数，接下来通过代码得知 <code>vendorProperties</code> 参数是通过调用 <code>JpaBaseConfiguration.getVendorProperties()</code> 方法得来的，但是 <code>getVendorProperties()</code> 是一个抽象方法，我们找到它的实现类 <code>HibernateJpaConfiguration.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">getVendorProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Supplier&lt;String&gt; defaultDdlMode = () -&gt; <span class="keyword">this</span>.defaultDdlAutoProvider.getDefaultDdlAuto(getDataSource());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="keyword">this</span>.hibernateProperties</span><br><span class="line">.determineHibernateProperties(getProperties().getProperties(), <span class="keyword">new</span> HibernateSettings()</span><br><span class="line">.ddlAuto(defaultDdlMode).hibernatePropertiesCustomizers(<span class="keyword">this</span>.hibernatePropertiesCustomizers)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码的最后有一个 <code>hibernatePropertiesCustomizers(this.hibernatePropertiesCustomizers)</code> 属性定制器，<code>this.hibernatePropertiesCustomizers</code> 是一个 <code>List&lt;HibernatePropertiesCustomizer&gt;</code> 对象，它是通过构造方法注入一个 <code>ObjectProvider&lt;HibernatePropertiesCustomizer&gt;</code> 参数来得到的，而实际上 <code>ObjectProvider&lt;HibernatePropertiesCustomizer&gt;</code> 会是一个拥有相同类型的Bean对象列表。</p><p>那么到这里基本上就解决了，我们只要在SpringBoot中提供一个实现了 <code>HibernatePropertiesCustomizer</code> 的 Bean 对象即可对 <code>properties</code> 进行设置、插入数据。</p><p>现在再回到 <code>EntityManagerFactoryBuilderImpl</code> 中，<code>configurationValues</code> 对象中需要一个 KEY 为 <code>AvailableSettings.IDENTIFIER_GENERATOR_STRATEGY_PROVIDER</code> 值为 <code>IdentifierGeneratorStrategyProvider.class</code> 类型的实例对象，那我们就在 <code>HibernatePropertiesCustomizer</code> 中给 <code>properties</code> 添加一个这样的 Key-Value 对象信息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/34731783/how-to-register-custom-identifiergenerator-in-hibernate-jpa-entitymanager&quot;&gt;如何在Hibernate JPA EntityManager中注册自定义IdentifierGenerator？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在使用SpringBootJpa自定义主键策略的时候，通常需要使用三个注解：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@javax&lt;/span&gt;.persistence.Id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@javax&lt;/span&gt;.persistence.GeneratedValue(generator = &lt;span class=&quot;string&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@org&lt;/span&gt;.hibernate.annotations.GenericGenerator(name = &lt;span class=&quot;string&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;, strategy = &lt;span class=&quot;string&quot;&gt;&amp;quot;com.xxx.XXXIdentifierGenerator&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String id;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="https://houkunlin.gitee.io/tags/SpringBoot/"/>
    
    <category term="Jpa" scheme="https://houkunlin.gitee.io/tags/Jpa/"/>
    
    <category term="Hibernate" scheme="https://houkunlin.gitee.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Docker 运行 Java 程序时遇到中文字体异常问题解决方案</title>
    <link href="https://houkunlin.gitee.io/2022/01/21/docker-zh-cn-font/"/>
    <id>https://houkunlin.gitee.io/2022/01/21/docker-zh-cn-font/</id>
    <published>2022-01-21T14:54:58.000Z</published>
    <updated>2022-01-21T14:54:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在我们日常开发中通常会遇到需要在程序中导出Excel电子表格，或者生成带有中文汉字的图片，此时通常会遇到异常报错，一般情况下都是缺少相关字体导致的。</p><p>此时我们需要在 <code>docker</code> 容器中安装相关字体应用程序库，以及加入中文字体到 <code>docker</code> 容器中。</p><p><strong>宋体</strong> 字库在 <code>Windows</code> 是系统的 <code>C:\Windows\Fonts\simsun.ttc</code> 字体文件，可能需要把字体转换成 <code>ttf</code> 格式字体 <code>simsun.ttf</code> （没有在容器内试过<code>ttc</code>） </p><h1 id="openjdk-8-alpine-镜像（alpine-系统）"><a href="#openjdk-8-alpine-镜像（alpine-系统）" class="headerlink" title="openjdk:8-alpine 镜像（alpine 系统）"></a><code>openjdk:8-alpine</code> 镜像（<code>alpine</code> 系统）</h1><blockquote><p>需要执行 <code>apk add ttf-dejavu fontconfig</code> 安装相关字体库</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=HouKunLin</span></span><br><span class="line"><span class="comment"># 安装相关字库程序</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add ttf-dejavu fontconfig</span></span><br><span class="line"><span class="comment"># 加入中文字体文件到指定路径中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./simsun.ttf /usr/share/fonts/simsun.ttf</span></span><br><span class="line"><span class="comment"># Docker 容器中通常遇到时区问题，因此可以加上这个环境变量把时间变为东八区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ Asia/Shanghai</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.jar ./</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;-Xms512m&quot;</span>, <span class="string">&quot;-Xmx512m&quot;</span>, <span class="string">&quot;app.jar&quot;</span>, <span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h1 id="openjdk-11-jre-镜像（Debian-系统）"><a href="#openjdk-11-jre-镜像（Debian-系统）" class="headerlink" title="openjdk:11-jre 镜像（Debian 系统）"></a><code>openjdk:11-jre</code> 镜像（<code>Debian</code> 系统）</h1><blockquote><p>需要执行 <code>apt-get install -y fontconfig libfreetype6</code> 安装相关字体库</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=HouKunLin</span></span><br><span class="line"><span class="comment"># 安装相关字库程序</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y fontconfig libfreetype6</span></span><br><span class="line"><span class="comment"># 加入中文字体文件到指定路径中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./simsun.ttf /usr/share/fonts/simsun.ttf</span></span><br><span class="line"><span class="comment"># Docker 容器中通常遇到时区问题，因此可以加上这个环境变量把时间变为东八区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ Asia/Shanghai</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.jar ./</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;-Xms512m&quot;</span>, <span class="string">&quot;-Xmx512m&quot;</span>, <span class="string">&quot;app.jar&quot;</span>, <span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="CentOS-系统可参考下方链接"><a href="#CentOS-系统可参考下方链接" class="headerlink" title="CentOS 系统可参考下方链接"></a>CentOS 系统可参考下方链接</h1><ul><li><a href="https://segmentfault.com/a/1190000040275198">https://segmentfault.com/a/1190000040275198</a></li></ul><h1 id="切换到-JDK-11-容器镜像是遇到的问题"><a href="#切换到-JDK-11-容器镜像是遇到的问题" class="headerlink" title="切换到 JDK 11 容器镜像是遇到的问题"></a>切换到 JDK 11 容器镜像是遇到的问题</h1><p>之前在切换到 <code>openjdk:11-jre-slim</code> 镜像后导出Excel遇到一个问题 <code>NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager</code> 异常，换成 <code>openjdk:11-jre</code> 镜像即可。</p><p><strong>相关链接</strong></p><ul><li><a href="https://stackoverflow.com/questions/55454036/noclassdeffounderror-could-not-initialize-class-sun-awt-x11fontmanager">https://stackoverflow.com/questions/55454036/noclassdeffounderror-could-not-initialize-class-sun-awt-x11fontmanager</a></li><li><a href="https://stackoverflow.com/questions/53375613/why-is-the-java-11-base-docker-image-so-large-openjdk11-jre-slim">https://stackoverflow.com/questions/53375613/why-is-the-java-11-base-docker-image-so-large-openjdk11-jre-slim</a></li><li><a href="https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4">https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在我们日常开发中通常会遇到需要在程序中导出Excel电子表格，或者生成带有中文汉字的图片，此时通常会遇到异常报错，一般情况下都是缺少相关字体导致的。&lt;/p&gt;
&lt;p&gt;此时我们需要在 &lt;code&gt;docker&lt;/code&gt; 容器中安装相关字体应用程序库，以及加入中文字体到 &lt;code&gt;docker&lt;/code&gt; 容器中。&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://houkunlin.gitee.io/tags/docker/"/>
    
    <category term="java" scheme="https://houkunlin.gitee.io/tags/java/"/>
    
    <category term="springboot" scheme="https://houkunlin.gitee.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 数据库迁移 达梦数据库 踩坑日记</title>
    <link href="https://houkunlin.gitee.io/2021/12/23/mysql-migrate-dm/"/>
    <id>https://houkunlin.gitee.io/2021/12/23/mysql-migrate-dm/</id>
    <published>2021-12-23T02:42:42.000Z</published>
    <updated>2021-12-23T02:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="踩坑1：存储汉字出现长度不够问题"><a href="#踩坑1：存储汉字出现长度不够问题" class="headerlink" title="踩坑1：存储汉字出现长度不够问题"></a>踩坑1：存储汉字出现长度不够问题</h5><p>在 <code>MySQL</code> 中使用 <code>varchar(1)</code> 可以存储1个汉字，在原样迁移到达梦数据库后会出现插入、修改失败问题，因为达梦数据库需要 <code>varchar(3)</code> 才能存储1个汉字。</p><p>可以使用达梦数据库迁移工具的数据类型映射功能来解决：</p><p><img src="./image-20211223111135725.png" alt="image-20211223111135725"></p><p>在迁移时不勾选”使用默认数据类型映射关系”</p><p><img src="./image-20211223111258071.png" alt="image-20211223111258071"></p><h5 id="踩坑2：数据库-timestamp-或-datetime-表结构迁移失败，提示类似-DEFAULT-约束问题"><a href="#踩坑2：数据库-timestamp-或-datetime-表结构迁移失败，提示类似-DEFAULT-约束问题" class="headerlink" title="踩坑2：数据库 timestamp 或 datetime 表结构迁移失败，提示类似 DEFAULT 约束问题"></a>踩坑2：数据库 <code>timestamp</code> 或 <code>datetime</code> 表结构迁移失败，提示类似 <code>DEFAULT</code> 约束问题</h5><p>在使用达梦数据库迁移工具时可能会出现这个问题；</p><p>极有可能是在 <code>MySQL</code> 中对 <code>timestamp</code> 和 <code>datetime</code> 类型字段设置了 <code>CURRENT_TIMESTAMP(6)</code> 默认时间，以及设置数据更新时自动更新时间，此时在迁移的配置中，手动更新字段映射配置，在默认的映射配置中，默认值被加上了单引号（<code>&#39;CURRENT_TIMESTAMP(6)&#39;</code>），我们需要把单引号去掉就行。</p><p><img src="./image-20211223105204333.png" alt="image-20211223105204333"></p><h5 id="踩坑3：数据迁移失败，提示类型信息问题"><a href="#踩坑3：数据迁移失败，提示类型信息问题" class="headerlink" title="踩坑3：数据迁移失败，提示类型信息问题"></a>踩坑3：数据迁移失败，提示类型信息问题</h5><p>在使用达梦数据库迁移工具时可能会出现这个问题；</p><p>在迁移工具中“浏览”数据时会发现，日期信息会显示成 <code>2020-01-01T00:00:00</code> 这种格式，这种格式导致达梦数据库无法解析，因此迁移失败。</p><p>问题是 <code>MySQL</code> 的字段被设置成 <code>datetime</code> 类型，因此会显示成上面这种格式，把 <code>MySQL</code> 的字段类型改为 <code>timestamp</code> 后在用迁移工具迁移数据就不会出现问题。</p><h5 id="踩坑4：在-MySQL-中使用-blob-或使用-clob-存储长文本，迁移达梦数据库后导致数据异常"><a href="#踩坑4：在-MySQL-中使用-blob-或使用-clob-存储长文本，迁移达梦数据库后导致数据异常" class="headerlink" title="踩坑4：在 MySQL 中使用 blob 或使用 clob 存储长文本，迁移达梦数据库后导致数据异常"></a>踩坑4：在 <code>MySQL</code> 中使用 <code>blob</code> 或使用 <code>clob</code> 存储长文本，迁移达梦数据库后导致数据异常</h5><p>主要表现为，用的 Hibernate 一个工作流的信息需要保持长文本数据，同一套Java代码，在 MySQL 下正常，但是在 达梦数据库 上出现数据异常。</p><p>经过排查：</p><ol><li>MySQL blob  -&gt; DM blob ：Java读取达梦数据库数据后返回16进制数据（实际应该返回文本）</li><li>MySQL blob -&gt; DM clob ：Java读取达梦数据库数据后返回文本数据（这是正确的类型，但是依旧存在中文乱码）</li><li>MySQL 中 blob 里面的数据存在中文乱码，因此迁移到达梦数据库后依旧出现中文乱码</li><li>MySQL text -&gt; DM clob ：在MySQL中解决了中文乱码，到达梦数据库中中文乱码同样也不存在，因此这个也是正常的</li></ol><p>因此迁移时需要注意，如果在 MySQL 中使用 blob 存储长文本（有汉字）需要在MySQL中特殊处理，至少要把汉字乱码问题解决掉。</p><p>然后迁移到达梦数据库中时，达梦字段类型使用 clob 或者 text 来存储（使用 blob 存储时读取出来的数据会是16进制）</p><p>解决过程：<code>MySQL blob -&gt; MySQL text（解决中文乱码） -&gt; DM clob 或者 DM text</code></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;踩坑1：存储汉字出现长度不够问题&quot;&gt;&lt;a href=&quot;#踩坑1：存储汉字出现长度不够问题&quot; class=&quot;headerlink&quot; title=&quot;踩坑1：存储汉字出现长度不够问题&quot;&gt;&lt;/a&gt;踩坑1：存储汉字出现长度不够问题&lt;/h5&gt;&lt;p&gt;在 &lt;code&gt;MySQL&lt;/code&gt; 中使用 &lt;code&gt;varchar(1)&lt;/code&gt; 可以存储1个汉字，在原样迁移到达梦数据库后会出现插入、修改失败问题，因为达梦数据库需要 &lt;code&gt;varchar(3)&lt;/code&gt; 才能存储1个汉字。&lt;/p&gt;
&lt;p&gt;可以使用达梦数据库迁移工具的数据类型映射功能来解决：&lt;/p&gt;</summary>
    
    
    
    
    <category term="达梦" scheme="https://houkunlin.gitee.io/tags/%E8%BE%BE%E6%A2%A6/"/>
    
    <category term="DM" scheme="https://houkunlin.gitee.io/tags/DM/"/>
    
    <category term="MySQL" scheme="https://houkunlin.gitee.io/tags/MySQL/"/>
    
    <category term="达梦数据库迁移" scheme="https://houkunlin.gitee.io/tags/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>Docker 容器中文字体乱码、无法加载中文字体</title>
    <link href="https://houkunlin.gitee.io/2021/12/23/docker-fonts/"/>
    <id>https://houkunlin.gitee.io/2021/12/23/docker-fonts/</id>
    <published>2021-12-23T02:38:42.000Z</published>
    <updated>2021-12-23T02:38:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 <code>java:8-alpine</code> 镜像打包 java 项目运行后发现有些需要生成含中文文字图片的接口出现异常，或者生成的中文乱码，主要是容器没有中文字体导致的。</p><p>可以在打包容器的使用增加字体安装命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add ttf-dejavu fontconfig</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在使用 &lt;code&gt;java:8-alpine&lt;/code&gt; 镜像打包 java 项目运行后发现有些需要生成含中文文字图片的接口出现异常，或者生成的中文乱码，主要是容器没有中文字体导致的。&lt;/p&gt;
&lt;p&gt;可以在打包容器的使用增加字体安装命令：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apk add ttf-dejavu fontconfig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://houkunlin.gitee.io/tags/docker/"/>
    
    <category term="容器字体" scheme="https://houkunlin.gitee.io/tags/%E5%AE%B9%E5%99%A8%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux三级等保踩坑日记</title>
    <link href="https://houkunlin.gitee.io/2021/12/23/linux-level-3-bug/"/>
    <id>https://houkunlin.gitee.io/2021/12/23/linux-level-3-bug/</id>
    <published>2021-12-23T02:28:01.000Z</published>
    <updated>2021-12-23T02:28:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="踩坑1：服务器无法登录"><a href="#踩坑1：服务器无法登录" class="headerlink" title="踩坑1：服务器无法登录"></a>踩坑1：服务器无法登录</h2><ol><li>禁用 <code>root</code> 帐号登录<ol><li>修改 <code>/etc/ssh/sshd_config</code> 文件增加 <code>PermitRootLogin no</code> 配置</li></ol></li><li>设置密码有效期；例如：设置密码有效期30天，30天后密码过期，必须修改密码才能登录<ol><li>修改 <code>/etc/login.defs</code> 文件增加 <code>PASS_MAX_DAYS 30</code> 配置</li></ol></li><li>设置文件属性：<code>chattr +i /etc/shadow</code></li></ol><p>静候30天你会发现惊喜：登录服务器提示必须修改密码，但是修改密码失败</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;踩坑1：服务器无法登录&quot;&gt;&lt;a href=&quot;#踩坑1：服务器无法登录&quot; class=&quot;headerlink&quot; title=&quot;踩坑1：服务器无法登录&quot;&gt;&lt;/a&gt;踩坑1：服务器无法登录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;禁用 &lt;code&gt;root&lt;/code&gt; 帐号登录&lt;ol&gt;
&lt;li&gt;修改 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; 文件增加 &lt;code&gt;PermitRootLogin no&lt;/code&gt; 配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;设置密码有效期；例如：设置密码有效期30天，30天后密码过期，必须修改密码才能登录&lt;ol&gt;
&lt;li&gt;修改 &lt;code&gt;/etc/login.defs&lt;/code&gt; 文件增加 &lt;code&gt;PASS_MAX_DAYS 30&lt;/code&gt; 配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;设置文件属性：&lt;code&gt;chattr +i /etc/shadow&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;静候30天你会发现惊喜：登录服务器提示必须修改密码，但是修改密码失败&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://houkunlin.gitee.io/tags/Linux/"/>
    
    <category term="三级等保" scheme="https://houkunlin.gitee.io/tags/%E4%B8%89%E7%BA%A7%E7%AD%89%E4%BF%9D/"/>
    
    <category term="安全基线" scheme="https://houkunlin.gitee.io/tags/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>通过 Privoxy 把 Shadowsocks 转成 Http 代理</title>
    <link href="https://houkunlin.gitee.io/2020/11/07/socks5-to-http/"/>
    <id>https://houkunlin.gitee.io/2020/11/07/socks5-to-http/</id>
    <published>2020-11-06T18:18:20.000Z</published>
    <updated>2020-11-06T18:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个脚本放在草稿里面很久了，今天放出来。</p><p>通过一个脚本一键把一个普通的 <code>Ubuntu Docker</code> 容器变成一个代理转发 <code>Socks5</code> 的服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://qastack.cn/superuser/423563/convert-http-requests-to-socks5</span></span><br><span class="line"><span class="comment"># https://gist.github.com/xwsg/5ecd015be95a61875d43df87c451aca4</span></span><br><span class="line"><span class="comment"># https://edxi.github.io/2018/07/09/Shadowsocks_Privoxy_Squid_GFWlist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">apt update &amp;&amp; apt install shadowsocks-libev privoxy systemctl -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 Privoxy 配置文件</span></span><br><span class="line"><span class="comment"># 去除注释内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(awk &#x27;/^[^#]/&#x27; /etc/privoxy/config)</span>&quot;</span> &gt;/etc/privoxy/config</span><br><span class="line"><span class="comment"># 替换监听IP配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(sed &#x27;s/127.0.0.1/0.0.0.0/g&#x27; /etc/privoxy/config | sed &#x27;/listen.*\[.*/&#x27;d)</span>&quot;</span> &gt;/etc/privoxy/config</span><br><span class="line"><span class="comment"># 加入转发配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;forward-socks5t / 127.0.0.1:1080 .&quot;</span> &gt;&gt;/etc/privoxy/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 ss-local 配置文件</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF &gt;/etc/shadowsocks-libev/config.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;server&quot;:&quot;server.host&quot;,</span></span><br><span class="line"><span class="string">    &quot;mode&quot;:&quot;tcp_and_udp&quot;,</span></span><br><span class="line"><span class="string">    &quot;server_port&quot;:8044,</span></span><br><span class="line"><span class="string">    &quot;local_port&quot;:1080,</span></span><br><span class="line"><span class="string">    &quot;local_address&quot;:&quot;0.0.0.0&quot;,</span></span><br><span class="line"><span class="string">    &quot;password&quot;:&quot;my password&quot;,</span></span><br><span class="line"><span class="string">    &quot;timeout&quot;:60,</span></span><br><span class="line"><span class="string">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动本地 SS</span></span><br><span class="line">nohup ss-local -c /etc/shadowsocks-libev/config.json &gt;sslocal.log &amp;</span><br><span class="line"><span class="comment"># 启动 Privoxy</span></span><br><span class="line">/etc/init.d/privoxy start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就可以使用 <code>curl</code> 来测试 HTTP 代理是否正确了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -v ifconfig.pro <span class="comment"># 返回本机IP</span></span><br><span class="line">curl -v -x socks5://127.0.0.1:1080 ifconfig.pro <span class="comment"># 返回 SS 代理 IP</span></span><br><span class="line">curl -v -x http://127.0.0.1:8118 ifconfig.pro <span class="comment"># 返回 SS 代理 IP</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个脚本放在草稿里面很久了，今天放出来。&lt;/p&gt;
&lt;p&gt;通过一个脚本一键把一个普通的 &lt;code&gt;Ubuntu Docker&lt;/code&gt; 容器变成一个代理转发 &lt;code&gt;Socks5&lt;/code&gt; 的服务器。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# https://qastack.cn/superuser/423563/convert-http-requests-to-socks5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# https://gist.github.com/xwsg/5ecd015be95a61875d43df87c451aca4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# https://edxi.github.io/2018/07/09/Shadowsocks_Privoxy_Squid_GFWlist/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装软件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt update &amp;amp;&amp;amp; apt install shadowsocks-libev privoxy systemctl -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 替换 Privoxy 配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 去除注释内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;subst&quot;&gt;$(awk &amp;#x27;/^[^#]/&amp;#x27; /etc/privoxy/config)&lt;/span&gt;&amp;quot;&lt;/span&gt; &amp;gt;/etc/privoxy/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 替换监听IP配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;subst&quot;&gt;$(sed &amp;#x27;s/127.0.0.1/0.0.0.0/g&amp;#x27; /etc/privoxy/config | sed &amp;#x27;/listen.*\[.*/&amp;#x27;d)&lt;/span&gt;&amp;quot;&lt;/span&gt; &amp;gt;/etc/privoxy/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加入转发配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;forward-socks5t / 127.0.0.1:1080 .&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt;/etc/privoxy/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 替换 ss-local 配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;EOF &amp;gt;/etc/shadowsocks-libev/config.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;server&amp;quot;:&amp;quot;server.host&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;mode&amp;quot;:&amp;quot;tcp_and_udp&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;server_port&amp;quot;:8044,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;local_port&amp;quot;:1080,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;local_address&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;password&amp;quot;:&amp;quot;my password&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;timeout&amp;quot;:60,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 启动本地 SS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nohup ss-local -c /etc/shadowsocks-libev/config.json &amp;gt;sslocal.log &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 启动 Privoxy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/init.d/privoxy start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="shell" scheme="https://houkunlin.gitee.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>部署 SpringBoot 项目时一个 Linux Service 模板</title>
    <link href="https://houkunlin.gitee.io/2020/10/26/linux-service/"/>
    <id>https://houkunlin.gitee.io/2020/10/26/linux-service/</id>
    <published>2020-10-26T04:09:04.000Z</published>
    <updated>2020-10-27T02:22:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="app-jar-的启动"><a href="#app-jar-的启动" class="headerlink" title="app.jar 的启动"></a><code>app.jar</code> 的启动</h2><p>在服务器上启动项目时最简单的启动项目方法是直接执行 <code>java -jar app.jar</code> 命令，或者使用 <code>nohup</code> 进入到后台运行 <code>nohup java -jar app.jar &amp;</code> 。</p><p>但是当我们重新部署、重启项目时会比较麻烦，我们需要通过 <code>ps -ef|grep app.jar</code> 来找到我们项目执行时的进程ID <code>PID</code> ，然后再执行 <code>kill -9 $PID</code> 来杀掉当前正在运行的项目，之后再重新运行项目。</p><p>虽然只有几个简单的步骤，但还是稍微有点麻烦。整个过程：<strong>运行-&gt;上传新程序-&gt;查找当前程序PID-&gt;杀掉当前程序-&gt;重新运行</strong>，那我们能不能稍微简化一下上述过程，把中间查找PID和杀掉进程这两个不去掉，也把命令简化一下，变成：<strong>运行-&gt;上传新程序-&gt;重新运行</strong> 。</p><h3 id="手动编写一个启动脚本：run-sh"><a href="#手动编写一个启动脚本：run-sh" class="headerlink" title="手动编写一个启动脚本：run.sh"></a>手动编写一个启动脚本：<code>run.sh</code></h3><p>此时我们最简单的方法就是写一个 <code>SHELL</code> 脚本 <code>run.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------kill_app process----------------&#x27;</span></span><br><span class="line"></span><br><span class="line">KILL_PROCESS_NAME=<span class="string">&#x27;/application/app.jar&#x27;</span></span><br><span class="line"></span><br><span class="line">PROCESS_ID=`ps -ef | grep <span class="variable">$KILL_PROCESS_NAME</span> | grep -v <span class="string">&#x27;grep&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ProcessId: &#x27;</span> <span class="variable">$PROCESS_ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> <span class="variable">$PROCESS_ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;KILL_ID: &#x27;</span> <span class="variable">$id</span></span><br><span class="line"><span class="built_in">kill</span> -s 9 <span class="variable">$id</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------killed_app.jar----------------&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------start_app.jar----------------&#x27;</span></span><br><span class="line"></span><br><span class="line">nohup  java -Xms512m -Xmx512m -jar  <span class="variable">$KILL_PROCESS_NAME</span> --spring.profiles.active=file  &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;---------------started_app.jar----------------&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上脚本能够有效的解决我们的问题，但是新问题又来了，如果想查看程序是否运行呢？我们想的肯定是直接执行命令 <code>ps -ef|grep app.jar</code> 查找这个程序是否正在运行，或者把查询运行状态的命令写进我们前面的脚本里面，然后执行 <code>./run.sh status</code> 查询程序执行状态。</p><p>假如我们把查询状态、启动、停止这几个操作都写入到一个脚本中，并提供参数来调用，就需要修改脚本代码，此时我们的脚本是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">KILL_PROCESS_NAME=<span class="string">&#x27;/application/app.jar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getProcessId</span></span>() &#123;</span><br><span class="line">  PID=$(ps -ef | grep <span class="variable">$KILL_PROCESS_NAME</span> | grep -v <span class="string">&#x27;grep&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">  <span class="built_in">return</span> <span class="variable">$PID</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">  nohup java -Xms512m -Xmx512m -jar <span class="variable">$KILL_PROCESS_NAME</span> --spring.profiles.active=file &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;运行成功&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">  getProcessId</span><br><span class="line">  PROCESS_ID=$?</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$PROCESS_ID</span>&quot;</span> != <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;进程ID：<span class="variable">$PROCESS_ID</span>&quot;</span></span><br><span class="line">    <span class="built_in">kill</span> -s 9 <span class="variable">$PROCESS_ID</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;没有运行&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line">status)</span><br><span class="line">  getProcessId</span><br><span class="line">  PROCESS_ID=$?</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$PROCESS_ID</span>&quot;</span> != <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在运行...&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;没有运行&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  ;;</span><br><span class="line">stop)</span><br><span class="line">  stop</span><br><span class="line">  ;;</span><br><span class="line">restart)</span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;参数错误&quot;</span></span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时我们有了四个可以执行的命令：</p><ul><li><code>./run.sh start</code> 启动程序</li><li><code>./run.sh status</code> 查询运行状态</li><li><code>./run.sh stop</code> 停止运行</li><li><code>./run.sh restart</code> 重启程序</li></ul><p>此时我们就有了4个可以正常使用的命令，但是现在还不能直接设置程序在系统启动的时候随着系统启动，因为还需要做一些配置，最简单的就是修改 <code>/etc/profile</code> 文件加上启动命令，比较麻烦一点就是写一个启动脚本放到系统的 <code>/etc/init.d/</code> 初始化路径中，然后把脚本加入到系统启动。</p><p>但同时我们上面的几个命令看起来是不是非常像Linux系统的系统服务呢？Linux系统服务也是有4个命令：</p><ul><li><code>systemctl start app.service</code> 启动服务</li><li><code>systemctl status app.service</code> 查询服务运行状态</li><li><code>systemctl stop app.service</code> 停止服务</li><li><code>systemctl restart app.service</code> 重启服务</li></ul><p>那我们能不能把它改造成系统服务呢？我们该如何为自己的 <code>SpringBoot</code> 应用编写一个Linux系统服务呢？</p><h2 id="app-service-示例"><a href="#app-service-示例" class="headerlink" title="app.service 示例"></a><code>app.service</code> 示例</h2><p>以下给出了一个示例 <code>app.service</code> 文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://www.jinbuguo.com/systemd/systemd.unit.html</span></span><br><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="comment"># 单元的解释说明 http://www.jinbuguo.com/systemd/systemd.unit.html#Description=</span></span><br><span class="line"><span class="attr">Description</span>=Spring Boot Application</span><br><span class="line"><span class="comment"># 启动顺序设置</span></span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="comment"># 配合 After 设置强依赖服务，依赖单元必须已经全部处于启动成功的状态时才能启动当前单元 http://www.jinbuguo.com/systemd/systemd.unit.html#Requisite=</span></span><br><span class="line"><span class="comment">#Requisite=</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=nobody</span><br><span class="line"><span class="comment"># 重启服务配置， on-failure 表示仅在服务进程异常退出时重启 http://www.jinbuguo.com/systemd/systemd.service.html#Restart=</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="comment"># 在重启服务前暂停的时间 http://www.jinbuguo.com/systemd/systemd.service.html#RestartSec=</span></span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">30</span>s</span><br><span class="line"><span class="comment"># 设置日志与标准输入输出 http://www.jinbuguo.com/systemd/systemd.exec.html#StandardOutput=</span></span><br><span class="line"><span class="comment"># 关闭了 Service 的输出，依赖 Spring Boot 应用程序的日志输出</span></span><br><span class="line"><span class="attr">StandardOutput</span>=null</span><br><span class="line"><span class="comment"># 设置工作路径 http://www.jinbuguo.com/systemd/systemd.exec.html#WorkingDirectory=</span></span><br><span class="line"><span class="attr">WorkingDirectory</span>=/application/</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/java -Xms512m -Xmx512m -jar /application/app.jar --spring.profiles.active=dev</span><br><span class="line"><span class="comment"># 其实这里还可以向下面这样写，java执行的jar不写全路径，直接写文件名，因为设置了 WorkingDirectory 会在该路径下找相应的文件</span></span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/java -Xms512m -Xmx512m -jar app.jar --spring.profiles.active=dev</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何使-app-service-生效"><a href="#如何使-app-service-生效" class="headerlink" title="如何使 app.service 生效"></a>如何使 <code>app.service</code> 生效</h3><p>该 <code>app.service</code> 文件存放在Linux系统的 <code>/lib/systemd/system/</code> 路径下。</p><p>我们可以在我们的项目下存放该 <code>app.service</code> 文件，类似于以下目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;</span><br><span class="line">&#x2F;src</span><br><span class="line">&#x2F;src&#x2F;main</span><br><span class="line">&#x2F;src&#x2F;test</span><br><span class="line">&#x2F;pom.xml</span><br><span class="line">&#x2F;app.service</span><br></pre></td></tr></table></figure><p>然后在Linux系统中的项目路径下，可以通过 <code>ln</code> 把 <code>app.service</code> 文件链接到 <code>/lib/systemd/system/</code> 路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project-dir</span><br><span class="line">ln -s app.service /lib/systemd/system/</span><br><span class="line"><span class="comment"># 或者 ln -s app.service /lib/systemd/system/app.service</span></span><br><span class="line"><span class="comment"># 重新加载 service</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 然后就可以使用Linux的系统服务管理软件来启动运行我们的 SpringBoot 应用了</span></span><br></pre></td></tr></table></figure><p>接下来我们就可以使用 <code>systemctl</code> 来启动我们的 <code>SpringBoot</code> 应用了</p><ul><li><code>systemctl start app.service</code> 启动应用</li><li><code>systemctl status app.service</code> 查看应用启动状态</li><li><code>systemctl restart app.service</code> 重启应用</li><li><code>systemctl stop app.service</code> 停止应用</li></ul><p>或者使用 <code>service</code> 命令来启动我们的 <code>SpringBoot</code> 应用</p><ul><li><code>service app.service start</code> 启动应用</li><li><code>service app.service status</code> 查看应用启动状态</li><li><code>service app.service restart</code> 重启应用</li><li><code>service app.service stop</code> 停止应用</li></ul><h2 id="app-service-解读"><a href="#app-service-解读" class="headerlink" title="app.service 解读"></a><code>app.service</code> 解读</h2><p>以下使用 <code>单元</code> 来表示一个系统服务 <code>service</code> </p><ul><li><code>After=network.target</code> 在网卡启动之后启动当前单元</li><li><code>Requisite=</code> 必须在一个单元启动成功后才启动当前单元</li><li><code>Restart=on-failure</code> 在异常退出的时候重新启动单元</li><li><code>RestartSec=30s</code> 重启单元前暂停的时间</li><li><code>StandardOutput=null</code> 关闭单元的标准输出，实际上也就是抛弃 <code>ExecStart</code> 命令中在控制台产生的输出、日志记录</li><li><code>WorkingDirectory=/application/</code> 设置这个单元的工作路径，默认工作在 <code>/</code> 路径下，设置为存放 <code>app.jar</code> 的路径，这样可以使 <code>SpringBoot</code> 应用识别到路径下的配置文件并应用到运行环境中</li><li><code>ExecStart=/usr/bin/java -jar /application/app.jar</code> 启动 <code>app.jar</code> 项目，直接使用 <code>java</code> 命令来启动，也不用把其放到后台进程中运行</li></ul><p>其实还隐含了以下 <code>[Service]</code> 配置，但是并不需要我们进行特殊的配置也能产生相应的作用：</p><ul><li><code>ExecRestart=</code> 重启单元时执行的重启应用命令，可以不配置，系统会自动先 <code>stop</code> 再 <code>start</code></li><li><code>ExecStop=</code> 停止单元时执行的停止应用命令，可以不配置，系统会自动 <code>kill</code> 掉当前单元中 <code>ExecStart</code> 运行的进程</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;app-jar-的启动&quot;&gt;&lt;a href=&quot;#app-jar-的启动&quot; class=&quot;headerlink&quot; title=&quot;app.jar 的启动&quot;&gt;&lt;/a&gt;&lt;code&gt;app.jar&lt;/code&gt; 的启动&lt;/h2&gt;&lt;p&gt;在服务器上启动项目时最简单的启动项目方法是直接执行 &lt;code&gt;java -jar app.jar&lt;/code&gt; 命令，或者使用 &lt;code&gt;nohup&lt;/code&gt; 进入到后台运行 &lt;code&gt;nohup java -jar app.jar &amp;amp;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是当我们重新部署、重启项目时会比较麻烦，我们需要通过 &lt;code&gt;ps -ef|grep app.jar&lt;/code&gt; 来找到我们项目执行时的进程ID &lt;code&gt;PID&lt;/code&gt; ，然后再执行 &lt;code&gt;kill -9 $PID&lt;/code&gt; 来杀掉当前正在运行的项目，之后再重新运行项目。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ventoy -- 新一代多系统启动U盘解决方案</title>
    <link href="https://houkunlin.gitee.io/2020/10/10/ventoy/"/>
    <id>https://houkunlin.gitee.io/2020/10/10/ventoy/</id>
    <published>2020-10-10T01:44:50.000Z</published>
    <updated>2020-10-10T01:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前第一次用的PE是老毛桃，后来换了微PE，这个 <a href="https://www.ventoy.net/cn/index.html">Ventoy</a> 还是第一次听说，并且是在抖音上面刷到的。迫不及待的试了一下。</p><p>据官方说有以下特性：</p><ul><li>100% 开源 <a href="https://www.ventoy.net/cn/doc_license.html">(许可证)</a></li><li>使用简单 <a href="https://www.ventoy.net/cn/doc_start.html">(使用说明)</a></li><li>快速 (拷贝文件有多快就有多快)</li><li>直接从 ISO/WIM/IMG/VHD(x)/EFI 文件启动，无需解开</li><li>无差异支持Legacy + UEFI 模式</li><li>UEFI 模式支持安全启动 (Secure Boot) (1.0.07版本开始) <a href="https://www.ventoy.net/cn/doc_secure.html">说明</a></li><li>支持持久化 (1.0.11版本开始) <a href="https://www.ventoy.net/cn/plugin_persistence.html">说明</a></li><li>支持MBR和GPT分区格式(1.0.15+)</li><li>支持自动安装部署(1.0.09+) <a href="https://www.ventoy.net/cn/plugin_autoinstall.html">说明</a></li><li>支持超过4GB的ISO文件</li><li>保留ISO原始的启动菜单风格(Legacy &amp; UEFI)</li><li>支持大部分常见操作系统, 已测试550+ 个ISO文件</li><li>不仅仅是启动，而是完整的安装过程</li><li>ISO文件支持列表模式或目录树模式显示 <a href="https://www.ventoy.net/cn/doc_treeview.html">说明</a></li><li>提出 “Ventoy Compatible” 概念</li><li>支持插件扩展</li><li>启动过程中支持U盘设置写保护</li><li>不影响U盘日常普通使用</li><li>版本升级时数据不会丢失</li><li>无需跟随操作系统升级而升级Ventoy</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;以前第一次用的PE是老毛桃，后来换了微PE，这个 &lt;a href=&quot;https://www.ventoy.net/cn/index.html&quot;&gt;Ventoy&lt;/a&gt; 还是第一次听说，并且是在抖音上面刷到的。迫不及待的试了一下。&lt;/p&gt;
&lt;p&gt;据官方说有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100% 开源 &lt;a href=&quot;https://www.ventoy.net/cn/doc_license.html&quot;&gt;(许可证)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用简单 &lt;a href=&quot;https://www.ventoy.net/cn/doc_start.html&quot;&gt;(使用说明)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;快速 (拷贝文件有多快就有多快)&lt;/li&gt;
&lt;li&gt;直接从 ISO/WIM/IMG/VHD(x)/EFI 文件启动，无需解开&lt;/li&gt;
&lt;li&gt;无差异支持Legacy + UEFI 模式&lt;/li&gt;
&lt;li&gt;UEFI 模式支持安全启动 (Secure Boot) (1.0.07版本开始) &lt;a href=&quot;https://www.ventoy.net/cn/doc_secure.html&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持持久化 (1.0.11版本开始) &lt;a href=&quot;https://www.ventoy.net/cn/plugin_persistence.html&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持MBR和GPT分区格式(1.0.15+)&lt;/li&gt;
&lt;li&gt;支持自动安装部署(1.0.09+) &lt;a href=&quot;https://www.ventoy.net/cn/plugin_autoinstall.html&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持超过4GB的ISO文件&lt;/li&gt;
&lt;li&gt;保留ISO原始的启动菜单风格(Legacy &amp;amp; UEFI)&lt;/li&gt;
&lt;li&gt;支持大部分常见操作系统, 已测试550+ 个ISO文件&lt;/li&gt;
&lt;li&gt;不仅仅是启动，而是完整的安装过程&lt;/li&gt;
&lt;li&gt;ISO文件支持列表模式或目录树模式显示 &lt;a href=&quot;https://www.ventoy.net/cn/doc_treeview.html&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;提出 “Ventoy Compatible” 概念&lt;/li&gt;
&lt;li&gt;支持插件扩展&lt;/li&gt;
&lt;li&gt;启动过程中支持U盘设置写保护&lt;/li&gt;
&lt;li&gt;不影响U盘日常普通使用&lt;/li&gt;
&lt;li&gt;版本升级时数据不会丢失&lt;/li&gt;
&lt;li&gt;无需跟随操作系统升级而升级Ventoy&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一些Shell命令使用</title>
    <link href="https://houkunlin.gitee.io/2020/09/19/common-shell/"/>
    <id>https://houkunlin.gitee.io/2020/09/19/common-shell/</id>
    <published>2020-09-19T06:49:54.000Z</published>
    <updated>2020-09-19T06:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="acme-sh"><a href="#acme-sh" class="headerlink" title="acme.sh"></a>acme.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 acme.sh</span></span><br><span class="line">curl  https://get.acme.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露阿里云DNS的KEY，请到阿里云控制台申请</span></span><br><span class="line"><span class="built_in">export</span> Ali_Key=<span class="string">&quot;***&quot;</span></span><br><span class="line"><span class="built_in">export</span> Ali_Secret=<span class="string">&quot;***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里云DNS验证域名来生成 SSL 证书，acme.sh暂时无法为中文域名签发证书</span></span><br><span class="line">acme.sh --issue --dns dns_ali -d houkunlin.cn -d *.houkunlin.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 acme.sh 生成 SSL 证书后，把 SSL 证书安装到 Nginx</span></span><br><span class="line">acme.sh --installcert -d houkunlin.cn --key-file /etc/nginx/houkunlin.cn.key --fullchain-file /etc/nginx/houkunlin.cn.cer --reloadcmd <span class="string">&quot;service nginx force-reload&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;acme-sh&quot;&gt;&lt;a href=&quot;#acme-sh&quot; class=&quot;headerlink&quot; title=&quot;acme.sh&quot;&gt;&lt;/a&gt;acme.sh&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装 acme.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl  https://get.acme.sh | sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 暴露阿里云DNS的KEY，请到阿里云控制台申请&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; Ali_Key=&lt;span class=&quot;string&quot;&gt;&amp;quot;***&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; Ali_Secret=&lt;span class=&quot;string&quot;&gt;&amp;quot;***&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用阿里云DNS验证域名来生成 SSL 证书，acme.sh暂时无法为中文域名签发证书&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;acme.sh --issue --dns dns_ali -d houkunlin.cn -d *.houkunlin.cn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 acme.sh 生成 SSL 证书后，把 SSL 证书安装到 Nginx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;acme.sh --installcert -d houkunlin.cn --key-file /etc/nginx/houkunlin.cn.key --fullchain-file /etc/nginx/houkunlin.cn.cer --reloadcmd &lt;span class=&quot;string&quot;&gt;&amp;quot;service nginx force-reload&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</summary>
    
    
    
    
    <category term="shell" scheme="https://houkunlin.gitee.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>一些Docker镜像使用</title>
    <link href="https://houkunlin.gitee.io/2020/09/19/common-docker-image-run/"/>
    <id>https://houkunlin.gitee.io/2020/09/19/common-docker-image-run/</id>
    <published>2020-09-19T06:32:45.000Z</published>
    <updated>2020-09-19T06:32:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name portainer -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer/data:/data -e TZ=Asia/Shanghai portainer/portainer</span><br></pre></td></tr></table></figure><h3 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无WEB管理界面</span></span><br><span class="line">docker run --name rabbitmq -p 4369:4369 -p 5671:5671 -p 5672:5672 -p 25672:25672 -e TZ=Asia/Shanghai -d rabbitmq</span><br><span class="line"><span class="comment"># 有WEB管理界面</span></span><br><span class="line">docker run --name rabbitmq -p 4369:4369 -p 5671:5671 -p 5672:5672 -p 25672:25672 -e TZ=Asia/Shanghai -d rabbitmq:3.8.7-management</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name mysql8 -p 3306:3306 -v /opt/mysql/conf:/etc/mysql/conf.d -v /opt/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e TZ=Asia/Shanghai -d mysql:8.0 --innodb-use-native-aio=0</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name redis -p 6379:6379 -e TZ=Asia/Shanghai -d redis</span><br></pre></td></tr></table></figure><h3 id="ipsec-vpn-server"><a href="#ipsec-vpn-server" class="headerlink" title="ipsec-vpn-server"></a>ipsec-vpn-server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里有个 vpn.env 环境变量文件请自行配置，请自行查阅相关文档</span></span><br><span class="line">docker run --name ipsec-vpn-server --env-file ./vpn.env -p 500:500/udp -p 4500:4500/udp -d --privileged hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure><h3 id="Teamcity"><a href="#Teamcity" class="headerlink" title="Teamcity"></a>Teamcity</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run -it --name teamcity-server-instance -v /opt/teamcity/data:/data/teamcity_server/datadir -v /opt/teamcity/logs:/opt/teamcity/logs -p 8111:8111 jetbrains/teamcity-server</span><br></pre></td></tr></table></figure><h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name shadowsocks --restart always -e PASSWORD=密码 -p 8388:8388 -p 8388:8388/udp -d shadowsocks/shadowsocks-libev</span><br></pre></td></tr></table></figure><h3 id="Squid-代理服务器"><a href="#Squid-代理服务器" class="headerlink" title="Squid 代理服务器"></a>Squid 代理服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run --name squid --restart always -p 3128:3128 -p 3128:3128/udp -v /opt/squid/cache/:/var/spool/squid -v /opt/squid/squid.conf:/etc/squid/squid.conf -d sameersbn/squid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要在正在运行的实例上重新加载Squid配置，可以将HUP信号发送到容器。 https://hub.docker.com/r/sameersbn/squid</span></span><br><span class="line"><span class="comment"># docker kill -s HUP squid</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Portainer&quot;&gt;&lt;a href=&quot;#Portainer&quot; class=&quot;headerlink&quot; title=&quot;Portainer&quot;&gt;&lt;/a&gt;Portainer&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --name portainer -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer/data:/data -e TZ=Asia/Shanghai portainer/portainer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&quot;Rabbitmq&quot;&gt;&lt;a href=&quot;#Rabbitmq&quot; class=&quot;headerlink&quot; title=&quot;Rabbitmq&quot;&gt;&lt;/a&gt;Rabbitmq&lt;/h3&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://houkunlin.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下使用Docker并且不关闭防火墙</title>
    <link href="https://houkunlin.gitee.io/2020/09/19/centos-firewall-docker/"/>
    <id>https://houkunlin.gitee.io/2020/09/19/centos-firewall-docker/</id>
    <published>2020-09-19T05:54:51.000Z</published>
    <updated>2020-09-19T05:54:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常情况下我们使用CentOS第一件事就是关闭防火墙  <code>systemctl stop firewalld</code> 和禁止防火墙自启动 <code>systemctl disable firewalld</code> 。但是关闭防火墙后，意味着服务器将会暴露在一种不安全的状态。</p><p>而我们使用Docker运行一些服务的时候，外部网络请求因为防火墙的原因将无法正确的请求到Docker容器内部，因此需要对防火墙做一些设置。</p><p>主要就是配置防火墙 zone 对应的网络接口，和给指定的 zone 增加 service，以下给出一个示例的 shell 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有的 zone 信息</span></span><br><span class="line">firewall-cmd --list-all-zones</span><br><span class="line"><span class="comment"># 获取默认的 zone</span></span><br><span class="line">firewall-cmd --get-default-zone</span><br><span class="line"><span class="comment"># 获取默认的 service</span></span><br><span class="line">firewall-cmd --get-services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给指定的 zone 添加一个网络接口</span></span><br><span class="line"><span class="comment">#firewall-cmd --zone=trusted --add-interface=docker0</span></span><br><span class="line"><span class="comment"># 给指定的 zone 删除一个网络接口</span></span><br><span class="line"><span class="comment">#firewall-cmd --zone=trusted --remove-interface=docker0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从当前默认的 zone 删除一个网络接口</span></span><br><span class="line">firewall-cmd --remove-interface=docker0</span><br><span class="line">firewall-cmd --remove-interface=br-daf5b7d3832b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给指定的 zone 添加Docker的网络接口</span></span><br><span class="line">firewall-cmd --zone=trusted --add-interface=docker0</span><br><span class="line"><span class="comment"># 下面的这个 br-XXXX 的网络接口后面部分根据机器、系统不同会不一样，请按需设置</span></span><br><span class="line">firewall-cmd --zone=trusted --add-interface=br-daf5b7d3832b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给指定的 zone 增加 service ，允许一些指定的网络服务通过该 zone ，不设置这个的话，这个 zone 将会不处理这些类型的网络请求，也就是防火墙拦截掉未设置的 service 请求</span></span><br><span class="line">firewall-cmd --zone=trusted --add-service=cockpit</span><br><span class="line">firewall-cmd --zone=trusted --add-service=dhcp</span><br><span class="line">firewall-cmd --zone=trusted --add-service=dhcpv6-client</span><br><span class="line">firewall-cmd --zone=trusted --add-service=dns</span><br><span class="line">firewall-cmd --zone=trusted --add-service=mdns</span><br><span class="line">firewall-cmd --zone=trusted --add-service=samba-client</span><br><span class="line">firewall-cmd --zone=trusted --add-service=ssh</span><br><span class="line">firewall-cmd --zone=trusted --add-service=http</span><br><span class="line">firewall-cmd --zone=trusted --add-service=https</span><br><span class="line">firewall-cmd --zone=trusted --add-service=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定的 zone 的信息</span></span><br><span class="line">firewall-cmd --zone=trusted --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把以上的配置保存，使重启不会丢失</span></span><br><span class="line">firewall-cmd --runtime-to-permanent</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;通常情况下我们使用CentOS第一件事就是关闭防火墙  &lt;code&gt;systemctl stop firewalld&lt;/code&gt; 和禁止防火墙自启动 &lt;code&gt;systemctl disable firewalld&lt;/code&gt; 。但是关闭防火墙后，意味着服务器将会暴露在一种不安全的状态。&lt;/p&gt;
&lt;p&gt;而我们使用Docker运行一些服务的时候，外部网络请求因为防火墙的原因将无法正确的请求到Docker容器内部，因此需要对防火墙做一些设置。&lt;/p&gt;
&lt;p&gt;主要就是配置防火墙 zone 对应的网络接口，和给指定的 zone 增加 service，以下给出一个示例的 shell 命令：&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://houkunlin.gitee.io/tags/docker/"/>
    
    <category term="centos" scheme="https://houkunlin.gitee.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Windows的命令行安装程序 - scoop</title>
    <link href="https://houkunlin.gitee.io/2019/11/29/scoop/"/>
    <id>https://houkunlin.gitee.io/2019/11/29/scoop/</id>
    <published>2019-11-29T02:52:37.000Z</published>
    <updated>2019-11-29T02:52:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天介绍一款在Windows下的命令安装程序，用过Linux的都懂，在Linux下有一个包管理器用来安装应用，比如 <code>Ubuntu</code> 的 <code>apt</code> 和 <code>apt-get</code> ，以及 <code>CentOS</code> 的 <code>yum</code> 这些，那么在Windows下有没有类似的软件或者工具呢？</p><p><strong>有！那就是 <code>scoop</code> 。</strong></p><h3 id="scoop-Windows的命令安装程序"><a href="#scoop-Windows的命令安装程序" class="headerlink" title="scoop - Windows的命令安装程序"></a><code>scoop</code> - Windows的命令安装程序</h3><p>官网：<a href="https://scoop.sh/">https://scoop.sh/</a></p><p>Github：<a href="https://github.com/lukesampson/scoop">https://github.com/lukesampson/scoop</a></p><h3 id="如何在Windows下安装-scoop"><a href="#如何在Windows下安装-scoop" class="headerlink" title="如何在Windows下安装 scoop ?"></a>如何在Windows下安装 <code>scoop</code> ?</h3><p>条件： 确保已安装<a href="https://aka.ms/wmf5download">PowerShell 5</a>（或更高版本，包括<a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-6">PowerShell Core</a>）和<a href="https://www.microsoft.com/net/download">.NET Framework 4.5</a>（或更高版本）。 </p><p>打开Windows的 <code>PowerShell</code> 命令行工具，然后执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br><span class="line"><span class="comment"># 或者短一点的短命令</span></span><br><span class="line">iwr -useb get.scoop.sh | iex</span><br></pre></td></tr></table></figure><p>安装的时候可能会遇到错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PowerShell requires an execution policy <span class="keyword">in</span> [Unrestricted, RemoteSigned, ByPass] to run Scoop.</span><br><span class="line">For example, to <span class="built_in">set</span> the execution policy to <span class="string">&#x27;RemoteSigned&#x27;</span> please run :</span><br><span class="line"><span class="string">&#x27;Set-ExecutionPolicy RemoteSigned -scope CurrentUser&#x27;</span></span><br></pre></td></tr></table></figure><p>此时我们需要更改执行策略：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -scope CurrentUser</span><br></pre></td></tr></table></figure><p>它会提示以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170</span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): y</span><br></pre></td></tr></table></figure><p>我们输入 <code>Y</code> 回车即可，然后重新执行安装命令 <code>iwr -useb get.scoop.sh | iex</code> 稍候就会看到安装成功的提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Downloading scoop...</span><br><span class="line">Extracting...</span><br><span class="line">Creating shim...                                                                       Downloading main bucket...                                                             Extracting...                                                                         Adding ~\scoop\shims to your path.                                                     <span class="string">&#x27;lastupdate&#x27;</span> has been <span class="built_in">set</span> to <span class="string">&#x27;2019-11-29T10:43:11.9330495+08:00&#x27;</span>                       Scoop was installed successfully!</span><br><span class="line">Type <span class="string">&#x27;scoop help&#x27;</span> <span class="keyword">for</span> instructions.</span><br></pre></td></tr></table></figure><p>到此已经安装完成</p><h3 id="验证-scoop-安装成功"><a href="#验证-scoop-安装成功" class="headerlink" title="验证 scoop 安装成功"></a>验证 <code>scoop</code> 安装成功</h3><p>在命令行中执行： <code>scoop help</code> 会得到以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator&gt; scoop <span class="built_in">help</span></span><br><span class="line">Usage: scoop &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful commands are:</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span>       Manage scoop aliases</span><br><span class="line">bucket      Manage Scoop buckets</span><br><span class="line">cache       Show or clear the download cache</span><br><span class="line">checkup     Check <span class="keyword">for</span> potential problems</span><br><span class="line">cleanup     Cleanup apps by removing old versions</span><br><span class="line">config      Get or <span class="built_in">set</span> configuration values</span><br><span class="line">create      Create a custom app manifest</span><br><span class="line">depends     List dependencies <span class="keyword">for</span> an app</span><br><span class="line"><span class="built_in">export</span>      Exports (an importable) list of installed apps</span><br><span class="line"><span class="built_in">help</span>        Show <span class="built_in">help</span> <span class="keyword">for</span> a <span class="built_in">command</span></span><br><span class="line">hold        Hold an app to <span class="built_in">disable</span> updates</span><br><span class="line">home        Opens the app homepage</span><br><span class="line">info        Display information about an app</span><br><span class="line">install     Install apps</span><br><span class="line">list        List installed apps</span><br><span class="line">prefix      Returns the path to the specified app</span><br><span class="line">reset       Reset an app to resolve conflicts</span><br><span class="line">search      Search available apps</span><br><span class="line">status      Show status and check <span class="keyword">for</span> new app versions</span><br><span class="line">unhold      Unhold an app to <span class="built_in">enable</span> updates</span><br><span class="line">uninstall   Uninstall an app</span><br><span class="line">update      Update apps, or Scoop itself</span><br><span class="line">virustotal  Look <span class="keyword">for</span> app<span class="string">&#x27;s hash on virustotal.com</span></span><br><span class="line"><span class="string">which       Locate a shim/executable (similar to &#x27;</span><span class="built_in">which</span><span class="string">&#x27; on Linux)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Type &#x27;</span>scoop <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;<span class="string">&#x27; to get help for a specific command.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天介绍一款在Windows下的命令安装程序，用过Linux的都懂，在Linux下有一个包管理器用来安装应用，比如 &lt;code&gt;Ubuntu&lt;/code&gt; 的 &lt;code&gt;apt&lt;/code&gt; 和 &lt;code&gt;apt-get&lt;/code&gt; ，以及 &lt;code&gt;CentOS&lt;/code&gt; 的 &lt;code&gt;yum&lt;/code&gt; 这些，那么在Windows下有没有类似的软件或者工具呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有！那就是 &lt;code&gt;scoop&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;scoop-Windows的命令安装程序&quot;&gt;&lt;a href=&quot;#scoop-Windows的命令安装程序&quot; class=&quot;headerlink&quot; title=&quot;scoop - Windows的命令安装程序&quot;&gt;&lt;/a&gt;&lt;code&gt;scoop&lt;/code&gt; - Windows的命令安装程序&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud 和 Spring Boot 对应的版本关系说明</title>
    <link href="https://houkunlin.gitee.io/2019/11/15/spring-cloud-version/"/>
    <id>https://houkunlin.gitee.io/2019/11/15/spring-cloud-version/</id>
    <published>2019-11-15T02:31:07.000Z</published>
    <updated>2019-11-15T02:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考博客：<a href="https://www.zhaofeida.com/articles/2019/10/15/1571131822791.html">https://www.zhaofeida.com/articles/2019/10/15/1571131822791.html</a></p><p>官网地址：<a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;Finchley.M2&quot;: &quot;Spring Boot &gt;&#x3D;2.0.0.M3 and &lt;2.0.0.M5&quot;,</span><br><span class="line">&quot;Finchley.M3&quot;: &quot;Spring Boot &gt;&#x3D;2.0.0.M5 and &lt;&#x3D;2.0.0.M5&quot;,</span><br><span class="line">&quot;Finchley.M4&quot;: &quot;Spring Boot &gt;&#x3D;2.0.0.M6 and &lt;&#x3D;2.0.0.M6&quot;,</span><br><span class="line">&quot;Finchley.M5&quot;: &quot;Spring Boot &gt;&#x3D;2.0.0.M7 and &lt;&#x3D;2.0.0.M7&quot;,</span><br><span class="line">&quot;Finchley.M6&quot;: &quot;Spring Boot &gt;&#x3D;2.0.0.RC1 and &lt;&#x3D;2.0.0.RC1&quot;,</span><br><span class="line">&quot;Finchley.M7&quot;: &quot;Spring Boot &gt;&#x3D;2.0.0.RC2 and &lt;&#x3D;2.0.0.RC2&quot;,</span><br><span class="line">&quot;Finchley.M9&quot;: &quot;Spring Boot &gt;&#x3D;2.0.0.RELEASE and &lt;&#x3D;2.0.0.RELEASE&quot;,</span><br><span class="line">&quot;Finchley.RC1&quot;: &quot;Spring Boot &gt;&#x3D;2.0.1.RELEASE and &lt;2.0.2.RELEASE&quot;,</span><br><span class="line">&quot;Finchley.RC2&quot;: &quot;Spring Boot &gt;&#x3D;2.0.2.RELEASE and &lt;2.0.3.RELEASE&quot;,</span><br><span class="line">&quot;Finchley.SR4&quot;: &quot;Spring Boot &gt;&#x3D;2.0.3.RELEASE and &lt;2.0.999.BUILD-SNAPSHOT&quot;,</span><br><span class="line">&quot;Finchley.BUILD-SNAPSHOT&quot;: &quot;Spring Boot &gt;&#x3D;2.0.999.BUILD-SNAPSHOT and &lt;2.1.0.M3&quot;,</span><br><span class="line">&quot;Greenwich.M1&quot;: &quot;Spring Boot &gt;&#x3D;2.1.0.M3 and &lt;2.1.0.RELEASE&quot;,</span><br><span class="line">&quot;Greenwich.SR3&quot;: &quot;Spring Boot &gt;&#x3D;2.1.0.RELEASE and &lt;2.1.11.BUILD-SNAPSHOT&quot;,</span><br><span class="line">&quot;Greenwich.BUILD-SNAPSHOT&quot;: &quot;Spring Boot &gt;&#x3D;2.1.11.BUILD-SNAPSHOT and &lt;2.2.0.M4&quot;,</span><br><span class="line">&quot;Hoxton.RC2&quot;: &quot;Spring Boot &gt;&#x3D;2.2.0.M4 and &lt;2.2.2.BUILD-SNAPSHOT&quot;,</span><br><span class="line">&quot;Hoxton.BUILD-SNAPSHOT&quot;: &quot;Spring Boot &gt;&#x3D;2.2.2.BUILD-SNAPSHOT&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考博客：&lt;a href=&quot;https://www.zhaofeida.com/articles/2019/10/15/1571131822791.html&quot;&gt;https://www.zhaofeida.com/articles/2019/10/15/1571131822791.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://start.spring.io/actuator/info&quot;&gt;https://start.spring.io/actuator/info&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.M2&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.0.M3 and &amp;lt;2.0.0.M5&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.M3&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.0.M5 and &amp;lt;&amp;#x3D;2.0.0.M5&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.M4&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.0.M6 and &amp;lt;&amp;#x3D;2.0.0.M6&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.M5&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.0.M7 and &amp;lt;&amp;#x3D;2.0.0.M7&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.M6&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.0.RC1 and &amp;lt;&amp;#x3D;2.0.0.RC1&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.M7&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.0.RC2 and &amp;lt;&amp;#x3D;2.0.0.RC2&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.M9&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.0.RELEASE and &amp;lt;&amp;#x3D;2.0.0.RELEASE&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.RC1&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.1.RELEASE and &amp;lt;2.0.2.RELEASE&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.RC2&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.2.RELEASE and &amp;lt;2.0.3.RELEASE&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.SR4&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.3.RELEASE and &amp;lt;2.0.999.BUILD-SNAPSHOT&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Finchley.BUILD-SNAPSHOT&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.0.999.BUILD-SNAPSHOT and &amp;lt;2.1.0.M3&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Greenwich.M1&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.1.0.M3 and &amp;lt;2.1.0.RELEASE&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Greenwich.SR3&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.1.0.RELEASE and &amp;lt;2.1.11.BUILD-SNAPSHOT&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Greenwich.BUILD-SNAPSHOT&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.1.11.BUILD-SNAPSHOT and &amp;lt;2.2.0.M4&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Hoxton.RC2&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.2.0.M4 and &amp;lt;2.2.2.BUILD-SNAPSHOT&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Hoxton.BUILD-SNAPSHOT&amp;quot;: &amp;quot;Spring Boot &amp;gt;&amp;#x3D;2.2.2.BUILD-SNAPSHOT&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>达梦数据库培训内容操作记录</title>
    <link href="https://houkunlin.gitee.io/2019/09/16/database-dameng/"/>
    <id>https://houkunlin.gitee.io/2019/09/16/database-dameng/</id>
    <published>2019-09-16T08:14:20.000Z</published>
    <updated>2019-09-16T08:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据库安装准备"><a href="#1-数据库安装准备" class="headerlink" title="1. 数据库安装准备 "></a>1. 数据库安装准备 <span id="index01"></span></h2><h3 id="1-1-系统参数检验："><a href="#1-1-系统参数检验：" class="headerlink" title="1.1 系统参数检验："></a>1.1 系统参数检验：<span id="index01.01"></span></h3><ul><li>检验最大可打开文件数目 <ul><li><code>ulimit -n</code> 检查可打开文件最大数目</li><li><code>ulimit -n $&#123;number&#125;</code> 设置可打开文件最大数目</li><li><code>vi /etc/security/limits.conf</code> 在里面添加  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 给所有用户添加最大文件打开数目，该方式无法对root用户生效，root用户需要单独配置</span><br><span class="line">*   soft    nofile  65535</span><br><span class="line">*   hard    nofile  65536</span><br><span class="line"></span><br><span class="line"># 给root用户添加最大文件打开数目，root用户需要单独的配置</span><br><span class="line">root    soft    nofile  65535</span><br><span class="line">root    hard    nofile  65536</span><br></pre></td></tr></table></figure>  这个操作对root用户和其他所有用户设置最大文件打开数目，设置完后注销当前用户即可生效。</li></ul></li></ul><h3 id="1-2-添加数据库用户：dmdba"><a href="#1-2-添加数据库用户：dmdba" class="headerlink" title="1.2 添加数据库用户：dmdba"></a>1.2 添加数据库用户：<code>dmdba</code><span id="index01.02"></span></h3><ul><li>在<code>root</code>用户下操作</li><li><code>id dmdba</code> 检查用户是否存在</li><li><code>groupadd dinstall</code> 添加用户群组</li><li><code>useradd -g dinstall dmdba</code> 添加用户<code>dmdba</code>并分配到群组<code>dinstall</code></li><li><code>password dmdba</code> 给用户设置密码</li></ul><h3 id="1-3-挂载达梦数据库ISO镜像文件"><a href="#1-3-挂载达梦数据库ISO镜像文件" class="headerlink" title="1.3 挂载达梦数据库ISO镜像文件 "></a>1.3 挂载达梦数据库ISO镜像文件 <span id="index01.03"></span></h3><p>在<code>root</code>用户执行：<code>mount -o loop $DM_ISO_PATH $INSTALL_PATH</code>这条命令把镜像文件<code>$DM_ISO_PATH</code>挂载到系统的路径<code>$INSTALL_PATH</code>。<br><code>mount</code>命令必须在root权限下执行，在普通用户下执行会报错。</p><h2 id="2-安装数据库"><a href="#2-安装数据库" class="headerlink" title="2. 安装数据库 "></a>2. 安装数据库 <span id="index02"></span></h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装 "></a>2.1 安装 <span id="index02.01"></span></h3><ul><li>个人建议在root用户下直接安装，安装好后再切换到普通用户</li><li><code>cd $INSTALL_PATH</code> 进入到安装包路径</li><li><code>./DMInstall.bin</code> 执行安装文件<ul><li>如果提示权限不足，请在<code>root</code>用户下执行<code>chmod +x DMInstall.bin</code>给安装文件添加可执行权限</li></ul></li><li>根据提示一路下一步</li><li>如果在<code>roo</code>用户下执行安装，在安装完后执行<code>chown dmdba:dinstall -R $DM_HOME</code>命令，把达梦数据库的所有权限赋给<code>dmdba</code>用户，否则会出现在<code>dmdba</code>用户无法使用一些基础命令问题</li><li>让系统所有用户都可以执行达梦数据库命令：<code>chmod -R 777 $DM_HOME/bin $DM_HOME/tool</code></li></ul><h3 id="2-2-系统环境变量配置"><a href="#2-2-系统环境变量配置" class="headerlink" title="2.2 系统环境变量配置 "></a>2.2 系统环境变量配置 <span id="index02.02"></span></h3><ul><li><p><code>vi ~/.bash_profile</code> 配置当前用户的环境变量</p></li><li><p><code>vi /etc/profile</code> 在以<code>root</code>权限打开该文件，配置所有用户的环境变量</p></li><li><p>在文件的尾部插入内容</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DM_HOME=<span class="comment">#达梦数据库安装路径</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$DM_HOME</span>/bin:<span class="variable">$DM_HOME</span>/tool</span><br></pre></td></tr></table></figure></li><li><p>然后刷新环境变量：<code>source ~/.bash_profile</code> 和 <code>source /etc/profile</code></p></li></ul><h2 id="3-创建数据库实例（初始化数据库）"><a href="#3-创建数据库实例（初始化数据库）" class="headerlink" title="3. 创建数据库实例（初始化数据库） "></a>3. 创建数据库实例（初始化数据库） <span id="index03"></span></h2><p>初始化数据库使用图形化界面初始化比较方便，很直观，一般情况下直接下一步就行了，其他的基本上都不用管，如果想要自定义，那就在初始化的时候注意一下相关的参数，稍微改一下就行了。</p><h2 id="4-数据库实例的启动和关闭"><a href="#4-数据库实例的启动和关闭" class="headerlink" title="4. 数据库实例的启动和关闭 "></a>4. 数据库实例的启动和关闭 <span id="index04"></span></h2><p>根据前面的创建数据库实例，我们得到一个实例名：<code>DMSERVER</code>(默认的)</p><ul><li><code>service DmServiceDMSERVER start</code> 启动数据库实例</li><li><code>service DmServiceDMSERVER stop</code> 停止数据库实例</li><li><code>service DmServiceDMSERVER restart</code> 重启数据库实例</li><li>其中的<code>DmServiceDMSERVER</code>服务名称是根据创建数据库实例的时候有个实例名<code>DMSERVER</code>然后和<code>DmService</code>拼接起来得到的，也可以执行<code>ls /etc/init.d/|grep DmService</code>查看系统中注册了哪些达梦数据库实例</li></ul><h2 id="5-连接数据库命令：-disql"><a href="#5-连接数据库命令：-disql" class="headerlink" title="5. 连接数据库命令： disql "></a>5. 连接数据库命令： disql <span id="index05"></span></h2><p>在命令行中连接达梦数据库是使用<code>disql</code>这个命令，如果直接输入<code>disql</code>提示无此命令的时候可能是环境变量没有配置好，此时请参考<a href="#index02.02">安装数据库:系统环境变量配置</a></p><ul><li>语法：<code>disql [用户名]/[密码]@[主机]:[端口]</code>，示例：<code>disql sysdba/password@dameng.com:5236</code></li><li>也可以直接输入<code>disql</code>命令，然后根据提示输入用户名和密码</li></ul><h2 id="6-切换数据库状态"><a href="#6-切换数据库状态" class="headerlink" title="6. 切换数据库状态 "></a>6. 切换数据库状态 <span id="index06"></span></h2><p>数据库状态有三种：<code>mount</code>配置模式、<code>open</code>打开模式、<code>suspend</code>挂起模式。</p><ul><li>语法：<code>alter database 状态值</code>，示例切换为打开状态：<code>alter database open</code></li><li>注意：该命令需要在<code>disql</code>连接到数据库后执行</li></ul><h2 id="7-SQL语句一些基础使用"><a href="#7-SQL语句一些基础使用" class="headerlink" title="7. SQL语句一些基础使用"></a>7. SQL语句一些基础使用</h2><ul><li><code>between</code> 示例：<code>where age between 18 and 25</code></li><li><code>round</code> 四舍五入 <code>round(4.5) = 5</code> <code>round(56.789) = 56.79</code></li><li><code>asb</code> 绝对值 <code>asb(-1) = 1</code></li><li><code>mod</code> 取模 <code>10 mod 3 = 1</code></li><li><code>upper</code> 转换成大写 <code>upper(&#39;aBc&#39;) = &#39;ABC&#39;</code></li><li><code>lower</code> 转换成小写 <code>lower(&#39;AbC&#39;) = &#39;abc&#39;</code></li><li><code>initcap</code> 单词首字母大写 <code>initcap(&#39;user name&#39;) = &#39;User Name&#39;</code></li><li><code>instr</code> 查找字符串位置 <code>instr(&#39;this is varchar&#39;,&#39;var&#39;) = 9</code></li><li><code>substr</code> 截取字符串 <code>substr(&#39;this is varchar&#39;,3,7) = &#39;is is v&#39;</code></li><li><code>lpad</code> 左侧补齐空格 <code>lpad(&#39;a&#39;,3) = &#39;  a&#39;</code></li><li><code>rpad</code> 右侧补齐空格 <code>rpad(&#39;a&#39;,3) = &#39;a  &#39;</code></li><li><code>trim</code> 删除首尾空格 <code>trim(&#39; a  &#39;) = &#39;a&#39;</code></li><li><code>concat</code> 字符串连接 <code>concat(&#39;1&#39;,&#39;a&#39;,&#39;c&#39;,&#39;2,&#39;) = &#39;1ac2,&#39;</code></li><li><code>||</code> 字符串连接 <code>&#39;1&#39;||&#39;a&#39;||&#39;c&#39;||&#39;2,&#39; = &#39;1ac2,&#39;</code></li><li><code>sysdate</code> 系统时间（精确到秒）</li><li><code>now</code> 系统时间（精确到百万分之一秒）</li><li><code>next_day</code> 计算某日期下周某一天<code>下一个周日：next_day(&#39;2019-09-12&#39;,1) = &#39;2019-09-15&#39;</code>，其中1-7表示周日到周六</li><li><code>last_day</code> 某月最后一天 <code>last_day(&#39;2019-09-12&#39;) = &#39;2019-09-30&#39;</code></li><li><code>to_char</code> 时间日期格式化 <code>to_char(sysdate,&#39;yyyy-mm-dd hh24:mi:ss&#39;) = &#39;2019-09-06 22:51:29&#39;</code></li><li><code>any</code> 查询一些列集合的信息，只要匹配成功其中一条数据即可 <code>where field &gt;any(select...) and field &lt;any(select...)</code></li><li><code>all</code> 查询一些列集合的信息，需要匹配成功其中全部数据 <code>where field &gt;all(select...) and field &lt;all(select...)</code></li><li><code>count</code> 计数 <code>select count(*),count(field)</code></li><li><code>sum</code> 求和 <code>select sum(field)</code></li><li><code>avg</code> 平均数 <code>select avg(field)</code></li><li><code>max</code> 最大值 <code>select max(field)</code></li><li><code>min</code> 最小值 <code>select min(field)</code></li><li><code>group by</code> 分组统计 <code>select count(field),sum(field),avg(field),max(field),min(field),type from tableName group by type</code></li><li><code>order by asc/desc</code> 排序（<code>asc</code>升序/<code>desc</code>降序） <code>select * from tableName where id &gt; 100 order by id desc limit,2,10</code></li><li><code>join</code> 内连接（自然连接） <code>select * from t1 join t2 on t1.id1 = t2.id2</code></li><li><code>left join</code> 左外连接 <code>select * from t1 left join t2 on t1.id1 = t2.id2</code></li><li><code>right join</code> 右外连接 <code>select * from t1 right join t2 on t1.id1 = t2.id2</code></li><li><code>full join</code> 全外连接 <code>select * from t1 full join t2 on t1.id1 = t2.id2</code></li><li><code>exsits</code> 是否存在 <code>select * from t1 where id exsits (select id from t1 where name is null)</code></li></ul><h2 id="8-数据库设置成归档模式运行"><a href="#8-数据库设置成归档模式运行" class="headerlink" title="8. 数据库设置成归档模式运行"></a>8. 数据库设置成归档模式运行</h2><h3 id="8-1-管理工具操作方式"><a href="#8-1-管理工具操作方式" class="headerlink" title="8.1 管理工具操作方式"></a>8.1 管理工具操作方式</h3><p>其实这个操作在管理工具里面进行是非常方便的，并且可以很直观的配置。</p><ol><li>打开DM管理工具</li><li>连接上数据库</li><li>在数据库连接的条目上单击右键，在弹出的菜单中选择<strong>管理服务器</strong></li><li>在<strong>管理服务器</strong>窗口左侧的<strong>系统管理</strong>切换数据库状态为<strong>配置</strong>模式</li><li>在<strong>管理服务器</strong>窗口左侧的<strong>归档配置</strong>中开启归档模式和配置归档路径、归档类型、文件大小等</li><li>然后再到<strong>系统管理</strong>把数据库切换为<strong>打开</strong>状态</li><li>最后确定即可</li></ol><h3 id="8-2-命令行操作方式"><a href="#8-2-命令行操作方式" class="headerlink" title="8.2 命令行操作方式"></a>8.2 命令行操作方式</h3><ul><li><code>alter database mount;</code> 切换到配置模式</li><li><code>alter database add archivelog &#39;type=local,dest=/dm7/arch,file_size=64,space_limit=0&#39;;</code> 配置归档文件</li><li><code>alter database archivelog;</code> 切换到归档状态</li><li><code>alter database open;</code> 数据库切换到打开状态</li><li><code>select * from v$dm_arch_ini;</code> 检验是否切换成功</li></ul><p>数据库切换到归档状态后只有重启数据库服务才能实现热备，否则在进行热备的时候将提示以下错误信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误号:   -8216</span><br><span class="line"></span><br><span class="line">错误消息: 指定或者默认归档目录中找不到完整归档日志</span><br></pre></td></tr></table></figure><h2 id="9-同义词管理"><a href="#9-同义词管理" class="headerlink" title="9. 同义词管理"></a>9. 同义词管理</h2><p>同义词是数据库对象的一个别名，经常用于简化对象访问和提高对象访问的安全性，和视图的功能类似，是一种映射关系，能够在不同的数据库用户之间实现无缝交互。<br>同义词有两种类型，分别是公用同义词与私有同义词。普通用户创建的同义词一般都是私有同义词，公有同义词一般由DBA创建，普通用户如果希望创建同义词，则需要CREATE PUBLIC SYNONYM这个系统权限。</p><h3 id="9-1-公用同义词"><a href="#9-1-公用同义词" class="headerlink" title="9.1 公用同义词"></a>9.1 公用同义词</h3><p>由一个特殊的用户组Public所拥有。顾名思义，数据库中所有的用户都可以使用公用同义词。公用同义词往往用来标示一些比较普通的数据库对象，这些对象往往大家都需要引用。</p><ul><li>创建命令：<code>create public synonym 同义词名称 for 模式名称.表名称;</code></li><li>修改命令：<code>create or replace public synonym 同义词名称 for 模式名称.表名称;</code></li><li>删除命令：<code>drop public synonym 同义词名称</code></li></ul><h3 id="9-2-私有同义词"><a href="#9-2-私有同义词" class="headerlink" title="9.2 私有同义词"></a>9.2 私有同义词</h3><p>它是跟公用同义词所对应，他是由创建他的用户所有。当然，这个同义词的创建者，可以通过授权控制其他用户是否有权使用属于自己的私有同义词。</p><ul><li>创建命令：<code>create synonym 模式名称.同义词名称 for 模式名称.表名称;</code></li><li>修改命令：<code>create or replace synonym 模式名称.同义词名称 for 模式名称.表名称;</code></li><li>删除命令：<code>drop synonym 模式名称.同义词名称</code></li></ul><h2 id="10-数据库备份"><a href="#10-数据库备份" class="headerlink" title="10. 数据库备份"></a>10. 数据库备份</h2><h3 id="10-1-物理备份"><a href="#10-1-物理备份" class="headerlink" title="10.1 物理备份"></a>10.1 物理备份</h3><h4 id="10-1-1-冷备"><a href="#10-1-1-冷备" class="headerlink" title="10.1.1 冷备"></a>10.1.1 冷备</h4><p>条件：DMAP服务打开状态，数据库关闭状态</p><h5 id="命令行执行命令备份"><a href="#命令行执行命令备份" class="headerlink" title="命令行执行命令备份"></a>命令行执行命令备份</h5><p>命令：<code>backup database &#39;$DM_HOME/data/实例名称/dm.ini&#39;</code><br>命令执行条件：需要进入<code>$DM_HOME/bin</code>路径下，执行<code>dmrman</code>命令，在<code>dmrman</code>交互中输入上方的备份命令</p><h5 id="操作界面执行命令备份"><a href="#操作界面执行命令备份" class="headerlink" title="操作界面执行命令备份"></a>操作界面执行命令备份</h5><p>打开<strong>DM控制台工具</strong>，在左侧菜单<strong>备份还原</strong>里面进行备份，此方式可以很方便的操作备份数据库。</p><h4 id="10-1-2-热备"><a href="#10-1-2-热备" class="headerlink" title="10.1.2 热备"></a>10.1.2 热备</h4><h5 id="命令行执行命令备份-1"><a href="#命令行执行命令备份-1" class="headerlink" title="命令行执行命令备份"></a>命令行执行命令备份</h5><p>条件：DMAP服务打开状态，数据库打开状态，数据库开启归档模式</p><ul><li>完全备份：<code>backup database full backupset 备份保存路径;</code></li><li>增量备份：<code>backup database increment backupset 备份保存路径;</code></li></ul><h5 id="操作界面执行命令备份-1"><a href="#操作界面执行命令备份-1" class="headerlink" title="操作界面执行命令备份"></a>操作界面执行命令备份</h5><p>在<strong>DM管理工具</strong>中，连接数据库后，在左侧有一个<strong>备份</strong>菜单，在此处可以很方便的对<strong>库、表、表空间、归档</strong>进行备份，只需要根据页面提示进行操作</p><h3 id="10-2-逻辑备份"><a href="#10-2-逻辑备份" class="headerlink" title="10.2 逻辑备份"></a>10.2 逻辑备份</h3><ul><li>导出：<code>dexp sysdba/密码 file=/dm7/backup/dexp_bak.dmp tables=emp;</code></li><li>导入：<code>dimp sysdba/密码 file=/dm7/backup/dexp_bak.dmp tables=emp ignore=y</code></li></ul><h3 id="10-3-表空间和表备份"><a href="#10-3-表空间和表备份" class="headerlink" title="10.3 表空间和表备份"></a>10.3 表空间和表备份</h3><ul><li>表空间备份：<code>backup tablespace dmhr backupset 备份保存路径;</code></li><li>表备份：<code>backup table dmhr.employee backupset 备份保存路径;</code></li></ul><h2 id="11-作业管理"><a href="#11-作业管理" class="headerlink" title="11. 作业管理"></a>11. 作业管理</h2><p>在<strong>DM管理工具</strong>中，连接数据库后，在左侧有一个<strong>代理</strong>菜单，我们创建代理后才能够创建作业，每个作业可以有多个步骤，每个作业也可以有多个作业调度，一个调度就是一个作业的时间触发条件，比如按天执行、按月执行、定时执行等，每个作业可以有多个时间触发条件，作业被触发执行后，将会按照作业设置的步骤一次执行这些步骤。</p><h2 id="12-存储过程"><a href="#12-存储过程" class="headerlink" title="12. 存储过程"></a>12. 存储过程</h2><p>存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。<br>存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。<br>存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 语句模板</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 模式名称.触发器名称( <span class="keyword">IN</span> VACHAR(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    <span class="comment">/* 变量说明部分 */</span></span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">/* 触发器执行体 */</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 示例：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> <span class="string">&quot;SYSDBA&quot;</span>.<span class="string">&quot;aa&quot;</span>(<span class="string">&quot;BH&quot;</span> <span class="keyword">IN</span> <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    dept <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">select</span> department_id <span class="keyword">into</span> dept <span class="keyword">from</span> emp <span class="keyword">where</span> employee_id = bh;</span><br><span class="line">    print(dept);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h2 id="13-触发器"><a href="#13-触发器" class="headerlink" title="13. 触发器"></a>13. 触发器</h2><p>触发器分为<strong>库级、模式级、表级、视图级</strong>，触发器可以在操作之前或者操作之后执行，可以是DD、DML、系统事件条件触发执行<br>触发器有如下作用：</p><ul><li>可在写入数据表前，强制检验或转换数据。</li><li>触发器发生错误时，异动的结果会被撤销。</li><li>部分数据库管理系统可以针对数据定义语言（DDL）使用触发器，称为DDL触发器。</li><li>可依照特定的情况，替换异动的指令 (INSTEAD OF)。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 语句模板</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> 模式名称.触发器名称</span><br><span class="line"><span class="keyword">before</span> <span class="keyword">update</span> <span class="keyword">of</span> 字段 <span class="keyword">on</span> 模式名称.表名称</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">/* 触发器执行体 */</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> TAB2 <span class="keyword">values</span>(:old.salary,:new.salary);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 示例：在班级与学生关联关系的记录（学号、班级名称）被发生改变时插入日志</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> <span class="string">&quot;USER01&quot;</span>.<span class="string">&quot;ttt01&quot;</span></span><br><span class="line"><span class="keyword">after</span> <span class="keyword">INSERT</span> <span class="keyword">or</span> <span class="keyword">UPDATE</span> <span class="keyword">of</span> <span class="string">&quot;STUID&quot;</span>,<span class="string">&quot;NAME&quot;</span></span><br><span class="line"><span class="keyword">on</span> <span class="string">&quot;USER01&quot;</span>.<span class="string">&quot;CLASSNAME&quot;</span></span><br><span class="line"><span class="keyword">referencing</span> <span class="keyword">OLD</span> <span class="keyword">ROW</span> <span class="keyword">AS</span> <span class="string">&quot;OLD&quot;</span> <span class="keyword">NEW</span> <span class="keyword">ROW</span> <span class="keyword">AS</span> <span class="string">&quot;NEW&quot;</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">        <span class="comment">/*触发器体*/</span></span><br><span class="line">        print(:OLD.STUID);</span><br><span class="line">        print(:OLD.NAME);</span><br><span class="line">        print(:NEW.STUID);</span><br><span class="line">        print(:NEW.NAME);</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">&quot;USER01&quot;</span>.<span class="string">&quot;LOG&quot;</span>(<span class="string">&quot;TEXT&quot;</span>)</span><br><span class="line">        <span class="keyword">VALUES</span></span><br><span class="line">        (<span class="keyword">concat</span>(<span class="string">&#x27;学号：旧STUID：&#x27;</span>,:OLD.STUID,<span class="string">&#x27;，新STUID：&#x27;</span>,:NEW.STUID,<span class="string">&#x27;，时间：&#x27;</span>,<span class="keyword">now</span>()));</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">&quot;USER01&quot;</span>.<span class="string">&quot;LOG&quot;</span>(<span class="string">&quot;TEXT&quot;</span>)</span><br><span class="line">        <span class="keyword">VALUES</span></span><br><span class="line">        (<span class="keyword">concat</span>(<span class="string">&#x27;姓名：旧NAME：&#x27;</span>,:OLD.NAME,<span class="string">&#x27;，新NAME：&#x27;</span>,:NEW.NAME,<span class="string">&#x27;，时间：&#x27;</span>,<span class="keyword">now</span>()));</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="14-控制文件管理"><a href="#14-控制文件管理" class="headerlink" title="14. 控制文件管理"></a>14. 控制文件管理</h2><p>控制文件管理常用的有两个，一个是控制文件备份路径，另一个是控制文件备份数目，这两个参数可以到<strong>DM控制台工具</strong>配置，在左侧的<strong>DM控制台&gt;服务器配置&gt;实例配置&gt;数据库实例</strong>里面搜索<code>CTL</code>可以看到控制文件的相关参数，修改保存后重启服务器即可生效。</p><h2 id="15-重做日志文件管理"><a href="#15-重做日志文件管理" class="headerlink" title="15. 重做日志文件管理"></a>15. 重做日志文件管理</h2><p>重置日志文件管理在<strong>DM管理工具</strong>中，连上服务器后，在左侧的实例右键选择<strong>管理服务器</strong>，在弹出的窗口中可以看到有<strong>日志文件</strong>选项，在这里可以管理数据库的日志文件，包含添加日志文件和修改日志文件大小。</p><h2 id="16-角色管理"><a href="#16-角色管理" class="headerlink" title="16. 角色管理"></a>16. 角色管理</h2><p>角色管理在管理工具中操作更加方便。<br>在<strong>DM管理工具</strong>中，连上服务器后，在左侧有个角色菜单，在这里管理系统中的角色信息，可以很方便的新增、修改、删除角色信息，并且给角色分配权限，这些操作使用管理工具将会让我们的工作变得更加简单。</p><ul><li>系统权限：对系统的一些操作，比如用户、模式、表、视图等</li><li>对象权限：针对某个模式下的表、视图、过程进行授权，可以精确到某个表的某个列属性来授权</li></ul><h2 id="17-用户管理"><a href="#17-用户管理" class="headerlink" title="17. 用户管理"></a>17. 用户管理</h2><p>系统中存在四种类型的用户<strong>管理用户、审计用户、安全用户、系统用户</strong>，一般情况下我们使用的是<strong>管理用户</strong>类型的用户。<br>在创建用户的时候，我们可以对用户分配指定的表空间、索引表空间、角色、系统权限、对象权限、资源权限，其中资源权限定义了用户的资源限制，比如会话数、会话空闲期、登录失败次数、口令有效期、口令锁定期等对用户与数据库连接、登录的一些限制。<br>如果有多个用户属于同一种类型，他们都拥有一些相同的权限，那么我们可以把这些相同的权限分配给一个新的角色，然后给用户分配这个角色，这样便于用户与权限的管理。</p><h2 id="18-常见问题"><a href="#18-常见问题" class="headerlink" title="18. 常见问题"></a>18. 常见问题</h2><h3 id="18-1-DMAP服务无法启动"><a href="#18-1-DMAP服务无法启动" class="headerlink" title="18.1 DMAP服务无法启动"></a>18.1 DMAP服务无法启动</h3><p>删除<code>$DM_HOME/bin/</code>目录下以<code>DM_PIPE_DMAP</code>开头的文件：<code>rm $DM_HOME/bin/DM_PIPE_DMAP*</code></p><h3 id="18-2-dmrman命令无法备份，提示连接管道超时或者打开-创建文件失败"><a href="#18-2-dmrman命令无法备份，提示连接管道超时或者打开-创建文件失败" class="headerlink" title="18.2 dmrman命令无法备份，提示连接管道超时或者打开/创建文件失败"></a>18.2 <code>dmrman</code>命令无法备份，提示连接管道超时或者打开/创建文件失败</h3><p>需要进入<code>$DM_HOME/bin</code>路径下再执行<code>dmrman</code>命令。<br>因为该命令会在当前目录下访问DMAP服务的管道文件，而DMAP的管道文件存放<code>$DM_HOME/bin</code>目录，但是<code>dmrman</code>命令又不够智能自动识别DMAP管道文件，该命令只会尝试在当前运行该命令的目录找管道文件，因此不在<code>$DM_HOME/bin</code>运行<code>dmrman</code>命令就会报错。</p><h3 id="18-3-使用DM控制台工具冷备数据库报连接管道超时"><a href="#18-3-使用DM控制台工具冷备数据库报连接管道超时" class="headerlink" title="18.3 使用DM控制台工具冷备数据库报连接管道超时"></a>18.3 使用DM控制台工具冷备数据库报连接管道超时</h3><p>在DM服务查看器中启动DMAP服务，切换到<code>dmdba</code>用户启动DM控制台工具，然后再执行备份操作，如果还有问题，可能是数据库安装目录里面的一些文件权限有问题，此时切换到<code>root</code>用户，给数据库目录设置权限<code>chown dmdba:dinstall -R $DM_HOME</code>，此时就能够正常的执行备份了。<br>为什么需要设置目录权限？可能是使用root用户安装数据库导致的遗留问题，里面有些文件/目录的权限被分配给了<code>root:root</code>，因此需要重新设置为<code>dmdba:dinstall</code>。</p><h3 id="18-4-为什么我的模式名、表名、列名写对了，但是语句还是报错"><a href="#18-4-为什么我的模式名、表名、列名写对了，但是语句还是报错" class="headerlink" title="18.4 为什么我的模式名、表名、列名写对了，但是语句还是报错"></a>18.4 为什么我的模式名、表名、列名写对了，但是语句还是报错</h3><p><strong>当遇到这个问题的时候，其实是真的输错了，错在大小写敏感的问题上了。</strong></p><pre><code>重点：当我们在命令行中创建表时，对表名、列名不使用双引号包含起来，此时这条语句无论是大写字母还是小写字母或者大小写混合，系统都会把没有用双引号包含的内容自动转换成大写的。同理，在select/insert/update/delete的时候，只要模式名、表名、列名没有用双引号包含起来，系统就会自动转换成为大写的。</code></pre><p>在DM管理工具中创建表的时候，管理工具为了保证我们的视觉与系统的一致性，会自动给所有的模式名、表名、列名加上双引号，因此此时你写的小写，那么保存的时候就是小写，这时候就容易造成一个很迷人的问题。</p><ul><li><p>示例说明：命令行操作<br>就是在命令行中创建表<code>create table test.tableName(name varchar(20) not null)</code>，会被系统翻译为：<code>create table &quot;TEST&quot;.&quot;TABLENAME&quot;(&quot;NAME&quot; varchar(20) not null)</code><br>在命令行中查询时情况是这样的：</p><ul><li><code>select * from test.tableName</code> 正常</li><li><code>select * from test.TableName</code> 正常</li><li><code>select * from test.TabLeName</code> 正常</li><li><code>select * from test.TABLENAME</code> 正常</li><li><code>select * from test.TABLENAME where name = 1</code> 正常</li><li><code>select * from test.TABLENAME where NAME = 1</code> 正常</li><li><code>select * from test.TABLENAME where &quot;NAME&quot; = 1</code> 正常</li><li><code>select * from test.&quot;TABLENAME&quot; where &quot;NAME&quot; = 1</code> 正常</li><li><code>select * from test.&quot;tableName&quot;</code> 错误</li><li><code>select * from test.TABLENAME where &quot;name&quot; = 1</code> 错误</li></ul></li><li><p>示例说明：管理工具操作<br>但是我们在DM管理工具中创建一个<code>tableName</code>和列<code>name</code>，工具会为我们自动给表名、列名添加双引号，实际上的语句就是这样的：<code>create table &quot;TEST&quot;.&quot;tableName&quot;(&quot;name&quot; varchar(20) not null)</code>，此时我们在命令行中插数据的时候会发现迷人的错误：</p><ul><li><code>select * from test.&quot;tableName&quot;</code> 正常</li><li><code>select * from test.&quot;tableName&quot; where &quot;name&quot; = 1</code> 正常</li><li><code>select * from test.TableName</code> 错误</li><li><code>select * from test.TabLeName</code> 错误</li><li><code>select * from test.TABLENAME</code> 错误</li><li><code>select * from test.&quot;tableName&quot; where name = 1</code> 错误</li><li><code>select * from test.&quot;tableName&quot; where NAME = 1</code> 错误</li></ul></li></ul><p>因此这个大小写敏感是一个很感人的事情，所有没有加引号的字母都被转为大写，而DM管理工具会为我们自动添加引号。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="dm-ini-几个常见关键词说明"><a href="#dm-ini-几个常见关键词说明" class="headerlink" title="dm.ini 几个常见关键词说明"></a>dm.ini 几个常见关键词说明</h3><ul><li><code>RECYCLE</code> 快速回收池</li><li><code>KEEP</code> 保留池</li><li><code>DICT_BUF_SIZE</code> 字典缓冲区</li><li><code>BUFFER</code> 缓冲区</li><li><code>RLOG_BUF_SIZE</code> 日志缓冲区的大小，单位page设置成2的幂次方</li><li><code>RLOG_POOL_SIZE</code> 最大日志缓冲区大小，单位为M</li><li><code>SORT</code> 排序缓冲区</li><li><code>CTL_PATH</code> 控制文件的存放路径</li><li><code>CTL_BAK_NUM</code> 控制文件的备份数量</li><li><code>CTL_BAK_PATH</code> 对控制文件做备份的路径</li></ul><h3 id="系统的一些表和视图"><a href="#系统的一些表和视图" class="headerlink" title="系统的一些表和视图"></a>系统的一些表和视图</h3><ul><li><code>dba_data_files</code> 数据文件、表空间</li><li><code>v$datafile</code> 数据文件</li><li><code>dba_tablespaces</code> 表空间</li><li><code>v$tablespace</code> 表空间</li><li><code>dba_free_space</code> 表空间剩余</li><li><code>v$instance</code> 数据库实例状态</li><li><code>v$dm_ini</code> 数据库参数，可以通过DM控制台工具更直观的查看和修改</li><li><code>v$sessions</code> 会话信息</li><li><code>v$datafile</code> 数据文件</li><li><code>v$rlogfile</code> 日志文件</li></ul><h3 id="常用的几个查询语句"><a href="#常用的几个查询语句" class="headerlink" title="常用的几个查询语句"></a>常用的几个查询语句</h3><ol><li><p>查询缓冲设置信息</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select para_name,para_value from v$dm_ini where para_name &#x3D; &#39;BUFFER&#39;;</span><br><span class="line">select para_name,para_value from v$dm_ini where para_name like &#39;%BUFFER%&#39;;</span><br></pre></td></tr></table></figure></li><li><p>查询数据库状态(查询实例)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select status$ from v$instance;</span><br></pre></td></tr></table></figure></li><li><p>查看某个参数的类型：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,type from v$parameter where name &#x3D; &#39;BUFFER&#39;;</span><br></pre></td></tr></table></figure></li><li><p>修改数据库的缓冲区大小：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公式：sp_set_para_value(scope, para_name, para_value)</span><br></pre></td></tr></table></figure></li><li><p>查看当前正在激活（运行）的会话</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select SESS_ID,sql_text,state from v$sessions where state &#x3D; &#39;ACTIVE&#39;;</span><br></pre></td></tr></table></figure></li><li><p>查看当前数据库文件存放路径</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select path from v$datafile;</span><br></pre></td></tr></table></figure></li><li><p>查看当前数据库的日志文件路径</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">路径：select path from v$rlogfile;</span><br><span class="line">路径+大小：select path, rlog_size&#x2F;1024&#x2F;1024 from v$rlogfile;</span><br><span class="line">修改日志文件大小：alter database resize logfile &#39;log file path&#39; to 512;</span><br></pre></td></tr></table></figure></li><li><p>查询表空间和数据文件对应关系</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select file_name,tablespace_name from dba_data_files;</span><br></pre></td></tr></table></figure></li><li><p>关闭一个长时间未完成的会话</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_close_session(会话ID);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-数据库安装准备&quot;&gt;&lt;a href=&quot;#1-数据库安装准备&quot; class=&quot;headerlink&quot; title=&quot;1. 数据库安装准备 &quot;&gt;&lt;/a&gt;1. 数据库安装准备 &lt;span id=&quot;index01&quot;&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-系统参数检验：&quot;&gt;&lt;a href=&quot;#1-1-系统参数检验：&quot; class=&quot;headerlink&quot; title=&quot;1.1 系统参数检验：&quot;&gt;&lt;/a&gt;1.1 系统参数检验：&lt;span id=&quot;index01.01&quot;&gt;&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;检验最大可打开文件数目 &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ulimit -n&lt;/code&gt; 检查可打开文件最大数目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ulimit -n $&amp;#123;number&amp;#125;&lt;/code&gt; 设置可打开文件最大数目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vi /etc/security/limits.conf&lt;/code&gt; 在里面添加  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 给所有用户添加最大文件打开数目，该方式无法对root用户生效，root用户需要单独配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*   soft    nofile  65535&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*   hard    nofile  65536&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 给root用户添加最大文件打开数目，root用户需要单独的配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root    soft    nofile  65535&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root    hard    nofile  65536&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  这个操作对root用户和其他所有用户设置最大文件打开数目，设置完后注销当前用户即可生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="达梦" scheme="https://houkunlin.gitee.io/tags/%E8%BE%BE%E6%A2%A6/"/>
    
    <category term="数据库" scheme="https://houkunlin.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下使用本地PAC文件代理导致谷歌浏览器无法走代理问题解决方案</title>
    <link href="https://houkunlin.gitee.io/2019/05/30/chrome-pac-error/"/>
    <id>https://houkunlin.gitee.io/2019/05/30/chrome-pac-error/</id>
    <published>2019-05-30T08:31:23.000Z</published>
    <updated>2019-05-30T08:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天升级了我ubuntu的谷歌浏览器，最新版本74.0.3729.169，具体为<code>版本 74.0.3729.169（正式版本）Built on Ubuntu , running on Ubuntu 18.04 （64 位）</code>，升级后出问题了，我的谷歌浏览器无法访问走代理了。</p><p>原始的pac路径为：file:///opt/autoproxy.pac</p><img src="/2019/05/30/chrome-pac-error/pac-local-file.png" class="" title="Ubuntu代理配置"><p>最后通过谷歌搜索搜到了这么一篇文章，<a href="https://www.oixxu.com/chrome-pac-error/">【正解】Chrome 使用 PAC 时出现 “网页可能暂时无法连接，或者它已永久性地移动到了新网址”</a></p><p>这篇文章指出了这么一个GitHub的链接<a href="https://github.com/FelisCatus/SwitchyOmega/issues/1474">ERR_MANDATORY_PROXY_CONFIGURATION_FAILED #1417</a>，其中有一个回复是这样的<a href="https://github.com/FelisCatus/SwitchyOmega/issues/1474#issuecomment-396818539">该回复楼层</a></p><pre><code>Seems it destn&#39;t work for --proxy-pac-url setting &quot;file:///xxx&quot; and &quot;data:...&quot;, but works for &quot;http://ip/xx.pac&quot;.So here&#39;s a workaround, which cannot update web page list automatically.    1. export the pac script file.    2. run a web server, and put the pac file in web server.    3. disable the extension or switch to system setting.    4. run with: chrome --proxy-pac-url=&quot;http://ip/xx.pac&quot;    I tried the workaround on one PC, it works, but didn&#39;t try more.@FelisCatus, If &quot;--proxy-pac-url&quot; not support &quot;data:...&quot; any more, it there other way to set proxy?</code></pre><p>他说谷歌浏览器在使用–proxy-pac-url参数时，不适用于<code>file://</code>和<code>data:</code>开头的协议或内容，在这两个协议上谷歌浏览器的代理将不能正常工作，但是它使用于<code>http://</code>协议。</p><p>因此他提出了一个解决方案，就是把我们的本地pac文件导出来，放到web服务器中，使用http协议访问这个pac文件，以及禁用我们的谷歌浏览器相关扩展。</p><p>因此我在我的Ubuntu下安装nginx，然后在配置文件中新增一个路径映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;autoproxy.pac &#123;</span><br><span class="line">    alias &#x2F;opt&#x2F;autoproxy.pac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以把我们的autoproxy.pac文件放到/var/www/html路径下，然后配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx，在浏览器测试访问<code>http://127.0.0.1/autoproxy.pac</code>确保这个路径能改正常访问这个pac文件即可。</p><p>之后更改我们的系统设置，然后重启谷歌浏览器即可正常的走代理。</p><img src="/2019/05/30/chrome-pac-error/pac-net-file.png" class="" title="Ubuntu代理配置">]]></content>
    
    
    <summary type="html">&lt;p&gt;今天升级了我ubuntu的谷歌浏览器，最新版本74.0.3729.169，具体为&lt;code&gt;版本 74.0.3729.169（正式版本）Built on Ubuntu , running on Ubuntu 18.04 （64 位）&lt;/code&gt;，升级后出问题了，我的谷歌浏览器无法访问走代理了。&lt;/p&gt;
&lt;p&gt;原始的pac路径为：file:///opt/autoproxy.pac&lt;/p&gt;
&lt;img src=&quot;/2019/05/30/chrome-pac-error/pac-local-file.png&quot; class title=&quot;Ubuntu代理配置&quot;&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Eclipse和IDEA同时开发WEB项目配置教程(springline)</title>
    <link href="https://houkunlin.gitee.io/2019/05/22/gxcerc-2019-05-22-study-03/"/>
    <id>https://houkunlin.gitee.io/2019/05/22/gxcerc-2019-05-22-study-03/</id>
    <published>2019-05-22T07:29:11.000Z</published>
    <updated>2019-05-22T07:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>时隔两天才更新日志，前两天偷了点懒，没有什么输出，也就没有什么可以写的。<br>今天写一下如何使用Eclipse和IDEA同时开发公司的这个demo项目，直接导入项目肯定多少是有一点问题的，因此需要做一些相关的配置，这篇日志就是说明如何更改和设置这些配置。</p><img src="/2019/05/22/gxcerc-2019-05-22-study-03/dir-info.png" class="" title="demo目录结构"><h2 id="Eclipse-开发工具"><a href="#Eclipse-开发工具" class="headerlink" title="Eclipse 开发工具"></a>Eclipse 开发工具</h2><p>步骤一肯定是导入了，这里就不说了。说点其他的东西。</p><h6 id="更改项目编码"><a href="#更改项目编码" class="headerlink" title="更改项目编码"></a>更改项目编码</h6><p>选中项目，右键》properties（快捷键Alt+Enter），进入到左侧Resource，修改项目编码为GBK</p><img src="/2019/05/22/gxcerc-2019-05-22-study-03/eclipse-properties-resource.png" class="" title="设置项目编码"><h6 id="设置项目Web部署相关配置"><a href="#设置项目Web部署相关配置" class="headerlink" title="设置项目Web部署相关配置"></a>设置项目Web部署相关配置</h6><p>在左侧Deployment Assembly选项卡中，设置项目路径对应的功能</p><img src="/2019/05/22/gxcerc-2019-05-22-study-03/eclipse-properties-deployment.png" class="" title="Deployment Assembly"><h6 id="设置项目JDK信息"><a href="#设置项目JDK信息" class="headerlink" title="设置项目JDK信息"></a>设置项目JDK信息</h6><p>在项目属性中，设置JDK版本信息</p><img src="/2019/05/22/gxcerc-2019-05-22-study-03/eclipse-properties-java-compiler.png" class="" title="JDK编译版本"><img src="/2019/05/22/gxcerc-2019-05-22-study-03/eclipse-properties-project-facets.png" class="" title="项目版本"><h6 id="设置项目依赖"><a href="#设置项目依赖" class="headerlink" title="设置项目依赖"></a>设置项目依赖</h6><p>在左侧 Java Build Path 选项卡中，设置项目的依赖信息，主要添加<code>JRE System Library</code>和<code>Server Runtime</code>和<code>Web App Libraries</code>，它们分别为：</p><ul><li>JRE System Library ：JDK环境的依赖</li><li>Server Runtime ：Tomcat环境的依赖</li><li>Web App Libraries：WEB-INF/lib依赖</li></ul><img src="/2019/05/22/gxcerc-2019-05-22-study-03/eclipse-properties-java-build-path.png" class="" title="Java Build Path Library"><img src="/2019/05/22/gxcerc-2019-05-22-study-03/eclipse-properties-java-build-path-add-library.png" class="" title="Java Build Path Add Library"><h6 id="配置Tomcat启动项，启动项目"><a href="#配置Tomcat启动项，启动项目" class="headerlink" title="配置Tomcat启动项，启动项目"></a>配置Tomcat启动项，启动项目</h6><p>关于这个步骤这里就不说了</p><h2 id="IDEA-开发工具"><a href="#IDEA-开发工具" class="headerlink" title="IDEA 开发工具"></a>IDEA 开发工具</h2><p>IDEA有很强的提示功能，如果项目配置不正确会在一些关键的地方报警告并且弹出修复提示，同时提供“修复”按钮，很多配置可以直接使用修复按钮解决</p><h6 id="更改项目编码-1"><a href="#更改项目编码-1" class="headerlink" title="更改项目编码"></a>更改项目编码</h6><p>选择菜单：File》Settings进入到设置（快捷键Ctrl+Alt+S），在左侧进入Editor》File Encodings选项，配置项目的编码</p><img src="/2019/05/22/gxcerc-2019-05-22-study-03/idea-settings-editor-file-encodings.png" class="" title="设置项目编码"><h6 id="设置项目信息"><a href="#设置项目信息" class="headerlink" title="设置项目信息"></a>设置项目信息</h6><p>选择菜单：File》Project Structure进入到项目配置（快捷键Ctrl+Alt+Shift+S）</p><ul><li>在左侧Project选项卡中设置项目SDK版本</li><li>在左侧Modules选项卡中设置项目编译输出路径和依赖</li><li>在左侧Libraries选项卡中管理项目的依赖信息，其实就是一个开发时的Classpath</li><li>在左侧Facets选项卡中配置项目的Web部署相关配置，注意好路径问题，在IDEA中默认时web路径，需要更改为dist路径</li><li>在左侧Artifacts选项卡中设置项目编译输出的相关配置</li></ul><img src="/2019/05/22/gxcerc-2019-05-22-study-03/idea-project-project.png" class="" title="idea-project-project"><img src="/2019/05/22/gxcerc-2019-05-22-study-03/idea-project-modules-output.png" class="" title="idea-project-modules-output"><img src="/2019/05/22/gxcerc-2019-05-22-study-03/idea-project-modules-dependencies.png" class="" title="idea-project-modules-dependencies"><img src="/2019/05/22/gxcerc-2019-05-22-study-03/idea-project-modules-dependencies-add.png" class="" title="idea-project-modules-dependencies-add">]]></content>
    
    
    <summary type="html">&lt;p&gt;时隔两天才更新日志，前两天偷了点懒，没有什么输出，也就没有什么可以写的。&lt;br&gt;今天写一下如何使用Eclipse和IDEA同时开发公司的这个demo项目，直接导入项目肯定多少是有一点问题的，因此需要做一些相关的配置，这篇日志就是说明如何更改和设置这些配置。&lt;/p&gt;
&lt;img src=&quot;/2019/05/22/gxcerc-2019-05-22-study-03/dir-info.png&quot; class title=&quot;demo目录结构&quot;&gt;

&lt;h2 id=&quot;Eclipse-开发工具&quot;&gt;&lt;a href=&quot;#Eclipse-开发工具&quot; class=&quot;headerlink&quot; title=&quot;Eclipse 开发工具&quot;&gt;&lt;/a&gt;Eclipse 开发工具&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
